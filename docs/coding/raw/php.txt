**为幂运算
AND OR 才有短路求值
. 用于拼接字符串
在php中 0 == false为真
当一个数据无效时 === false(错误)
当一个数据无效时 == false 但是 !== false
因此当函数有不同类型的返回值时应使用 ===
如strpos查找字符串，存在时返回数字，不存在时返回false
当类型不同时php将会使其尽量合理化

isset() 可用于检测一个变量是否被初始化
对于$_POST等一般已经定义，无表单时为空值
当对于一个数组不存在的索引可以使用isset判断其存在，不存在返回false(直接访问将出错)
empty() 检查是否为空值，同转化为bool型再取反
gettype() 获取变量的类型
var_dump() 打印变量信息

(int), (integer) - 转换为整形 int
(bool), (boolean) - 转换为布尔类型 bool
(float), (double), (real) - 转换为浮点型 float
(string) - 转换为字符串 string
(array) - 转换为数组 array
(object) - 转换为对象 object
(unset) - 转换为 NULL

双引号""将自动解析内容中的变量，且使用转移字符时需要使用双引号
sprintf直接返回格式化的字符串，不需要提供目标字符串
(type)()强制类型转换
false为字符串是什么也没有
浏览器中会将\n视为空格，输出多行时要用<br>

case里面无需花括号
elseif
global 定义全局变量，定义在函数外的一般变量无法在函数内生效
使用htmlentities函数来净化超级全局变量，保证安全性
静态变量不能用表达式赋初值
使用define("名称",值)定义全局常量，且使用时不加$

https://www.php.net/manual/zh/language.functions.php
当函数的定义出现在最外层是，函数可以在任何位置被调用
当函数的定义在逻辑语句(if)或另一个函数内是，只有这段代码被运行后，函数才有效
函数允许引用传参与设定默认参数
PHP 还允许使用数组 array 和特殊类型 null 作为默认参数
返回值如果省略了 return，则返回值为 null。
PHP 不支持函数的重载
https://www.php.net/manual/zh/language.references.php
如果对一个未定义的变量进行引用赋值、引用参数传递或引用返回，则会自动创建该变量。
不要用返回引用来增加性能，引擎足够聪明来自己进行优化。
当 unset 一个引用，只是断开了变量名和变量内容之间的绑定。这并不意味着变量内容被销毁了。
不可以将常量作为引用或引用的参数

将函数作为参数(callable)的方法:
一般函数即字符串"函数名"
静态成员函数则是array("类名","函数名")

在php的函数与类的定义中允许限定参数/成员的类型，只需在变量名前加上类型(此时类型错误将报错)
再函数的定义前加冒号后可再接上函数的返回值类型，返回的类型错误时将报错
如果类型前再加一个?(无空格)则表示允许其为null 若使用mixed表示任何类型

使用include_once保证只包含一次外部文件
使用require_once如果找不到被引用的文件，将不会继续执行
使用new (Class)创建对象变量

print_r() 以人性化的方法输出类变量的信息
使用$obj->property(成员变量无需$) 或 $obj->method 访问成员
对象传递至的时候均为引用传递 $a = $b ,此时a只为b的一个别名
使用clone 被克隆的对象 来克隆
构造函数名为 __construct() 前面个有两个下划线//定义构造函数之后必须要有参数
构析函数名为 __destruct() 在结尾调用，用于清理与数据库的连接等
使用$this访问当前的对象
常量成员 定义 const 常量名 = 初值	访问 类名::常量名(无$)
默认访问限制符为 public/定义成员变量的时候需要访问限制符
静态函数 不能访问一般成员
静态成员通过类名::$变量名(有$)访问 不能用->访问
使用extends继承 class Children extends Parent
子类方法覆盖父类时(子类与父类的同名函数参数要相同)，构造函数不受这一规则影响
使用parent关键字访问父类方法 self访问源方法(默认)//仅用于类内
eg.parent::fun() self::fun()
子类不会调用父类的构造函数，最好在子类构造函数第一行手动调用parent::__construct()
使用final关键字防止父类的成员被子类覆盖

关于构造函数的补充
1.构造函数名为 __construct() 前面个有两个下划线//定义构造函数之后无默认构造函数
2.构造函数不受子类与父类的同名函数参数要相同规则影响
3.在构造函数的参数前加上protected等访问限制可使其提成为类的属性
4.如果不得不有多种参数的构造方式可以用static方法包装，隐藏构造函数
在static方法中构造类，再返回

array[] = 默认指向数组最后一个位置
一般数组 以数字为引索，当位置不存在将自动创建，中间位置则为空
关联数组 以字符串为引索的数组，当位置不存在将自动创建
关联数组的定义 array("引索名1" => 值1, "引索名2" => 值2, ...)
关联数组不能使用数组访问，一般数组不能使用字符串引索访问
使用foreach遍历数组
一般数组 foreach($数组 as $迭代器)
关联数组 foreach($数组 as $迭代引索 => $迭代值) 或 while(list($迭代引索, $迭代值) = each($数组))
list($a, $b) = $var 从var中提取两个值到a,b中,var可以是键值对也可以是数组/each($数组)遍历数组
多维数组即以array为值得数组

is_array($a) 判断a是否为数组(若a为字符串，也可以使用[]操作其中字符)
count($数组,$层数) 计算数组长度，层数可不写，0为顶层
sort($数组,标识) 排序，标识SORT_NUMERIC按数字排序 SORT_STRING 按字符串排序 非必要，加r为逆向
shuffle($数组) 随机抽出一个元素
explode($字符,$字符串) 将字符串根据字符拆分为字符串数组
extract($关联数组) 将关联数组的值赋给其引索，如果由于引索同名的变量将覆盖原变量
(extract($数组 ,EXTR_PREFIX_ALL ,字符串)使用此方法给提取的变量加上前缀防止其冲突)
$array = compact($变量名字符串1, $变量名字符串2, ...) 根据变量名字符串和其值创建一个关联数组array
reset($数组)将遍历指针重置(用于each与foreach中)，返回重置后指向的元素
end($数组)同reset 但将遍历指针置于末尾
array_key_exists($key, $array) 判断键名或者索引是否存在
count($数组) 用于获取数组长度

printf格式化输出/sprintf(返回被转换的字符串)
常用转化符：%b二进制 %x小写16进制 %X大写16进制 printf('%X%X%X', $r, $g, $b); 输出颜色值(方便设置html的颜色)
精度控制/字符串填充 %[- 表示左对齐][填充符][长度].[精度/第n个字符后截断]转化符 
对于非数字或空格填充符需要 '加填充符，使用双引号 printf("%'#15.4f", 3.1415926);
表示%使用%%

time() 获取unix时间戳
mktime(时,分,秒,月,天,年) 创建时间戳
date(格式字符串, 时间戳) 返回时间字符串 预设常量(常量字符串) DATE_COOKIE DATE_W3C DATE_RSS ....
checkdate(月,日,年) 确定时期是否有效
扩展 DateTime类

file_exists(地址) 检查文件是否存在
fopen(地址, 模式字符串) 打开文件,返回文件指针，失败返回false 
可用 $fh = fopen("test.txt", "w") or die("Failed to Create"); 当创建失败执行die函数，退出程序
r	在文件开头读取，文件不存在不会创建 只读
w	清空文件，在文件开头写入，文件不存在会创建 只写
a	在文件末尾写入，文件不存在会创建 只写
[标识符]+	以读写方式打开文件
fclose(文件指针) 关闭文件
fgets(文件指针) 逐行读取字符串
fread(文件指针, 字符数) 逐字符读取, 可用于读取二进制文件
copy(原地址, 复制地址) 复制文件，成功时返回true
rename(原地址, 新地址) 重命名文件，成功时返回true 文件不存在时将报错
unlink(地址) 删除文件 文件不存在时将报错
fseek(文件指针, 偏移量, 偏移标识)
SEEK_END	从末尾偏移
SEEK_SET		从头偏移
SEEK_CUR	从当前位置偏移
file_get_contents(地址) 抓取整个文件，返回字符串，可以是其他网站等

上传文件使用表单 <form method = 'post' action = '调用的脚本' enctype = 'multipart/form-data'>
一般通过调用本页面实现非跳转访问 并使用if($_FILES)检测是否有上传
与表单对接 _FILES[表单的字段 即input中的name属性][属性]
属性
name		文件名
type		文件类型(MIME)
size		文件大小 字节
tmp_name	文件的临时储存位置
error		错误代码
对与上传的文件使用 move_uploaded_file(文件的临时储存位置, 新文件名); 储存到本地
通过判断上传文件的type 与 size 属性验证其是否合法
switch($_FILES['filename']['type'])//验证上传文件的属性并获取其格式
(最好将上传的文件保存为其他名字防止恶意代码)
也可使用preg_replace(正则表达式, 替代符, 转化字符串) 净化上传文件名
{
    case 'image/gif' :
        $ext = 'gif';
        break;
    case 'image/pjpeg' : //jpeg的别名
    case 'image/jpeg' :
        $ext = 'jpg';
        break;

    case 'image/png' :
        $ext = 'png';
        break;
    default :
        $ext = '';//空字符串表示false;
        break;
}

使用
        echo<<<_END
    插入的HTML
_END;//必须单独一行，位于最左端且有分号
使用函数exec(命令名, 接收命令输出的变量, 接受命令状态的变量); 执行本地命令

