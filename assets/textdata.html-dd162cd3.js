import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as t,c,b as e,d as n,a as l,e as s}from"./app-8c5ce49e.js";const d={},p=s('<h1 id="文本数据存储语言" tabindex="-1"><a class="header-anchor" href="#文本数据存储语言" aria-hidden="true">#</a> 文本数据存储语言</h1><h2 id="yaml" tabindex="-1"><a class="header-anchor" href="#yaml" aria-hidden="true">#</a> YAML</h2><h3 id="基本介绍" tabindex="-1"><a class="header-anchor" href="#基本介绍" aria-hidden="true">#</a> 基本介绍</h3><ul><li>YAML 可用于表示清单, 列表等数据形态, 通常用于表达数据结构与配置文件</li><li>YAML 文件使用后缀 <code>.yml</code></li><li>YAML 的基本语法如下 <ul><li>对大小写敏感</li><li>使用缩进表示层级, 缩进只能使用空格, 但数量无限制 (同一层级缩进相同)</li><li>使用 <code>#</code> 用于注释内容的开始</li></ul></li><li>YAML 支持数据类型 <ul><li>纯量, 即单个不可分的值</li><li>数组 (列表)</li><li>对象 (键值对)</li></ul></li></ul><h3 id="纯量表示" tabindex="-1"><a class="header-anchor" href="#纯量表示" aria-hidden="true">#</a> 纯量表示</h3><p>YAML 支持以下类型的纯量</p><p>布尔值</p><ul><li>真值表示: <code>TRUE</code>, <code>True</code>, <code>true</code></li><li>假值表示: <code>FALSE</code>, <code>False</code>, <code>false</code></li></ul><p>整数 (任何进制中均允许使用单个 <code>_</code> 作为分隔, 可有任意个分隔符)</p><ul><li>十进制表示 <code>114</code></li><li>二进制表示 <code>0b0111_0010</code></li><li>八进制表示 <code>0162</code></li><li>十六进制表示 (大小写均可) <code>0x72</code></li></ul><p>浮点数</p><ul><li>一般表示 <code>+3.14</code></li><li>科学计数法表示 <code>3.14e+5</code></li></ul><p>字符串</p><ul><li>直接表示 (内容无法解析时视为字符串) <code>Hello World</code></li><li>使用 <code>&#39;</code> 或 <code>&quot;</code> 包裹 (推荐, 防止其中字符被解析) <code>&quot;Hello World&quot;</code><ul><li><code>&#39;</code> 包裹时, 不会对包裹内容进行转义</li><li><code>&quot;</code> 包裹时, 可使用 <code>\\</code> 作为转义符, 如 <code>\\n</code> 表示换行</li></ul></li><li>允许多行字符串 (无论是否使用 <code>&#39;</code> 包裹) <ul><li>各行字符串在文件中的起始位置必须与第一行对齐</li><li>单个换行表示空格, 两个换行 (空行) 表示换行符</li></ul></li></ul><p>空 (对于基本加载器不支持, 将直接解析为字符串)</p><ul><li>使用符号表示 <code>~</code></li><li>使用关键字表示 <code>Null</code>, <code>null</code>, <code>NULL</code></li><li>没有输入内容</li></ul><p>日期与时间</p><ul><li>仅日期表示 <code>yyyy-MM-dd</code>, 例如 <code>2024-4-3</code></li><li>日期与时间表示 <code>yyyy-MM-ddTHH:mm:ss</code>, 其中 <code>T</code> 为分隔符</li></ul><h3 id="复合结构" tabindex="-1"><a class="header-anchor" href="#复合结构" aria-hidden="true">#</a> 复合结构</h3><ul><li>一个 YAML 文件只能表示一个值, 因此通常以列表或对象作为基础</li></ul><p>列表表示</p><ul><li>在同一层级中使用多行 <code>- &lt;value&gt;</code> 表示列表中的元素 <ul><li>值 <code>value</code> 可以是任意<a href="#%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D">支持类型</a></li><li>对于复合结构, 一般在 <code>-</code> 后加一个换行, 并在下一层级中定义</li></ul></li><li>使用单行 <code>[value1, value2, ...]</code> 表示列表</li></ul><p>对象表示</p><ul><li>在同一层级中使用多行 <code>&lt;key&gt;: &lt;value&gt;</code> 的键值对表示对象 <ul><li>值 <code>value</code> 可以是任意<a href="#%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D">支持类型</a></li><li>键 <code>key</code> 一般为<a href="#%E7%BA%AF%E9%87%8F%E8%A1%A8%E7%A4%BA">字符串</a>, 不允许有重复的值</li><li>注意冒号 <code>:</code> 与键相连, 与值之间存在一个空格</li></ul></li><li>使用单行 <code>{key1: value1, key2: value2}</code> 表示对象 (注意此处 <code>:</code> 依然有要求)</li></ul><h2 id="toml" tabindex="-1"><a class="header-anchor" href="#toml" aria-hidden="true">#</a> TOML</h2>',25),u={href:"https://toml.io/cn/",target:"_blank",rel:"noopener noreferrer"},r=s(`<h3 id="基本介绍-1" tabindex="-1"><a class="header-anchor" href="#基本介绍-1" aria-hidden="true">#</a> 基本介绍</h3><ul><li>TOML 是一种专门用于表示配置文件的格式, 相比 YAML 更加稳定</li><li>TOML 文件使用后缀 <code>.toml</code></li><li>TOML 的基本语法如下 <ul><li>对大小写敏感, 且文档必须是 UTF-8 编码</li><li>表示数据时, 将 <code></code> 与制表符视为空白, 其余均为需要解析的符号</li><li>使用 <code>#</code> 用于注释内容的开始</li></ul></li><li>TOML 支持数据类型 <ul><li>对象 (TOML 中称为表)</li><li>数组</li><li>纯量</li></ul></li></ul><h3 id="纯量表示-1" tabindex="-1"><a class="header-anchor" href="#纯量表示-1" aria-hidden="true">#</a> 纯量表示</h3><p>字符串 (TOML 中共有四种字符串)</p><ul><li>基本字符串, 使用 <code>&quot;</code> 包裹, 仅能有单行 <ul><li>基本字符串内可使用 <code>\\</code> 用于转义, 常用的如下</li><li><code>\\t</code> 制表符</li><li><code>\\n</code> 换行</li><li><code>\\&quot;</code> 引号</li><li><code>\\\\</code> 反斜杠</li><li><code>\\uXXXX</code> unicode 字符</li></ul></li><li>多行字符串, 使用 <code>&quot;&quot;&quot;</code> 包裹 <ul><li>多行字符串将包含换行符</li><li>在单行文本末尾使用 <code>\\</code>, 将忽略之后的换行与空格, 与最先出现的文本连接</li><li>当文本末尾换行使用 <code>&quot;&quot;&quot;</code>, 将导致文本末尾被加上一个换行, 此时可使用 <code>\\</code> 或让结尾的 <code>&quot;&quot;&quot;</code> 紧跟文本末尾</li><li>多行字符串同样可以使用 <code>\\</code> 转义, 同基本字符串</li></ul></li><li>字面字符串, 使用 <code>&#39;</code> 包裹, 仅能有单行 <ul><li>子面字符串不允许转义, 可用于表示正则表达式, Windows 路径等出现大量 <code>\\</code> 的情况</li><li>类似的还有多行字面字符串 <code>&#39;&#39;&#39;</code>, 多行字面字符串中允许出现单个 <code>&#39;</code></li></ul></li></ul><p>数值</p><ul><li>数值的基本表示与 <a href="#%E7%BA%AF%E9%87%8F%E8%A1%A8%E7%A4%BA">YAML 的数值</a>类似, 此处省略</li><li>此外还能使用 <code>inf</code> 表示无穷, <code>nan</code> 表示非数值</li></ul><p>其他纯量</p><ul><li>布尔值使用 <code>true</code> 表示真, <code>false</code> 表示假</li><li>时间与 <a href="#%E7%BA%AF%E9%87%8F%E8%A1%A8%E7%A4%BA">YAML 的时间</a>类似, 此处省略</li></ul><h3 id="复合结构-1" tabindex="-1"><a class="header-anchor" href="#复合结构-1" aria-hidden="true">#</a> 复合结构</h3><p>整个 TOML 文件本身即一个对象, 即使是最底层的值都需要通过键值对的方式表示</p><p>键值对表示</p><ul><li>通过 <code>=</code> 连接键名与键值, 通常等号两侧有空格, 一个键值对只能在一行内定义</li><li>裸键即基本键名, 只能使用字母, 数组, 下划线与短横 <code>-</code></li><li>引号键即通过 <code>&quot;</code> 包含的键名, 可表示任意键名, 但并不推荐</li><li>可使用 <code>.</code> 连接不同键名 (裸键或引号键), 例如 <code>A.&quot;B&quot;</code> 表明键 <code>A</code> 的值为一个对象, 该对象下有键 <code>&quot;B&quot;</code></li><li>同一个对象中不允许出现两个同名的键</li></ul><p>对象 (表)</p><ul><li>最基本的方法即使用 <code>.</code> 连接键名, 以表示特定对象键值下的键值对</li><li>推荐通过单行的 <code>[]</code> 包裹的键名 (可以是任意一种键名) 为表头, 之后直到一个新的表头出现, 下方的内容都将作为该键名下对象的键值对 <ul><li>在文本上, 该方法体现为特定部分的设置</li><li>在数据上, 该方法体现为定义对象键值</li><li>注意, 同一个键名只能以 <code>[]</code> 包裹的方式出现一次, 其中 <code>[A.B], [A.C]</code> 视为两个键名</li></ul></li><li>此外还可以使用内联的方式表示对象, 此时对象的键值对使用 <code>{}</code> 包裹, 键值对之间使用 <code>,</code> 分隔, 内联表示时不允许换行</li></ul><p>数组</p><ul><li>基本数组即内联数组, 数组整体使用 <code>[]</code> 包裹, 数组元素之间使用 <code>,</code> 分隔且数组允许跨行, 也可以使用内联表, 嵌套数组, 一般纯量作为元素</li><li>对于以对象为元素的数组还可使用单行的 <code>[[]]</code> 包裹键名, 此时将表示数组中的一个元素, 每个相同键名的 <code>[[]]</code> 结构都将表示数组中的下一个元素</li></ul><h3 id="文件示例" tabindex="-1"><a class="header-anchor" href="#文件示例" aria-hidden="true">#</a> 文件示例</h3><div class="language-toml line-numbers-mode" data-ext="toml"><pre class="language-toml"><code><span class="token comment"># 全局设置</span>
<span class="token key property">title</span> <span class="token punctuation">=</span> <span class="token string">&quot;Default Figure Style&quot;</span>
<span class="token key property">figure_size</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token number">640</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">]</span> <span class="token comment"># 表示 .figure_size</span>

<span class="token punctuation">[</span><span class="token table class-name">plot</span><span class="token punctuation">]</span> <span class="token comment"># 关于 plot 的设置</span>
<span class="token key property">projection</span> <span class="token punctuation">=</span> <span class="token string">&quot;normal&quot;</span> <span class="token comment"># 表示 .plot.projection</span>
<span class="token key property">size</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">]</span>

<span class="token punctuation">[</span><span class="token table class-name">plot.legend</span><span class="token punctuation">]</span> <span class="token comment"># 关于 plot 中的 legend 的设置</span>
<span class="token key property">position</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">]</span> <span class="token comment"># 表示 .plot.legend.position</span>
<span class="token key property">legends</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;line A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;line B&quot;</span><span class="token punctuation">]</span>

<span class="token punctuation">[</span><span class="token table class-name">plot.lims</span><span class="token punctuation">]</span>
<span class="token key property">xlim</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token number">-10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span>
<span class="token key property">ylim</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="json" tabindex="-1"><a class="header-anchor" href="#json" aria-hidden="true">#</a> JSON</h2>`,20),h={href:"https://www.json.org/json-zh.html",target:"_blank",rel:"noopener noreferrer"},k=s('<h3 id="基本介绍-2" tabindex="-1"><a class="header-anchor" href="#基本介绍-2" aria-hidden="true">#</a> 基本介绍</h3><ul><li>JSON 本质为 Javascript 对象表示法, 可用于存储和交换文本信息, 读写速度较快</li><li>JSON 文件使用后缀 <code>.json</code></li><li>JSON 的基本语法如下 <ul><li>对大小写敏感</li><li>对层级与缩进没有要求, 但一般会使用缩进增加可读性</li><li>通常不允许注释</li></ul></li><li>JSON 支持数据类型 <ul><li>JSON 值, 即单个不可分的值</li><li>数组 (列表)</li><li>对象 (键值对)</li></ul></li></ul><h3 id="json-值" tabindex="-1"><a class="header-anchor" href="#json-值" aria-hidden="true">#</a> JSON 值</h3><p>JSON 支持以下纯量</p><ul><li>布尔值 <ul><li>使用关键字 <code>ture</code> 表示真值</li><li>使用关键字 <code>false</code> 表示假值</li></ul></li><li>数字 <ul><li>支持浮点数与整数, 但仅能使用十进制</li><li>允许使用 <code>e</code> 或 <code>E</code> 使用科学计数法表示数值</li></ul></li><li>字符串 <ul><li>字符串只能使用双引号 <code>&quot;</code> 包裹</li><li>字符串内不允许有换行, 只能在单行内表示自负床</li><li>使用 <code>\\</code> 作为转义符, 常用的有 <ul><li><code>\\n</code> 换行, <code>\\t</code> 制表符</li><li><code>\\u + XXXX</code> unicode 字符, <code>XXXX</code> 为四位十六进制数</li><li><code>\\&quot;, \\\\</code> 符号转义</li></ul></li></ul></li><li>空 <ul><li>使用关键字 <code>null</code> 表示空</li></ul></li></ul><h3 id="复合结构-2" tabindex="-1"><a class="header-anchor" href="#复合结构-2" aria-hidden="true">#</a> 复合结构</h3><ul><li>允许在表示复合结构时, 在结构符号之间插入任意的换行与空格</li><li>一个 JSON 文件只能表示一个值, 因此通常以列表或对象作为基础</li><li>列表表示 <ul><li>使用 <code>[]</code> 包裹列表, <code>,</code> 分隔各个元素</li><li>例如 <code>[value1, value2, ...]</code></li></ul></li><li>对象表示 <ul><li>使用 <code>{}</code> 包裹对象, <code>:</code> 分隔键与值, <code>,</code> 分隔各个键值对</li><li>允许以任意 <a href="#json-%E5%80%BC">JSON 值</a>作为键, 但是一个对象中不能有重复的键</li><li>例如 <code>{key1: value1, ...}</code></li></ul></li></ul><h2 id="json-模板" tabindex="-1"><a class="header-anchor" href="#json-模板" aria-hidden="true">#</a> JSON 模板</h2>',8),m={href:"https://json-schema.org/learn/getting-started-step-by-step",target:"_blank",rel:"noopener noreferrer"},q=s('<p>由于 JSON 一般用于表示具有特定结构的数据或对象, 因此可使用模板对数据的格式进行规范, 模板同样为一个 JSON 文件, 一般使用后缀 <code>.schema.json</code></p><p>使用时, 在根对象中添加键 <code>$schema</code> 并以模板文件的路径为值, 可以是网络路径或本地路径</p><p>以下仅介绍部分模板编写, 具体见官方文档</p><h3 id="模板描述" tabindex="-1"><a class="header-anchor" href="#模板描述" aria-hidden="true">#</a> 模板描述</h3><p>模板文件以对象为基础数据, 并且包含了以下必须的键</p><ul><li><code>$schema</code> 模板标准, 一般为以下字符串 <ul><li><code>https://json-schema.org/draft/2020-12/schema</code></li><li><code>https://json-schema.org/draft-07/schema#</code></li></ul></li><li><code>$id</code> 模板访问路径<br> 对于本地模板使用本地的路径, 如果模板存放在网上则可使用链接</li><li><code>title</code> 模板标题, 字符串</li><li><code>description</code> 基础数据介绍</li><li><code>type</code> 文件基础数据类型, 字符串 <ul><li>具体介绍见后, 一般为 <code>object</code>, 即以对象为 JSON 文件的基础数据</li></ul></li><li>用于描述基础数据的键同样位于该基础数据中</li></ul><h3 id="值模板" tabindex="-1"><a class="header-anchor" href="#值模板" aria-hidden="true">#</a> 值模板</h3><p>对于任意值的模板, 均使用一个对象表示, 且至少有以下键</p><ul><li><code>type</code> 值的类型标识, 没有时为任意类型</li><li><code>description</code> 对于值的描述</li><li>剩余的键用于表示值的约束等信息, 一般均为可选键</li></ul><p>数值</p><ul><li>类型标识 <ul><li>对于整数有类型标识 <code>integer</code></li><li>对于浮点数有类型标识 <code>number</code></li></ul></li><li>取值约束 <ul><li>最小值约束 <code>minimum</code>, 键值为允许的最小值 (可以相等)</li><li>最大值约束 <code>maximum</code>, 键值为允许的最大值 (可以相等)</li><li>倍数约束 <code>multipleOf</code>, 键值为浮点数, 要求倍约束值必须是键值的整数倍</li></ul></li></ul><p>字符串</p><ul><li>类型标识 <code>strgin</code></li><li>取值约束 <ul><li>最小长度约束 <code>minLength</code>, 要求约束值得长度必须大于等于键值</li><li>最大长度约束 <code>maxLength</code>, 要求约束值得长度必须小于等于键值</li><li>正则表达式约束 <code>pattern</code>, 键值为正则表达式, 要求约束值必须满足</li></ul></li></ul><p>数组</p><ul><li>类型标识 <code>array</code></li><li>取值约束 <ul><li>数组类型约束 <code>items</code>, 键值为一个值模板对象, 表示被约束数组元素的模板</li><li>最小长度约束 <code>minItems</code>, 要求约束值得长度必须大于等于键值</li><li>最大长度约束 <code>maxItems</code>, 要求约束值得长度必须小于等于键值</li><li>唯一元素约束 <code>uniqueItems</code>, 取值为 <code>true</code> 时, 要求数组中不能有重复的元素</li><li>元组化约束 <code>prefixItems</code>, 取值为一个由值模板组成的数组, 要求被约束数组对应位置元素类型与键值相同, 其余元素则受其他取值约束</li></ul></li></ul><p>对象</p>',16),b=e("li",null,[n("类型标识 "),e("code",null,"object")],-1),v={href:"https://json-schema.org/understanding-json-schema/reference/object",target:"_blank",rel:"noopener noreferrer"},f=s("<ul><li>键值约束 <code>properties</code>, 取值为一个以值模板为值的对象, 要求被约束对象如果有对应的键, 则键值类型要满足要求 (不要求其中的键必须出现)</li><li>其他键约束 <code>additionalProperties</code>, 取值为 <code>false</code> 时, 不允许出现键值约束 <code>properties</code> 以外的键</li><li>必须键约束 <code>required</code>, 取值为一个数组, 表面对象必须包含的键</li></ul>",1),g=s(`<p>其他类型</p><ul><li>对于空值有类型标识 <code>null</code></li><li>对于布尔值有类型标识 <code>boolean</code></li><li>枚举量 <ul><li>枚举量不需要类型标识, 而是直接使用键 <code>enum</code> 定义</li><li>键 <code>enum</code> 的值为一个数组, 包含了该枚举量所有允许的值</li></ul></li><li>常量 <ul><li>枚举量不需要类型标识, 而是直接使用键 <code>const</code> 定义</li><li>要求被约束值与键 <code>const</code> 的值相同</li><li>一般配合 <code>oneOf</code> 使用, 可用于标记使用的类型, 可见示例</li></ul></li></ul><p>复合值模板</p><ul><li>可以使用复合值模板代替一般的值模板标识复杂类型</li><li>复合值模板均为一个单键的对象, 且取值为一个以值模板为元素的数组</li><li>常用的复合值有 <ul><li><code>anyOf</code> 表示被约束值满足其中任意值模板即可</li><li><code>oneOf</code> 表示被约束值只能满足其中一个值模板</li><li><code>not</code> 表示被约束值不能满足其中任何值模板</li></ul></li><li>还允许将复合值模板视为值约束使用, 此时键值数组的元素为一个约束组成的对象, 因此可用于组合多个相同约束</li></ul><h3 id="模板示例" tabindex="-1"><a class="header-anchor" href="#模板示例" aria-hidden="true">#</a> 模板示例</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;$schema&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://json-schema.org/draft-07/schema#&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;$id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;xxx.schema.json&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;姿态对象&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;用于描述一个姿态&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;oneOf&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">&quot;interface&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;const&quot;</span><span class="token operator">:</span> <span class="token string">&quot;quat&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token property">&quot;quat&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;array&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;items&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;number&quot;</span>
                    <span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;minItems&quot;</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;maxItems&quot;</span><span class="token operator">:</span> <span class="token number">4</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token property">&quot;require&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;interface&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;quat&quot;</span><span class="token punctuation">]</span> 
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">&quot;interface&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;const&quot;</span><span class="token operator">:</span> <span class="token string">&quot;special&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token property">&quot;enum&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;identity&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;random&quot;</span><span class="token punctuation">]</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token property">&quot;require&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;interface&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;type&quot;</span><span class="token punctuation">]</span> 
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="相关工具" tabindex="-1"><a class="header-anchor" href="#相关工具" aria-hidden="true">#</a> 相关工具</h3>`,7),y={href:"https://json-schema.org/implementations",target:"_blank",rel:"noopener noreferrer"},_={href:"https://json-schema.org/implementations#web-(online)",target:"_blank",rel:"noopener noreferrer"},x=e("h2",{id:"xml",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#xml","aria-hidden":"true"},"#"),n(" XML")],-1),A={href:"https://www.runoob.com/xml/xml-tutorial.html",target:"_blank",rel:"noopener noreferrer"},E=e("h3",{id:"基本介绍-3",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#基本介绍-3","aria-hidden":"true"},"#"),n(" 基本介绍")],-1),L=s("<li>XML 全称为可扩展标记语言, 可用于传输与存储数据</li><li>XML 文件一般使用后缀 <code>.xml</code></li><li>XML 通过自定义的标签为节点构成的树状结构来表达数据</li><li>XML 的基本语法如下 <ul><li>将标签称为元素, 元素具有属性, 元素下可以是文本或子元素</li><li>所有数据都必须在一个根标签下</li><li>文件的第一行为 XML 声明, 一般为<br><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</code></li><li>XML 中以 <code>&lt;!--</code> 开始, 以 <code>--&gt;</code> 结束, 用于包含注释内容</li></ul></li>",4),j={href:"https://www.runoob.com/dtd/dtd-intro.html",target:"_blank",rel:"noopener noreferrer"},M=s('<h3 id="元素" tabindex="-1"><a class="header-anchor" href="#元素" aria-hidden="true">#</a> 元素</h3><ul><li>一般元素 <ul><li>即具有文本或子元素的元素, 使用如下的开始标签与结束标签包裹元素内容</li><li>开始标签 <code>&lt;xxx&gt;</code>, 使用 <code>&lt;&gt;</code> 包裹元素名</li><li>结束标签 <code>&lt;/xxx&gt;</code>, 改用 <code>&lt;/</code> 为起始包含元素名, 要求元素的开始与结束标签必须有相同的元素名, 且区分大小写</li><li>应当保证元素间的正确嵌套, 即当元素 <code>a</code> 在元素 <code>b</code> 内开始就必须在 <code>b</code> 内结束</li></ul></li><li>单标签 <ul><li>将仅具有属性而没有内容的元素使用单标签表示</li><li>单标签 <code>&lt;xxx/&gt;</code>, 改用 <code> /&gt;</code> 为终止包含元素名, 注意空格</li></ul></li><li>元素命名 <ul><li>元素名称最好仅包含字母, 数字, 下划线</li><li>元素名称不允许包含空格</li><li>元素名称不能以 <code>xml</code>, 数字或下划线开头</li></ul></li><li>元素属性 <ul><li>一个元素可以包含多个属性, 通过在开始标签后使用空格表示</li><li>单个属性使用 <code>attr=&quot;value&quot;</code> 表示, 注意 <ul><li>元素的值需要使用 <code>&quot;</code> 或 <code>&#39;</code> 包裹</li><li>属性名与属性值之间使用 <code>=</code> 连接, 不允许有其他空格</li><li>属性名的命名要求与元素名类似, 但一个元素下不允许有同名属性</li></ul></li><li>由于一个属性只能有一个字符串, 没有树结构且不易拓展, 因此对于属性不应该存放任何数据, 而是使用子元素代替</li><li>推荐元素属性存放用于区分其他相同元素的元数据, 例如元素的 id</li><li>关于在属性值中使用特殊字符的表示见<a href="#%E5%AE%9E%E4%BD%93%E5%BC%95%E7%94%A8">实体引用</a></li></ul></li><li>元素文本 <ul><li>当元素的内容不包含 <code>&lt;</code> 时将被视为存储文本</li><li>与 HTML 不同, 文本中的多个空格与换行不会被合并为一个</li><li>关于在文本内容中使用特殊字符的表示见<a href="#%E5%AE%9E%E4%BD%93%E5%BC%95%E7%94%A8">实体引用</a></li></ul></li></ul><h3 id="实体引用" tabindex="-1"><a class="header-anchor" href="#实体引用" aria-hidden="true">#</a> 实体引用</h3><ul><li>XML 中的表示文本或属性时不允许使用 <code>&lt;</code> 与 <code>&amp;</code>, 需要使用实体引用来表示这些字符</li><li>实体引用通常以 <code>&amp;</code> 开始, 以 <code>;</code> 结束, 使用中间的内容表示特定符号, 常用如下 (虽然部分字符允许直接使用, 但依然建议使用实体引用表示) <ul><li><code>&amp;lt;</code> 表示 <code>&lt;</code></li><li><code>&amp;gt;</code> 表示 <code>&gt;</code></li><li><code>&amp;apos;</code> 表示 <code>&#39;</code></li><li><code>&amp;quot;</code> 表示 <code>&quot;</code></li><li><code>&amp;amp;</code> 表示 <code>&amp;</code></li></ul></li></ul>',4);function B(O,N){const o=i("ExternalLinkIcon");return t(),c("div",null,[p,e("blockquote",null,[e("p",null,[n("参见 "),e("a",u,[n("https://toml.io/cn/"),l(o)])])]),r,e("blockquote",null,[e("p",null,[n("参见 "),e("a",h,[n("https://www.json.org/json-zh.html"),l(o)])])]),k,e("blockquote",null,[e("p",null,[n("参考 "),e("a",m,[n("https://json-schema.org/learn/getting-started-step-by-step"),l(o)])])]),q,e("ul",null,[b,e("li",null,[n("取值约束 (更多见"),e("a",v,[n("文档"),l(o)]),n(") "),f])]),g,e("ul",null,[e("li",null,[n("不同语言的 JSON 模板验证模块 "),e("a",y,[n("https://json-schema.org/implementations"),l(o)])]),e("li",null,[n("在线 JSON 模板验证 "),e("a",_,[n("https://json-schema.org/implementations#web-(online)"),l(o)]),n(" (更推荐使用 vscode 的自动提示功能测试)")])]),x,e("blockquote",null,[e("p",null,[n("参考 "),e("a",A,[n("https://www.runoob.com/xml/xml-tutorial.html"),l(o)])])]),E,e("ul",null,[L,e("li",null,[n("在 XML 文件的第二行还可以声明 XML 文件的模板, 更多参见 "),e("a",j,[n("DTD"),l(o)]),n(" 有关教程")])]),M])}const w=a(d,[["render",B],["__file","textdata.html.vue"]]);export{w as default};
