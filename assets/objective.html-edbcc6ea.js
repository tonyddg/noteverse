import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c,b as n,d as a,a as e,e as t}from"./app-8c5ce49e.js";const l={},u=t(`<h1 id="面向对象与高级语法" tabindex="-1"><a class="header-anchor" href="#面向对象与高级语法" aria-hidden="true">#</a> 面向对象与高级语法</h1><h2 id="创建类" tabindex="-1"><a class="header-anchor" href="#创建类" aria-hidden="true">#</a> 创建类</h2><h3 id="类的基本结构" tabindex="-1"><a class="header-anchor" href="#类的基本结构" aria-hidden="true">#</a> 类的基本结构</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token punctuation">[</span>类名<span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token string">&quot;[类说明文档]&quot;</span>
    val<span class="token punctuation">:</span> <span class="token builtin">type</span> <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="成员函数" tabindex="-1"><a class="header-anchor" href="#成员函数" aria-hidden="true">#</a> 成员函数</h3><p>类的成员函数与一般函数相同, 均使用 def 定义, 但成员函数的第一个参数必定是向类本身的实例(类似 this), 通常命名为 self</p><h3 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数" aria-hidden="true">#</a> 构造函数</h3><p>类的构造函数使用名称 __init__(self, [参数1], [参数2], ...) 通常在类的构造函数中为成员赋值, eg</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">:</span>
    <span class="token string">&quot;测试类&quot;</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arg1<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>arg1 <span class="token operator">=</span> arg1
        <span class="token keyword">return</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类的使用" tabindex="-1"><a class="header-anchor" href="#类的使用" aria-hidden="true">#</a> 类的使用</h3><p>与 C++ 基本类似</p><h3 id="类的特殊属性" tabindex="-1"><a class="header-anchor" href="#类的特殊属性" aria-hidden="true">#</a> 类的特殊属性</h3><ol><li>__dict__ : 类的属性（包含一个字典，由类的数据属性组成）</li><li>__doc__ :类的文档字符串</li><li>__name__: 类名</li><li>__module__: 类定义所在的模块（类的全名是&#39;__main__.className&#39;，如果类位于一个导入模块mymod中，那么className.__module__ 等于 mymod）</li><li>__bases__ : 类的所有父类构成元素（包含了一个由所有父类组成的元组）</li></ol><h3 id="类的构析" tabindex="-1"><a class="header-anchor" href="#类的构析" aria-hidden="true">#</a> 类的构析</h3><p>类采用引用计数, 当类不再被任何位置引用时, 将自动构析类</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> test_class<span class="token punctuation">(</span><span class="token punctuation">)</span>
b <span class="token operator">=</span> a
c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a

<span class="token keyword">del</span> a
b <span class="token operator">=</span> <span class="token number">100</span>
c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>
<span class="token comment"># 此时实例不再被引用, 将被构析</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类在构析时, 将调用构析函数 __del__()</p><h3 id="类的继承" tabindex="-1"><a class="header-anchor" href="#类的继承" aria-hidden="true">#</a> 类的继承</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> 派生类名<span class="token punctuation">(</span>基类名<span class="token number">1</span><span class="token punctuation">,</span> 基类名<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="继承类的构造函数" tabindex="-1"><a class="header-anchor" href="#继承类的构造函数" aria-hidden="true">#</a> 继承类的构造函数</h4><p>派生类将不会再调用父类的构造函数, 如果要调用父类成员, 需要使用语法</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Child</span><span class="token punctuation">(</span>Father<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        Father<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="成员重用" tabindex="-1"><a class="header-anchor" href="#成员重用" aria-hidden="true">#</a> 成员重用</h4><p>与父类同名的方法将自动覆盖 使用 [父类名].[父类成员](self, 参数...) 调用父类的成员</p><h3 id="类的运算符重载" tabindex="-1"><a class="header-anchor" href="#类的运算符重载" aria-hidden="true">#</a> 类的运算符重载</h3><ol><li>字符串转化 __str__(self)</li><li>对象比较 __cmp__(self, x)</li><li>加法重载(其他重载查表) __add__(self, x)</li><li>解释器读取 __repr__(self, x)</li></ol><h3 id="私有成员" tabindex="-1"><a class="header-anchor" href="#私有成员" aria-hidden="true">#</a> 私有成员</h3><p>当成员名称为 __[成员名] 时, 认为是私有成员</p><h3 id="使用注意" tabindex="-1"><a class="header-anchor" href="#使用注意" aria-hidden="true">#</a> 使用注意</h3><h4 id="类的成员" tabindex="-1"><a class="header-anchor" href="#类的成员" aria-hidden="true">#</a> 类的成员</h4><p>在定义类时, 即使声明了成员变量, 但没有赋初值, 也将认为类没有该成员<br> 因此在类中声明了成员变量后, <mark>必须要对其赋初值</mark>, 至少要赋值为 <code>None</code></p><p>可使用函数 <code>hasattr(__obj, __name)</code> 判断类是否有该成员</p><h2 id="迭代器与生成器" tabindex="-1"><a class="header-anchor" href="#迭代器与生成器" aria-hidden="true">#</a> 迭代器与生成器</h2><h3 id="迭代器" tabindex="-1"><a class="header-anchor" href="#迭代器" aria-hidden="true">#</a> 迭代器</h3><h4 id="创建迭代器" tabindex="-1"><a class="header-anchor" href="#创建迭代器" aria-hidden="true">#</a> 创建迭代器</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>it <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过 iter 函数创建迭代器, iter 的参数可以是任何可迭代类型</p><h4 id="遍历迭代器" tabindex="-1"><a class="header-anchor" href="#遍历迭代器" aria-hidden="true">#</a> 遍历迭代器</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>对迭代器使用 next, 实现遍历迭代器</li><li>当迭代器遍历结束, 将产生异常, 可使用 try 捕捉异常</li></ul><h4 id="迭代器类型" tabindex="-1"><a class="header-anchor" href="#迭代器类型" aria-hidden="true">#</a> 迭代器类型</h4><p>当一个类具有成员函数 __iter__ 与 __next__, 则可以作为迭代器使用</p><ol><li>__iter__ 使用 iter 时调用此成员, 返回一个具有 __next__ 的对象, 通常是 self</li><li>__next__ 使用 next 时调用此成员, 返回迭代器指向的值, 并使迭代器向下移动</li></ol><h4 id="stopiteration-异常" tabindex="-1"><a class="header-anchor" href="#stopiteration-异常" aria-hidden="true">#</a> StopIteration 异常</h4><p>当迭代器遍历完所有元素时, 需要在 __next__ 中抛出此异常, 让迭代终止</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> it <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> StopIteration
    <span class="token keyword">else</span>
        it <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> it
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="遍历迭代器-1" tabindex="-1"><a class="header-anchor" href="#遍历迭代器-1" aria-hidden="true">#</a> 遍历迭代器</h4><p>使用 for 循环遍历迭代器</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> x <span class="token keyword">in</span> sequence<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>相当于先调用 iter 获取迭代器, 然后每次循环将 next 的结果赋给 x, 直到产生 StopIteration 异常</p><h3 id="生成器" tabindex="-1"><a class="header-anchor" href="#生成器" aria-hidden="true">#</a> 生成器</h3><ul><li>使用了 yield 的函数被称为生成器</li><li>每次遇到 yield 时函数会暂停并保存当前所有的运行信息, 返回 yield 的值, 并在下一次执行 next() 方法时从当前位置继续运行</li><li>基本结构</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">generator</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 生成器函数</span>
    counter <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment"># 利用 counter 记录当前迭代次数</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>counter <span class="token operator">&gt;=</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 利用 n 记录总计迭代次数</span>
            <span class="token keyword">return</span> <span class="token comment"># 当运行到 return 时, 抛出 StopIteration 异常</span>
        <span class="token punctuation">[</span>迭代计算<span class="token punctuation">]</span>
        <span class="token keyword">yield</span> <span class="token punctuation">[</span>迭代结果<span class="token punctuation">]</span>
        counter <span class="token operator">+=</span> <span class="token number">1</span>

<span class="token keyword">for</span> it <span class="token keyword">in</span> generator<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 此时 f 为一个迭代十次的迭代器</span>
    <span class="token punctuation">[</span>遍历<span class="token punctuation">]</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="异常" tabindex="-1"><a class="header-anchor" href="#异常" aria-hidden="true">#</a> 异常</h2><h3 id="异常类型" tabindex="-1"><a class="header-anchor" href="#异常类型" aria-hidden="true">#</a> 异常类型</h3>`,55),d={href:"https://www.runoob.com/python/python-exceptions.html",target:"_blank",rel:"noopener noreferrer"},r=t(`<h3 id="基本异常处理" tabindex="-1"><a class="header-anchor" href="#基本异常处理" aria-hidden="true">#</a> 基本异常处理</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>  
    <span class="token punctuation">[</span>正常执行模块<span class="token punctuation">]</span>  
<span class="token keyword">except</span> <span class="token punctuation">[</span>异常 A<span class="token punctuation">]</span><span class="token punctuation">:</span>  
    <span class="token punctuation">[</span>发生A错误时执行<span class="token punctuation">]</span>  
<span class="token keyword">except</span> <span class="token punctuation">[</span>异常 B<span class="token punctuation">]</span> <span class="token keyword">as</span> e<span class="token punctuation">(</span>异常对象名<span class="token punctuation">)</span><span class="token punctuation">:</span>  
    <span class="token punctuation">[</span>发生B错误时执行<span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token comment"># 打印异常信息</span>
<span class="token keyword">except</span><span class="token punctuation">:</span>  
    <span class="token punctuation">[</span>发生任何其他错误时执行<span class="token punctuation">]</span> 
<span class="token keyword">else</span><span class="token punctuation">:</span>  
    <span class="token punctuation">[</span>没有错误时执行<span class="token punctuation">]</span>  
<span class="token keyword">finally</span><span class="token punctuation">:</span>  
    <span class="token punctuation">[</span>总是执行<span class="token punctuation">]</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="抛出异常" tabindex="-1"><a class="header-anchor" href="#抛出异常" aria-hidden="true">#</a> 抛出异常</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">raise</span> <span class="token punctuation">[</span>异常类型<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">[</span>异常信息<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>抛出异常后, 后方的代码不会再执行<br> 异常类型通常即异常基类 <code>Exception</code></p><h3 id="简单异常处理" tabindex="-1"><a class="header-anchor" href="#简单异常处理" aria-hidden="true">#</a> 简单异常处理</h3><p>对于存在成员函数 <code>__exit__()</code> 与 <code>__enter__()</code> 的类, 可以简化异常处理过程</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token punctuation">[</span>入口表达式<span class="token punctuation">]</span> <span class="token keyword">as</span> val<span class="token punctuation">(</span>变量<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">[</span>处理语句<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>等价于</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
    tmp <span class="token operator">=</span> <span class="token punctuation">[</span>入口表达式<span class="token punctuation">]</span>
    val <span class="token operator">=</span> tmp<span class="token punctuation">.</span>__enter__<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">[</span>处理语句<span class="token punctuation">]</span>
<span class="token keyword">finally</span><span class="token punctuation">:</span>
    tmp<span class="token punctuation">.</span>__exit__<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时, 无论发生什么异常, 都能保证 tmp.__exit__() 执行, 使 [入口表达式] 产生的类正常释放 通常将此方法用于文件输入输出, 保证文件能正常关闭</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>text <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
    text <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="纯虚类" tabindex="-1"><a class="header-anchor" href="#纯虚类" aria-hidden="true">#</a> 纯虚类</h2>`,13),k={href:"https://docs.python.org/zh-cn/3/library/abc.html",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,"todo",-1),h=n("h2",{id:"type-hint",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#type-hint","aria-hidden":"true"},"#"),a(" Type Hint")],-1),b={href:"https://www.bilibili.com/video/BV11Z4y1h79y",target:"_blank",rel:"noopener noreferrer"},m=t('<p>用于 Python 3.5 以上的版本<br> 除了<a href="#%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E8%A1%A8%E7%A4%BA">基本类型表示</a>中的内容, 其余函数 / 对象 (类型的本质为一种特殊的对象) 均需要通过 <code>import typing</code> 来获取</p><h3 id="类型表示" tabindex="-1"><a class="header-anchor" href="#类型表示" aria-hidden="true">#</a> 类型表示</h3><h4 id="基本类型表示" tabindex="-1"><a class="header-anchor" href="#基本类型表示" aria-hidden="true">#</a> 基本类型表示</h4><ul><li>基本类型 <code>int, float, bool, str, bytes, None</code>, 其中 <code>bytes</code> 为字节串 (即字节方式读取的字符串)</li><li>列表 <code>list[type]</code><br> 通过 <code>type</code> 限制列表元素的类型</li><li>元组 <code>tuple[type_1, type_2, ...]</code><br><code>type_n</code> 限定了元组中各个位置元素的类型<br> 通常用于表示一些报文结构, 如 <code>tuple[int, Optional[str]]</code>, 第一个元素保存错误码, 第二个元素保存错误信息</li><li>字典 <code>dict[type_key, type_val]</code><code>type_key</code> 限定了字典键的类型<br><code>type_val</code> 限定了字典元素的类型</li><li>集合 <code>set[type]</code><br> 通过 <code>type</code> 限制集合元素的类型</li></ul><p>注意, 在 Python3.9 之前的版本需要通过 <code>from typing import ...</code> 的方式调用除基本类型外的类型, 且首字母为大写, 如<br><code>List, Tuple, Dict, Set</code></p><h4 id="复杂类型表示" tabindex="-1"><a class="header-anchor" href="#复杂类型表示" aria-hidden="true">#</a> 复杂类型表示</h4><p>注意, 以下类型均需要通过 <code>from typing import ...</code> 的方式调用</p><ul><li><p>顺序存储类型 <code>Squence[type]</code><br> 表明变量可以是列表, 元组, 字符串等一系列顺序存储的变量类型, 要求存储元素类型为 <code>type</code><br> 例如 <code>Squence[int]</code> 类型的变量可以是列表 <code>[0, 1, 2]</code>, 元组 <code>(0, 1, 2)</code>, 字节字符串 <code>b&quot;abc&quot;</code></p></li><li><p>复合类型 <code>Union[type1, type2, ...]</code><br> 表明变量类型可能是 <code>type1</code>, <code>type2</code> 等几个类型中的一个<br> 对与函数使用时, 推荐使用<a href="#%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF">函数模板</a>代替</p></li><li><p>可选变量 <code>Optional[type]</code><br> 表明变量类型可能使 <code>type</code>, 也可能是 <code>None</code>, 常用于函数的可选参数<br> 该类型最好仅用于接收信息的只读成员或函数的可选参数<br> 此时仍要给出参数的默认值, 如 <code>f(a: Optional[int] = None)</code></p></li><li><p>可调用变量 <code>Callable[[type_1, type_2, ...], type_return]</code><br> 表明变量是一个参数类型为 <code>type_1, type_2, ...</code>, 返回值为 <code>type_return</code> 的函数或可调用的类</p></li><li><p>变量值限定 <code>Literal[val1, val2, ...]</code><br> 要求变量的值只能是 <code>valn</code> 中的一个</p></li><li><p>附加元数据 <code>Annotated[type, args1, args2, ...]</code><br> 该类型实际即第一个参数 <code>type</code>, 之后的参数均为附加的元数据<br> 可配合<a href="#%E7%B1%BB%E5%9E%8B%E8%A7%A3%E6%9E%90">类型解析</a>, 用于进一步的判断, 具体见跳转处的例子</p></li><li><p>任意类型 <code>Any</code></p></li></ul><h4 id="其他类型表示的情况" tabindex="-1"><a class="header-anchor" href="#其他类型表示的情况" aria-hidden="true">#</a> 其他类型表示的情况</h4>',9),y=n("br",null,null,-1),g=n("a",{href:"#%E7%BA%AF%E8%99%9A%E7%B1%BB"},"纯虚类",-1),_=n("br",null,null,-1),f={href:"https://stackoverflow.com/questions/37669222/how-can-i-hint-that-a-type-is-comparable-with-typing",target:"_blank",rel:"noopener noreferrer"},x=n("li",null,[a("部分情况下, 类型错误难以被发现, 又对类型的正确性有较高的要求, 可能需要手动解析类型并编写类型断言, 可参考"),n("a",{href:"#%E7%B1%BB%E5%9E%8B%E8%A7%A3%E6%9E%90"},"类型解析")],-1),w=t(`<h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h3><h4 id="变量标注" tabindex="-1"><a class="header-anchor" href="#变量标注" aria-hidden="true">#</a> 变量标注</h4><p>通过 <code>val:type</code> 的方式标注变量类型<br> 在使用变量标注后, 除非使用 <code>Option</code> 类型, 否则最好对变量赋初值</p><h4 id="函数标注" tabindex="-1"><a class="header-anchor" href="#函数标注" aria-hidden="true">#</a> 函数标注</h4><p><code>def fun(a: type_1, b: type_2, ...) -&gt; type_return</code></p><p>其中</p><ul><li><code>type_n</code> 为函数参数的类型</li><li><code>type_return</code> 为函数返回值类型</li></ul><p>使用注意</p><ol><li>默认情况下, 认为函数返回 <code>Any</code></li><li>当函数不返回值时, 应标注返回类型为 <code>None</code></li><li>当函数中可能终止程序 (如抛出错误) 时, 应采用 <code>NoReturn</code></li></ol><p>应用举例</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> NoReturn

<span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token keyword">def</span> <span class="token function">ExitPrgm</span><span class="token punctuation">(</span>code<span class="token punctuation">:</span> Literal<span class="token punctuation">[</span><span class="token string">&quot;ok&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> NoReturn<span class="token punctuation">:</span>
    <span class="token keyword">if</span> code <span class="token operator">==</span> <span class="token string">&quot;ok&quot;</span><span class="token punctuation">:</span>
        exit<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&quot;Exit Error&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="类标注" tabindex="-1"><a class="header-anchor" href="#类标注" aria-hidden="true">#</a> 类标注</h4><p>在类定义完成后, 将自动识别并成为一个类型<br> 但是在类定义中, 需要表示类的类型时, 应使用 <code>&quot;classname&quot;</code> 的方式, 其中 <code>classname</code> 为类名</p><p>对于成员函数中的 <code>self</code> 则不需要标注类型<br> 对于构造函数 <code>__init__</code> 则不需要标注返回类型</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">container</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">def</span> <span class="token function">copy</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">:</span> <span class="token string">&quot;container&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="重载函数修饰" tabindex="-1"><a class="header-anchor" href="#重载函数修饰" aria-hidden="true">#</a> 重载函数修饰</h4><p>python 并不存在重载函数, 但可以通过 typing 模块导入重载修饰器 <code>@overload</code> 用于辅助类型判断<br> 基本使用为</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 导入修饰器</span>
<span class="token keyword">from</span> typing <span class="token keyword">import</span> overload

<span class="token comment"># 定义函数可能的输入参数以及对应的返回值类型情况</span>
<span class="token decorator annotation punctuation">@overload</span>
<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment"># 使用省略号, 不需要给出实现</span>
<span class="token decorator annotation punctuation">@overload</span>
<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment"># 使用省略号, 不需要给出实现</span>

<span class="token comment"># 在下方立刻定义函数, 此时不再需要确定函数的类型, 但应当严格符合上方的规则</span>
<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型断言" tabindex="-1"><a class="header-anchor" href="#类型断言" aria-hidden="true">#</a> 类型断言</h3><h4 id="类型断言-1" tabindex="-1"><a class="header-anchor" href="#类型断言-1" aria-hidden="true">#</a> 类型断言</h4><p>当类型前有对类型的判断语句后, 将自动对类型进行断言</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> Literal<span class="token punctuation">,</span> Optional

<span class="token comment"># Option 类型</span>
<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token comment"># 经过判断后认为 b 即 int 类型</span>
        <span class="token keyword">return</span> a <span class="token operator">+</span> b
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> a

<span class="token comment"># Literal 类型</span>

x<span class="token punctuation">:</span> Literal<span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span>
y<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">&quot;b&quot;</span>

<span class="token keyword">if</span> y <span class="token operator">==</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">:</span>
    <span class="token comment"># 经过判断后, 认为 y 已经满足 Literal[&quot;a&quot;, &quot;b&quot;] 的要求</span>
    x <span class="token operator">=</span> y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类型的判断通常通过函数 <code>type(val)</code> 完成<br> 注意其返回值为无类型限制的<a href="#%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E8%A1%A8%E7%A4%BA">基本类型</a>或自定义的类, 如 <code>list, int</code></p><ul><li>对于模板类, <code>type(val)</code> 仅能判断模板类, 判读示例化后的类还需要借助<a href="#%E7%B1%BB%E5%9E%8B%E8%A7%A3%E6%9E%90">类型解析</a>, 获取其泛型参数的具体值</li><li>对于<a href="#%E7%BA%AF%E8%99%9A%E7%B1%BB">纯虚类</a>的判断, 只能通过检查对象是否有纯虚类所要求的成员 (检查是否是未实现 <code>NotImplemented</code>)</li><li>对于 <code>typing.Callable</code>, <code>typing.Sequene</code> 等大部分此类对象均会继承的纯虚类以及继承自纯虚类的对象, 可使用 <code>isinstance(obj, class)</code> 判断 (注意 <code>typing.Sequene</code> 表示的仅是一个符号, 还需要<a href="#%E7%B1%BB%E5%9E%8B%E8%A7%A3%E6%9E%90">类型解析</a>获取其背后的信息)</li></ul><h4 id="类型解析" tabindex="-1"><a class="header-anchor" href="#类型解析" aria-hidden="true">#</a> 类型解析</h4><ul><li>函数 <code>typing.get_origin(type)</code> 可获取类型 <code>type</code> 的根类型 <ul><li>例如 <code>isinstance([1, 2, 3], typing.get_origin(typing.Sequence))</code> 可判断类型是否为 <code>typing.Sequence</code></li></ul></li><li>函数 <code>typing.get_args(type)</code> 可获取一个元组, 该元组中的元素即类型 <code>type</code> 的泛型参数 <ul><li>该函数也可以使用 <code>type.__args__[n]</code> 代替</li><li>例如 <code>typing.get_args(typing.Sequence[int])[0] == int</code> 可获取 <code>typing.Sequence</code> 的参数 <code>int</code></li></ul></li></ul><p>以下为一个基于类型解析进行断言的例子<br> 由例子也可知, 仅通过 Type Hint 并不适合运行时的类型检查与复杂类型表示, 仅推荐在少部分对通用性要求高的情况下使用<br> 实际可通过直接检查数据长度的方法完成, 而不需要专门解析</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> typing

<span class="token comment"># 此处为创建一个具有一个具有两个元数据的新类型 (不是类型别名)</span>
<span class="token comment"># Annotated 配合 TyperVar 使用时均需要使用此方法</span>
T1 <span class="token operator">=</span> typing<span class="token punctuation">.</span>TypeVar<span class="token punctuation">(</span><span class="token string">&quot;T1&quot;</span><span class="token punctuation">)</span>
TLen <span class="token operator">=</span> typing<span class="token punctuation">.</span>TypeVar<span class="token punctuation">(</span><span class="token string">&quot;TLen&quot;</span><span class="token punctuation">)</span> <span class="token comment"># 使用该元数据记录数组应用的长度</span>
<span class="token builtin">type</span> FixArrayLikeBase<span class="token punctuation">[</span>T1<span class="token punctuation">,</span> TLen<span class="token punctuation">]</span> <span class="token operator">=</span> typing<span class="token punctuation">.</span>Annotated<span class="token punctuation">[</span>T1<span class="token punctuation">,</span> TLen<span class="token punctuation">]</span>

<span class="token comment"># 通过别名的方式创建定长数组类型</span>
FixArrayLike <span class="token operator">=</span> FixArrayLikeBase<span class="token punctuation">[</span>typing<span class="token punctuation">.</span>Sequence<span class="token punctuation">,</span> TLen<span class="token punctuation">]</span>

<span class="token comment"># 为常用的定长数组创建别名, 表示数据时应用 typing.Literal[3]</span>
Array3 <span class="token operator">=</span> FixArrayLike<span class="token punctuation">[</span>typing<span class="token punctuation">.</span>Literal<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

<span class="token keyword">def</span> <span class="token function">FixArrayAssert</span><span class="token punctuation">(</span>obj <span class="token punctuation">:</span> FixArrayLike<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&#39;&#39;&#39;
    断言函数  

    仅能用于判断变量 obj 是否符合类型 type 的要求
    &#39;&#39;&#39;</span>
    <span class="token comment"># 检查传入的是 FixArrayLikeBase, 即所有别名的基础</span>
    <span class="token keyword">assert</span> typing<span class="token punctuation">.</span>get_origin<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">)</span> <span class="token operator">==</span> FixArrayLikeBase<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f&quot;Unknown assert type&quot;</span></span>
    <span class="token comment"># 类型仅是符号, 需要 typing.get_origin 获得类型对应的纯虚类, 再使用 isinstance 判断</span>
    <span class="token keyword">assert</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> typing<span class="token punctuation">.</span>get_origin<span class="token punctuation">(</span>typing<span class="token punctuation">.</span>get_args<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f&quot;Type error, require is </span><span class="token interpolation"><span class="token punctuation">{</span>typing<span class="token punctuation">.</span>get_args<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">, given is </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">type</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
    <span class="token comment"># 将列表的长度与元数据要求的长度比较</span>
    <span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">==</span> typing<span class="token punctuation">.</span>get_args<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__args__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f&quot;Length error, require is </span><span class="token interpolation"><span class="token punctuation">{</span>typing<span class="token punctuation">.</span>get_args<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__args__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">, given is </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">len</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="显式类型转换" tabindex="-1"><a class="header-anchor" href="#显式类型转换" aria-hidden="true">#</a> 显式类型转换</h4><p>即内置的类型转换函数, 如 <code>str, int</code> 等<br> 以及独立类型别名的转换函数 <code>TypeName(val)</code> 常用于 <code>NewType</code> 的转换</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">100</span>
s<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="忽略类型判断" tabindex="-1"><a class="header-anchor" href="#忽略类型判断" aria-hidden="true">#</a> 忽略类型判断</h4><p>在出现类型错误的位置使用注释 <code># type: ignore</code><br> 可以让系统不进行类型检查</p><h4 id="强制类型转换-不建议使用" tabindex="-1"><a class="header-anchor" href="#强制类型转换-不建议使用" aria-hidden="true">#</a> 强制类型转换 (不建议使用)</h4><p><code>typing.cast(type, val)</code></p><p>直接将变量 <code>val</code> 的类型标记转换为 <code>type</code></p><h3 id="类型别名" tabindex="-1"><a class="header-anchor" href="#类型别名" aria-hidden="true">#</a> 类型别名</h3><h4 id="基本类型别名" tabindex="-1"><a class="header-anchor" href="#基本类型别名" aria-hidden="true">#</a> 基本类型别名</h4><p><code>TypeName = type</code><br> 在解释时, 将使用 <code>type</code> 代替 <code>TypeName</code><br> 因此认为 <code>type</code> 与 <code>TypeName</code> 是同一个类型</p><h4 id="独立类型别名" tabindex="-1"><a class="header-anchor" href="#独立类型别名" aria-hidden="true">#</a> 独立类型别名</h4><p><code>TypeName = NewType(&quot;TypeName&quot;, type)</code><br> 认为 <code>TypeName</code> 与 <code>type</code> 不同, 无法相互赋值, 需要进行显式类型转换</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> NewType

UserID_A <span class="token operator">=</span> NewType<span class="token punctuation">(</span><span class="token string">&quot;UserID_A&quot;</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
a<span class="token punctuation">:</span> UserID_A <span class="token operator">=</span> UserID_A<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模板类型-泛型" tabindex="-1"><a class="header-anchor" href="#模板类型-泛型" aria-hidden="true">#</a> 模板类型 (泛型)</h3><p>类似 C++ 的模板, 在定义模板前, 需要定义泛型变量的名称<br> python 使用如下方式定义<br><code>T = typing.TypeVar(&quot;T&quot;[, type_1, type_2, ...])</code> 或 <code>T = typing.TypeVar(&quot;T&quot;, bound = ...)</code></p><ul><li><code>type_n</code> 为模板允许的类型, 至少要给出两个, 不定义则表示模板可为任意类型</li><li><code>bound</code> 为要求类型 <code>T</code> 至少继承自参数 <code>bound</code> 给出的类型, 或具有相同的接口 (可使用<a href="#%E7%BA%AF%E8%99%9A%E7%B1%BB">纯虚类</a>)</li></ul><p>注意</p><ul><li>不同于 C++, 一个泛型变量可用于一个模板函数 / 模板类</li><li>操作泛型时要保证各个可能类型对操作适用</li><li>可以通过断言对不同类型进行专门操作</li><li>泛型的第一个参数需要与泛型名一致</li></ul><h4 id="基于模板的类型" tabindex="-1"><a class="header-anchor" href="#基于模板的类型" aria-hidden="true">#</a> 基于模板的类型</h4><p>可直接将泛型变量用于类型的定义, 例如</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>T <span class="token operator">=</span> typing<span class="token punctuation">.</span>TypeVar<span class="token punctuation">(</span><span class="token string">&quot;T&quot;</span><span class="token punctuation">)</span>

StrIndexDict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> T<span class="token punctuation">]</span>
StrDict <span class="token operator">=</span> StrIndexDict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当具有泛型的类型未指定泛型变量直接用于函数等, 将泛型视为 <code>Unknown</code> 处理</p><h4 id="函数模板" tabindex="-1"><a class="header-anchor" href="#函数模板" aria-hidden="true">#</a> 函数模板</h4><p>函数模板可以自动识别示例化类型</p><p>使用示例</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> TypeVar<span class="token punctuation">,</span> Sequence

T <span class="token operator">=</span> TypeVar<span class="token punctuation">(</span><span class="token string">&quot;T&quot;</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> T<span class="token punctuation">,</span> b<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Sequence<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>a <span class="token operator">+</span> b<span class="token punctuation">,</span> a <span class="token operator">-</span> b<span class="token punctuation">]</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="类模板" tabindex="-1"><a class="header-anchor" href="#类模板" aria-hidden="true">#</a> 类模板</h4><p>类通过继承基类 <code>Generic[&quot;T&quot;]</code> 的方式变为模板类 (<code>T</code> 为泛型变量的名称)<br> 在使用时需要通过 <code>classname[type]</code> 确定模板的示例化类型</p><p>使用示例</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> TypeVar<span class="token punctuation">,</span> Generic

T <span class="token operator">=</span> TypeVar<span class="token punctuation">(</span><span class="token string">&quot;T&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>Generic<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    item<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>T<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>T<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>item <span class="token operator">=</span> item
    
    <span class="token keyword">def</span> <span class="token function">set</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>item <span class="token operator">=</span> item

    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>item

    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>item<span class="token punctuation">)</span>

a<span class="token punctuation">:</span> Container<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> Container<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="有关设置" tabindex="-1"><a class="header-anchor" href="#有关设置" aria-hidden="true">#</a> 有关设置</h3><p>使用 Type Hint 时, 建议启用 IDE 的类型检查</p><ul><li>对于 vscode 启用 Pylance 设置 <code>&quot;python.analysis.typeCheckingMode&quot;: &quot;basic&quot;</code></li><li>对于无 IDE 环境, 可安装 mypy, 通过 mypy 进行类型检查</li></ul>`,62);function q(E,T){const s=o("ExternalLinkIcon");return i(),c("div",null,[u,n("p",null,[n("a",d,[a("Python 标准异常"),e(s)]),a(" Python 异常基类 Exception")]),r,n("p",null,[a("参考文档 "),n("a",k,[a("https://docs.python.org/zh-cn/3/library/abc.html"),e(s)])]),v,h,n("p",null,[a("参考自 "),n("a",b,[a("https://www.bilibili.com/video/BV11Z4y1h79y"),e(s)])]),m,n("ul",null,[n("li",null,[a("当希望限制的并不是具体的类型, 而是具有某一类特殊功能的类型"),y,a(" 此时就需要借助"),g,a(", 限制类型必须具有的成员函数 (之其中自然包括了支持的运算等)"),_,a(" 例如定义一个能够用于比较的类型, 可参考 "),n("a",f,[a("https://stackoverflow.com/questions/37669222/how-can-i-hint-that-a-type-is-comparable-with-typing"),e(s)])]),x]),w])}const N=p(l,[["render",q],["__file","objective.html.vue"]]);export{N as default};
