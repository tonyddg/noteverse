import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as d,c as o,b as e,d as i,a as t,e as a}from"./app-8c5ce49e.js";const n={},_=a('<h1 id="rtos-hal-笔记" tabindex="-1"><a class="header-anchor" href="#rtos-hal-笔记" aria-hidden="true">#</a> RTOS HAL 笔记</h1><p>推荐学习方法: 通过头文件查看所需的函数, 通过手册查看函数内容</p><h2 id="uart-使用" tabindex="-1"><a class="header-anchor" href="#uart-使用" aria-hidden="true">#</a> UART 使用</h2><h3 id="项目配置" tabindex="-1"><a class="header-anchor" href="#项目配置" aria-hidden="true">#</a> 项目配置</h3><ul><li>启用 UART 外设</li><li>如果需要 DMA 功能, 除了启用 DMA 外设, 还需要启用 UART 中断</li><li>建议使用回调函数注册功能, 最大程度分离自动生成的代码与用户代码, 此功能须通过 Project Manager -&gt; Advance Setting -&gt; Register Callback 启用</li></ul><h3 id="有关函数" tabindex="-1"><a class="header-anchor" href="#有关函数" aria-hidden="true">#</a> 有关函数</h3><p>关于函数的具体内容建议参见官方手册</p><ul><li><code>HAL_UART_RegisterCallback</code> 注册一般事件的回调函数, 如传输完成 (不包括传输事件)</li><li><code>HAL_UART_RegisterRxEventCallback</code> 注册传输完成事件的回调函数, 回调函数中还将包括接收到的数据</li><li><code>HAL_UART_Transmit_DMA</code> 基于 DMA 的数据发送<br> 推荐配合信号量与回调函数以检查传输是否完成</li><li><code>HAL_UART_Transmit</code> 阻塞数据发送<br> 由于该传输函数已经时阻塞的, 因此不需要检查是否完成</li><li><code>HAL_UARTEx_ReceiveToIdle_DMA</code> 基于 DMA 的数据接收, 直到 RX 空闲或缓冲区满<br> 推荐配合信号量与回调函数以检查传输是否完成, 且需要通过回调函数获取接收到的数据量</li><li><code>HAL_UARTEx_ReceiveToIdle_DMA</code> 阻塞数据接收, 直到 RX 空闲或缓冲区满<br> 由于该传输函数已经时阻塞的, 因此不需要检查是否完成, 且数据量将以指针的形式接收</li></ul><h2 id="usb-虚拟串口使用" tabindex="-1"><a class="header-anchor" href="#usb-虚拟串口使用" aria-hidden="true">#</a> USB 虚拟串口使用</h2><h3 id="项目配置-1" tabindex="-1"><a class="header-anchor" href="#项目配置-1" aria-hidden="true">#</a> 项目配置</h3>',10),s=e("li",null,"首先在 Connectivity 中启用 USB",-1),h=e("li",null,"然后在 Middleware 中 USB_DEVICE, 并选择虚拟串口 Virtual Port Com",-1),u=e("li",null,"推荐使用时, 按情况减小缓冲区大小, 即设置 Class Paramenters -> USB CDC Rx/Tx Buffer Size",-1),A=e("li",null,[i("注意, USB 的初始化函数 "),e("code",null,"MX_USB_DEVICE_Init()"),i(" 并没被自动添加, 需要手动添加到 main 中 (一般放在其他外设初始化前)")],-1),R={href:"https://www.stmcu.com.cn/Designresource/detail/software/709654",target:"_blank",rel:"noopener noreferrer"},b=a('<h3 id="数据传输" tabindex="-1"><a class="header-anchor" href="#数据传输" aria-hidden="true">#</a> 数据传输</h3><ul><li>使用时, 需要引用头文件 <code>usbd_cdc_if.h</code></li><li>通过函数 <code>CDC_Transmit_FS</code> 阻塞发送数据, 发送成功时返回 <code>USBD_OK</code></li><li>数据接收则需要通过修改 <code>usbd_cdc_if.c</code> 中的函数 <code>CDC_Receive_FS</code> 实现, 其中 <ul><li>该函数的本质为一个在数据接收开始中断 (PCD) 中被调用的函数, 并通过该函数将数据写入缓冲区, 且该函数是可修改的</li><li>该函数的参数 <code>uint32_t *Len</code> 为一个指向有效数据长度的指针</li><li>接收到的数据将保存在缓冲区 <code>uint8_t UserRxBufferFS[APP_RX_DATA_SIZE]</code> 中, 可通过 extern 访问缓冲区</li><li>建议在函数 <code>CDC_Receive_FS</code> 末尾添加自定义的回调函数, 并在该回调函数中释放信号量与保存有效数据长度</li></ul></li></ul><h2 id="i2c-使用" tabindex="-1"><a class="header-anchor" href="#i2c-使用" aria-hidden="true">#</a> I2C 使用</h2><h3 id="项目配置-2" tabindex="-1"><a class="header-anchor" href="#项目配置-2" aria-hidden="true">#</a> 项目配置</h3><ul><li>启用 I2C 外设</li><li>如果需要 DMA 功能, 除了启用 DMA 外设, 还需要启用 I2C 的两个中断 (event 与 error)</li><li>建议使用回调函数注册功能, 最大程度分离自动生成的代码与用户代码, 此功能须通过 Project Manager -&gt; Advance Setting -&gt; Register Callback 启用</li></ul><h3 id="有关函数-1" tabindex="-1"><a class="header-anchor" href="#有关函数-1" aria-hidden="true">#</a> 有关函数</h3><p>关于函数的具体内容建议参见官方手册</p><ul><li><code>HAL_UART_RegisterCallback</code> 注册一般事件的回调函数, 如传输完成 (<code>HAL_I2C_MEM_TX_COMPLETE_CB_ID</code>)</li><li><code>HAL_I2C_Mem_Write</code> 基于 DMA 的数据发送<br> 推荐配合信号量与回调函数以检查传输是否完成</li><li><code>HAL_UART_Transmit</code> 阻塞数据发送<br> 由于该传输函数已经时阻塞的, 因此不需要检查是否完成</li><li><code>HAL_UARTEx_ReceiveToIdle_DMA</code> 基于 DMA 的数据接收, 直到 RX 空闲或缓冲区满<br> 推荐配合信号量与回调函数以检查传输是否完成, 且需要通过回调函数获取接收到的数据量</li><li><code>HAL_UARTEx_ReceiveToIdle_DMA</code> 阻塞数据接收, 直到 RX 空闲或缓冲区满<br> 由于该传输函数已经时阻塞的, 因此不需要检查是否完成, 且数据量将以指针的形式接收</li></ul>',8);function f(C,T){const l=c("ExternalLinkIcon");return d(),o("div",null,[_,e("ul",null,[s,h,u,A,e("li",null,[i("使用前还需要下载有关驱动, 下载地址 "),e("a",R,[i("https://www.stmcu.com.cn/Designresource/detail/software/709654"),t(l)])])]),b])}const m=r(n,[["render",f],["__file","rtos_hal.html.vue"]]);export{m as default};
