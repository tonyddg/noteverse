import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o,c as l,b as n,d as s,a as e,e as t}from"./app-8c5ce49e.js";const c={},r=t(`<h1 id="tsc-使用" tabindex="-1"><a class="header-anchor" href="#tsc-使用" aria-hidden="true">#</a> TSC 使用</h1><h2 id="安装-tsc" tabindex="-1"><a class="header-anchor" href="#安装-tsc" aria-hidden="true">#</a> 安装 TSC</h2><p>通过 npm 安装 tsc, 以下命令全局安装了 tsc</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-g</span> typescript
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="启动-tsc-环境" tabindex="-1"><a class="header-anchor" href="#启动-tsc-环境" aria-hidden="true">#</a> 启动 tsc 环境</h2><p>在程序文件目录执行命令, 初始化 ts 环境</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>tsc <span class="token parameter variable">--init</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="编译-ts" tabindex="-1"><a class="header-anchor" href="#编译-ts" aria-hidden="true">#</a> 编译 ts</h2><ol><li>执行命令 tsc, 将自动编译 .ts 文件为 .js</li><li>通过 tsc -w, 每当检测到文件保存, 将自动编译</li></ol><h2 id="tsconfig-json-配置" tabindex="-1"><a class="header-anchor" href="#tsconfig-json-配置" aria-hidden="true">#</a> tsconfig.json 配置</h2><p>通过修改目录下的 tsconfig.json 文件, 可以修改环境的 tsc 配置</p><h3 id="多文件编译" tabindex="-1"><a class="header-anchor" href="#多文件编译" aria-hidden="true">#</a> 多文件编译</h3><ol><li>设置 include 选项选择包含的目录 (字符串数组, 可包含多个目录)</li><li>设置 file 选择包含单个文件</li><li>设置路径时, 使用 ** 通配目录名, 使用 * 通配文件名, 如 &quot;./src/**/*&quot;</li><li>设置 compilerOptions.outDir 选择结果输出目录</li></ol><h2 id="node-配置" tabindex="-1"><a class="header-anchor" href="#node-配置" aria-hidden="true">#</a> node 配置</h2><h1 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法" aria-hidden="true">#</a> 基本语法</h1><ol><li>定义任何东西时要指明类型</li><li>调用任何东西时要检查类型</li></ol><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h2><ol><li><mark>TS 没有乘方运算符</mark></li><li>^ 为异或运算符</li><li>ToDo</li></ol><h2 id="深拷贝与浅拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝与浅拷贝" aria-hidden="true">#</a> 深拷贝与浅拷贝</h2><p>todo</p><h2 id="变量类型" tabindex="-1"><a class="header-anchor" href="#变量类型" aria-hidden="true">#</a> 变量类型</h2><h3 id="ts-类型" tabindex="-1"><a class="header-anchor" href="#ts-类型" aria-hidden="true">#</a> ts 类型</h3><table><thead><tr><th>类型</th><th>关键字</th><th>描述</th></tr></thead><tbody><tr><td>任意</td><td>any</td><td>具有任意类型</td></tr><tr><td>数字</td><td>number</td><td>表示 64 位浮点数, 不存在整数</td></tr><tr><td>字符串</td><td>string</td><td>使用 &quot; 或 &#39; 表示字符串, \` 表示多行字符串或表达式</td></tr><tr><td>布尔</td><td>boolean</td><td>使用 true 或 false</td></tr><tr><td>空</td><td>null</td><td>表示值缺失</td></tr><tr><td>未定义</td><td>undefined</td><td>表示未定义</td></tr><tr><td>数组</td><td>类型[]</td><td>在类型后添加 [], eg. number[]</td></tr><tr><td>数组对象</td><td>Array&lt;类型&gt;</td><td>在 &lt;&gt; 中添加类型</td></tr><tr><td>元组</td><td>[类型]</td><td>元组中各位置的类型必须对应, 如 [string, number] = [&#39;a&#39;, 1]</td></tr><tr><td>枚举</td><td>enum</td><td>使用定义的枚举名, 如 enum Color {Red, Blue}; let c : Color = Color.Blue</td></tr><tr><td>函数</td><td>(参数)=&gt;返回值</td><td>函数类型中, 参数要同时指明类型与参数名称</td></tr><tr><td>自定类型</td><td>type [类型名] = 类型</td><td>允许自定义类型, 并为类型起名, 通常用于规范函数类型</td></tr></tbody></table><h4 id="字符串枚举" tabindex="-1"><a class="header-anchor" href="#字符串枚举" aria-hidden="true">#</a> 字符串枚举</h4><p>todo</p><h3 id="联合类型" tabindex="-1"><a class="header-anchor" href="#联合类型" aria-hidden="true">#</a> 联合类型</h3><p>函数有多个返回类型时, 也可以使用联合类型, 定义一个变量可能同时用多种类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> <span class="token punctuation">[</span>变量名<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span>类型名<span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span>类型名<span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="类型确定" tabindex="-1"><a class="header-anchor" href="#类型确定" aria-hidden="true">#</a> 类型确定</h3><h4 id="基本语法-1" tabindex="-1"><a class="header-anchor" href="#基本语法-1" aria-hidden="true">#</a> 基本语法</h4><p>定义变量时, 通过定义变量类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> <span class="token punctuation">[</span>变量名<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span>类型名<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">[</span>参数<span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span>类型<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">[</span>返回值类型<span class="token punctuation">]</span>
<span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="推断类型" tabindex="-1"><a class="header-anchor" href="#推断类型" aria-hidden="true">#</a> 推断类型</h4><p>当类型简单时, 可以不标注类型, 此时将自动推断类型</p><h3 id="断言" tabindex="-1"><a class="header-anchor" href="#断言" aria-hidden="true">#</a> 断言</h3><h4 id="直接断言" tabindex="-1"><a class="header-anchor" href="#直接断言" aria-hidden="true">#</a> 直接断言</h4><p>当确定函数一定仅返回一种类型时, 可在函数后使用断言, 如获取一个已经存在的 HTML 元素, 此时不可能返回 null</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">[</span>表达式<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token punctuation">[</span>类型名<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="非空断言" tabindex="-1"><a class="header-anchor" href="#非空断言" aria-hidden="true">#</a> 非空断言</h4><ol><li>当一个变量可能为空或一个对象时, 由于其可能为空, 因此不能直接访问其成员</li><li>可以使用非空断言 !, 告诉编译器变量不为空, 从而实现对成员的访问</li><li>如果变量确实为空, 将导致错误</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> divElement <span class="token operator">:</span> HTMLElement <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> 
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 将导致错误, 因为变量可能为 null</span>
divElement<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token operator">...</span>

<span class="token comment">// 使用非空断言, 向编译器明确变量不可能为 null</span>
divElement<span class="token operator">!</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="可选链运算符" tabindex="-1"><a class="header-anchor" href="#可选链运算符" aria-hidden="true">#</a> 可选链运算符</h4><ol><li>可选链运算符将判断一个复合类型变量是否具有某个成员, 如果没有, 将不会进行访问</li><li>使用可选链运算符访问不能修改成员变量, 对于获取的 HTML 元素, 应避免使用 innerHTML 直接修改内容, 而应使用 appendChild 等修改函数</li><li>由于非空断言依然可能导致错误, 应使用可选链运算符来提高安全性</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 使用非空断言, 向编译器明确变量不可能为 null</span>
divElement<span class="token operator">?.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="空值合并运算符" tabindex="-1"><a class="header-anchor" href="#空值合并运算符" aria-hidden="true">#</a> 空值合并运算符</h4><ol><li>对于可能返回空的函数, 还可以采用空值合并运算符</li><li>将首先运行运算符左侧的表达式, 如果返回 null, 则将运行右侧的表达式</li><li>因此可在右侧的表达式对出现空值的情况进行处理</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> divElement <span class="token operator">:</span> HTMLElement <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> 
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span> <span class="token operator">??</span>
    document<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">createElement</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token string">&quot;div&quot;</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h3><h4 id="通用字符串转换" tabindex="-1"><a class="header-anchor" href="#通用字符串转换" aria-hidden="true">#</a> 通用字符串转换</h4><p>对于大部分类型, 均有成员函数 toString(), 调用后可转换</p><h4 id="数字转为字符串" tabindex="-1"><a class="header-anchor" href="#数字转为字符串" aria-hidden="true">#</a> 数字转为字符串</h4><ol><li>使用 number 的 toFixed 方法, 参数表示小数点后的位数</li><li>使用 number 的 toString 方法, 参数表示采用进制</li></ol><h4 id="字符串转为数字" tabindex="-1"><a class="header-anchor" href="#字符串转为数字" aria-hidden="true">#</a> 字符串转为数字</h4><ol><li>使用 parseFloat 函数, 将小数字符串转为数字</li><li>使用 parseInt 函数, 将整形数字字符串转为数字</li></ol><h3 id="泛型函数" tabindex="-1"><a class="header-anchor" href="#泛型函数" aria-hidden="true">#</a> 泛型函数</h3><h4 id="keyof" tabindex="-1"><a class="header-anchor" href="#keyof" aria-hidden="true">#</a> keyof</h4>`,56),d={href:"https://www.jianshu.com/p/c44b49bf6f58",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.jb51.cc/faq/2883739.html",target:"_blank",rel:"noopener noreferrer"},k=t(`<h1 id="面向对象" tabindex="-1"><a class="header-anchor" href="#面向对象" aria-hidden="true">#</a> 面向对象</h1><h2 id="类" tabindex="-1"><a class="header-anchor" href="#类" aria-hidden="true">#</a> 类</h2><h3 id="定义对象" tabindex="-1"><a class="header-anchor" href="#定义对象" aria-hidden="true">#</a> 定义对象</h3><p>通过 class 关键字定义对象, 并且定义成员函数 constructor 作为构造函数</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Car</span>
<span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="定义成员" tabindex="-1"><a class="header-anchor" href="#定义成员" aria-hidden="true">#</a> 定义成员</h3><ol><li>可在 class 内直接定义成员变量与成员函数, 并且通过 this 访问成员</li><li>定义时也需要指明类型</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Cat</span>
<span class="token punctuation">{</span>
    name <span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>name <span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">void</span> 
    <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h3><ol><li>在定义类前使用 extends, 可以规定类继承的父类</li><li>一次只能继承一个类, 但允许多重继承, 优先采用接口</li><li>可以在子类中重新定义父类的方法</li><li>通过 super 访问父类的函数与属性</li><li>允许使用基类类型的变量保存子类类型的值, 将优先访问子类的函数</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Shape</span> 
<span class="token punctuation">{</span> 
   Area<span class="token operator">:</span><span class="token builtin">number</span> 
   
    <span class="token function">constructor</span><span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span> 
        <span class="token keyword">this</span><span class="token punctuation">.</span>Area <span class="token operator">=</span> a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">void</span>
    <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;In Shape fun&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 

<span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> 
<span class="token punctuation">{</span> 
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 子类必须通过 super 调用父类的构造函数</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>a <span class="token operator">*</span> a <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">disp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span> 
    <span class="token punctuation">{</span> 
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Area:  &quot;</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>Area<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">void</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;In Circle fun&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> a <span class="token operator">:</span> Shape <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 调用 Circle.fun();</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="静态成员" tabindex="-1"><a class="header-anchor" href="#静态成员" aria-hidden="true">#</a> 静态成员</h3><ol><li>使用 static 关键字定义</li><li>静态可以是成员变量或静态成员函数</li><li>通过 类名.静态成员 访问</li></ol><h3 id="成员限定符" tabindex="-1"><a class="header-anchor" href="#成员限定符" aria-hidden="true">#</a> 成员限定符</h3><ol><li>public 默认, 即共有成员</li><li>private 定义为私有成员</li><li>protected 定义为保护成员</li><li>readonly 定义为只读成员, 成员在第一次赋值之后不可被修改</li><li>static 定义为静态成员</li></ol><h2 id="接口" tabindex="-1"><a class="header-anchor" href="#接口" aria-hidden="true">#</a> 接口</h2><h3 id="定义接口" tabindex="-1"><a class="header-anchor" href="#定义接口" aria-hidden="true">#</a> 定义接口</h3><ol><li>通过 interface 关键字定义接口</li><li>在接口属性名最后加上 ? 表示属性可有可无</li><li>通过定义函数类型的接口成员, 以规定接口函数</li><li>接口也允许定义 readonly 成员</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Fruit</span> 
<span class="token punctuation">{</span>
    name <span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    test<span class="token operator">?</span> <span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
    <span class="token function-variable function">call</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用类实例化接口" tabindex="-1"><a class="header-anchor" href="#使用类实例化接口" aria-hidden="true">#</a> 使用类实例化接口</h3><ol><li>在定义类前使用 implements, 可以规定类采用的接口</li><li>可以采用多个接口, 使用逗号分隔</li><li>接口属性与方法必须全部定义 (含 ? 的除外)</li><li>可将接口作为变量类型, 可以保存实例化相同接口的对象, 并且调用接口对应的属性</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Orange</span> <span class="token keyword">implements</span> <span class="token class-name">Fruit</span>
<span class="token punctuation">{</span>
    name <span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

    <span class="token function">constructor</span><span class="token punctuation">(</span>name <span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token punctuation">}</span>

    <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">void</span>
    <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;My name is &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;\\n I&#39;m Orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Apple</span> <span class="token keyword">implements</span> <span class="token class-name">Fruit</span>
<span class="token punctuation">{</span>
    <span class="token operator">...</span>
    <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">void</span>
    <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;My name is &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;\\n I&#39;m Apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> a <span class="token operator">:</span> Fruit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Orange</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">:</span> Fruit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">b</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型" aria-hidden="true">#</a> 泛型</h2><ol><li>对于函数 / 类等, 可能对于不同的类型需要重用, 因此可以定义泛型 (特别是 Promise 中)</li><li>使用带泛型的函数 / 类中, 需要使用 &lt;&gt; 指明实例化的类型</li></ol><h3 id="泛型使用" tabindex="-1"><a class="header-anchor" href="#泛型使用" aria-hidden="true">#</a> 泛型使用</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 接口泛型</span>
<span class="token keyword">interface</span> <span class="token class-name">itf<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span>
<span class="token punctuation">{</span>
    arg <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 函数泛型与实例化</span>
<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">fun1</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arg <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token constant">T</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> arg<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token generic-function"><span class="token function">fun1</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 类泛型与泛型接口的实例化</span>
<span class="token keyword">class</span> <span class="token class-name">example<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">itf<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span>
<span class="token punctuation">{</span>
    arg <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>

    <span class="token function">constructor</span><span class="token punctuation">(</span>arg <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>arg <span class="token operator">=</span> arg
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> a <span class="token operator">:</span> example<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">example<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型泛型" tabindex="-1"><a class="header-anchor" href="#类型泛型" aria-hidden="true">#</a> 类型泛型</h3><p>允许在类型中使用泛型, 注意当使用带泛型的函数类型时, 语法发生改变</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">funT</span> <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arg <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="泛型约束" tabindex="-1"><a class="header-anchor" href="#泛型约束" aria-hidden="true">#</a> 泛型约束</h3><p>泛型由于类型不确定, 无法访问成员, 可以通过接口约束泛型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Lengthwise</span> <span class="token punctuation">{</span>
    length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">loggingIdentity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> Lengthwise<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Now we know it has a .length property, so no more error</span>
    <span class="token keyword">return</span> arg<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="异步" tabindex="-1"><a class="header-anchor" href="#异步" aria-hidden="true">#</a> 异步</h1><h1 id="dom-与-typescript" tabindex="-1"><a class="header-anchor" href="#dom-与-typescript" aria-hidden="true">#</a> DOM 与 Typescript</h1><h2 id="获取元素" tabindex="-1"><a class="header-anchor" href="#获取元素" aria-hidden="true">#</a> 获取元素</h2><h3 id="根据-id-获取元素" tabindex="-1"><a class="header-anchor" href="#根据-id-获取元素" aria-hidden="true">#</a> 根据 ID 获取元素</h3><p>由于每个元素的 ID 唯一, 且元素类型不确定, 因此返回类型为 HTML 元素的基类 HTMLElement</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;[元素 id]&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="使用-css-选择器获取元素" tabindex="-1"><a class="header-anchor" href="#使用-css-选择器获取元素" aria-hidden="true">#</a> 使用 CSS 选择器获取元素</h3><ol><li>函数 querySelector 仅能获取第一个捕获到的元素</li><li>函数 querySelectorAll 将捕获所有符合条件的元素, 并返回 NodeList (不是数组, 但操作类似数组, 具有 length 等成员)</li><li>如果不是直接选择标签, 返回类型为 HTML 元素的基类 HTMLElement</li><li>如果直接捕获具体的标签, 如 p 等, 将返回相应的元素类型</li><li>可以对元素调用此函数, 将捕获符合标签的子元素</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;CSS 选择器&quot;</span><span class="token punctuation">)</span>

document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&quot;CSS 选择器&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="根据-html-标签获取元素" tabindex="-1"><a class="header-anchor" href="#根据-html-标签获取元素" aria-hidden="true">#</a> 根据 HTML 标签获取元素</h3><ol><li>通过 HTML 标签获取元素, 可以保证得到的元素具有其类型, 而不是 HTML 标签基类</li><li>使用函数 getElementsByTagName 得到的不是元素, 而是 HTMLElementCollection, 属于一个伪数组, 包含了所有具有此标签的元素</li><li>可使用 HTMLElementCollection 的成员方法 namedItem() 索引具有特定 id 的元素, 此时得到的元素类型为标签的特定类型, 可以调用标签的特有成员, 如 HTMLInputElement 特有的 value 成员, 可用于获取表单值</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> tbody1 <span class="token operator">:</span> HTMLTableSectionElement <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> 
    document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&quot;tbody&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">namedItem</span><span class="token punctuation">(</span><span class="token string">&quot;select_res&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 直接使用 id 获取的元素无法确定标签, 因此类型为 HTML 元素基类</span>
<span class="token keyword">let</span> tbody2 <span class="token operator">:</span> HTMLElement <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> 
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;select_res&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建元素" tabindex="-1"><a class="header-anchor" href="#创建元素" aria-hidden="true">#</a> 创建元素</h2><h1 id="tsconfig" tabindex="-1"><a class="header-anchor" href="#tsconfig" aria-hidden="true">#</a> tsconfig</h1><h2 id="多文件编译-1" tabindex="-1"><a class="header-anchor" href="#多文件编译-1" aria-hidden="true">#</a> 多文件编译</h2><p>在 tsconfig.json 中添加 include 元素, 以字符串数组为值, 包含编译目录</p><p>todo</p><h2 id="模块" tabindex="-1"><a class="header-anchor" href="#模块" aria-hidden="true">#</a> 模块</h2><h3 id="commonjs-模块解析" tabindex="-1"><a class="header-anchor" href="#commonjs-模块解析" aria-hidden="true">#</a> commonjs 模块解析</h3><h4 id="模块导出" tabindex="-1"><a class="header-anchor" href="#模块导出" aria-hidden="true">#</a> 模块导出</h4><p>在定义类 (class), 接口 (interface), 函数 (function) 与变量等前添加关键字 export 可以定义导出的部分</p><h4 id="模块导入" tabindex="-1"><a class="header-anchor" href="#模块导入" aria-hidden="true">#</a> 模块导入</h4><p>结合 js 与 nodejs, ts 的模块导入时, 需要先使用关键字 import 表明导入模块, 再使用 require 表明模块来源</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> os <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&quot;os&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="esmodule-模块解析" tabindex="-1"><a class="header-anchor" href="#esmodule-模块解析" aria-hidden="true">#</a> ESModule 模块解析</h3><p>todo</p>`,58);function v(h,m){const a=i("ExternalLinkIcon");return o(),l("div",null,[r,n("ol",null,[n("li",null,[n("a",d,[s("基本使用"),e(a)])]),n("li",null,[n("a",u,[s("使用注意"),e(a)]),s(" 先 判断 key 再赋值")])]),k])}const f=p(c,[["render",v],["__file","base.html.vue"]]);export{f as default};
