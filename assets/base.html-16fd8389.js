import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as t,c as r,b as e,d as l,a,w as d,e as s}from"./app-8c5ce49e.js";const u={},p=e("h1",{id:"ros-笔记",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#ros-笔记","aria-hidden":"true"},"#"),l(" ROS 笔记")],-1),h=e("br",null,null,-1),k={href:"https://wiki.ros.org/cn/ROS/Tutorials",target:"_blank",rel:"noopener noreferrer"},b=e("h2",{id:"ros-安装",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#ros-安装","aria-hidden":"true"},"#"),l(" ROS 安装")],-1),_=e("h3",{id:"基本安装",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#基本安装","aria-hidden":"true"},"#"),l(" 基本安装")],-1),m={href:"https://wiki.ros.org/cn/melodic/Installation/Ubuntu",target:"_blank",rel:"noopener noreferrer"},g=s(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">&#39;. /etc/lsb-release &amp;&amp; echo &quot;deb http://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/ \`lsb_release -cs\` main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#39;</span>

<span class="token function">curl</span> <span class="token parameter variable">-sSL</span> <span class="token string">&#39;http://keyserver.ubuntu.com/pks/lookup?op=get&amp;search=0xC1CF6E31E6BADE8868B172B4F42ED6FBAB17C654&#39;</span> <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -

<span class="token function">sudo</span> <span class="token function">apt</span> update

<span class="token comment"># 安装基础桌面包</span>
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ros-melodic-desktop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装时注意</p><ul><li>应当避免使用校园网环境, 而使用热点等</li><li>可通过 <code>sudo apt install / search ros-melodic-&lt;包名&gt;</code> 搜索与安装其他包</li><li>对于 ROS 工具一般则需要通过 <code>sudo apt install / search python-&lt;工具名&gt;</code> 搜索与安装 (请先确保导入环境变量)</li></ul><h3 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化" aria-hidden="true">#</a> 初始化</h3><p>在<mark>使用 ROS 前, 务必导入环境 <code>source /opt/ros/melodic/setup.bash</code></mark> (对于 zsh, 存在对应后缀的版本, 之后不再说明)<br> 可以将该导入语句写入 <code>~/.bashrc</code> 中, 确保每次启动终端时 ROS 环境均被导入</p><p>导入环境后, 依照教程执行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> rosdep init
rosdep update

<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python-rosinstall python-rosinstall-generator python-wstool build-essential
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意教程中的命令 <code>rosdep</code> 还需要通过 <code>sudo apt install python-rosdep</code> 安装</p><h3 id="快速测试" tabindex="-1"><a class="header-anchor" href="#快速测试" aria-hidden="true">#</a> 快速测试</h3><p>在 ROS 安装完成后, 首先安装以下教学包<br><code>sudo apt-get install ros-&lt;distro&gt;-ros-tutorials</code></p><p>使用 bash 运行以下代码进行快速测试</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>tmux split-window <span class="token string">&#39;source /opt/ros/&lt;distro&gt;/setup.bash; roscore&#39;</span>
<span class="token function">sleep</span> 1s
tmux split-window <span class="token string">&#39;source /opt/ros/&lt;distro&gt;/setup.bash; rosrun turtlesim turtlesim_node&#39;</span>
<span class="token function">sleep</span> 1s
tmux split-window <span class="token string">&#39;source /opt/ros/&lt;distro&gt;/setup.bash; rosrun turtlesim turtle_teleop_key&#39;</span>
<span class="token function">sleep</span> 1s

tmux select-layout main-vertical
<span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ros-文件系统" tabindex="-1"><a class="header-anchor" href="#ros-文件系统" aria-hidden="true">#</a> ROS 文件系统</h2><p>功能包是 ROS 软件的基本单元, ROS 文件系统也以功能包为基础</p><h3 id="rospack" tabindex="-1"><a class="header-anchor" href="#rospack" aria-hidden="true">#</a> rospack</h3><p>获取功能包的基本信息</p><ul><li><code>rospack find &lt;package&gt;</code> 打印功能包 <code>package</code> 的路径</li><li><code>rospack depends1 &lt;package&gt;</code> 打印功能包 <code>package</code> 的直接依赖功能包</li><li><code>rospack depends &lt;package&gt;</code> 打印功能包 <code>package</code> 的所有依赖功能包</li></ul><h3 id="rosbash" tabindex="-1"><a class="header-anchor" href="#rosbash" aria-hidden="true">#</a> rosbash</h3>`,18),v=s('<ul><li><code>roscd &lt;path&gt;</code> 根据功能包打开文件夹 <ul><li><code>path</code> 为路径, 但与一般路径不同, 该路径使用功能包名作为根目录<br> 例如 <code>roscd roscpp/cmake</code> 可直接打开功能包 <code>roscpp</code> 下的文件夹 <code>cmake</code></li><li>伪功能包 <code>log</code> 为一个文件夹, 包含了所有 ROS 程序的日志</li></ul></li><li><code>rosls &lt;path&gt;</code> 显示功能包路径下的文件信息 <ul><li><code>path</code> 基于功能包的路径, 含义与 <code>roscd</code> 相同</li><li>与 <code>ls</code> 不同, 不支持 <code>-a</code> 等选项</li></ul></li></ul><h2 id="catkin-功能包" tabindex="-1"><a class="header-anchor" href="#catkin-功能包" aria-hidden="true">#</a> Catkin 功能包</h2><p>使用 ROS 下的工具 catkin 用于创建功能包</p><h3 id="功能包的组成" tabindex="-1"><a class="header-anchor" href="#功能包的组成" aria-hidden="true">#</a> 功能包的组成</h3><p>约定一个功能包下应当包含以下文件夹, 且具有如下含义</p><ul><li><code>CMakeLists.txt</code> catkin 版本的 CMakeLists.txt (必须包含)</li><li><code>package.xml</code> 符合 Catkin 规范的功能包元信息 (必须包含)</li><li><code>src</code> 存放 C++ 源文件</li><li><code>include</code> 存放 C++ 头文件</li><li><code>script</code> 存放 Python 脚本</li><li><code>launch</code> 存放功能包所有节点启动文件 (launch 文件)</li><li><code>msg</code> 存放功能包自定义的消息类型</li><li><code>srv</code> 存放功能包自定义的服务类型</li><li><code>action</code> 存放功能包自定义的动作指令</li><li><code>config</code> 存放功能包配置文件, 用于供功能包代码调用</li></ul><h3 id="工作空间的组成" tabindex="-1"><a class="header-anchor" href="#工作空间的组成" aria-hidden="true">#</a> 工作空间的组成</h3><p>通过 Catkin 创建的功能包, 一般需要使用一个 Catkin 工作空间管理创建的功能包<br> 可将工作空间理解为一个具体的机器人项目, 而其下的功能包则为模块</p><p>工作空间包含了以下几个文件夹</p><ul><li><code>src</code> 源代码空间, 包含了工作空间下管理的功能包</li><li><code>build</code> 构建空间, 即构建功能包时的构建文件</li><li><code>devel</code> 工作空间开发有关的实用脚本以及自动生成的源码文件, 如消息类型定义的 Python 脚本</li><li><code>install</code> 安装空间</li></ul><p>注意</p><ul><li>使用工作空间内的功能包前, 需要通过其中脚本 <code>./devel/setup.bash</code> 将工作空间导入到 ROS 环境中</li><li>对工作空间中的功能包操作时都需要在工作空间中进行, 该节笔记中, 默认以工作空间为当前目录</li></ul><h3 id="创建工作空间与功能包" tabindex="-1"><a class="header-anchor" href="#创建工作空间与功能包" aria-hidden="true">#</a> 创建工作空间与功能包</h3><ul><li>创建工作空间 <ul><li>创建工作空间文件夹, 并在文件夹下创建一个空的 <code>src</code> 文件夹</li><li>进入工作空间文件夹, 运行 <code>catkin_make</code> 创建工作空间</li><li>通过 <code>source</code> 工作空间下的脚本 <code>./devel/setup.bash</code> 将工作空间内容整合到 ROS 环境中 (注意, 使用工作空间前都必须先导入脚本中的环境)</li></ul></li><li>创建功能包 <ul><li>创建功能包前, 需要 <code>source</code> 脚本 <code>&lt;工作空间&gt;/devel/setup.bash</code> 导入工作空间环境</li><li><code>cd</code> 进入工作空间下的源代码空间</li><li>运行指令 <code>catkin_create_pkg &lt;package_name&gt; [depend1] [[depend2] ...]</code> 创建功能包 <ul><li><code>package_name</code> 功能包名称</li><li><code>depend</code> 功能包依赖, 通常至少该导入如下功能包依赖 (后续可通过修改配置文件<a href="#%E6%B7%BB%E5%8A%A0%E4%BE%9D%E8%B5%96%E5%8A%9F%E8%83%BD%E5%8C%85">继续添加依赖</a>) <ul><li><code>std_msgs</code> 标准信息功能包</li><li><code>rospy</code> 使功能包支持 Python 脚本</li><li><code>roscpp</code> 使功能包支持 C++</li></ul></li></ul></li><li>定义<a href="#%E5%8A%9F%E8%83%BD%E5%8C%85%E5%85%83%E4%BF%A1%E6%81%AF">功能包的元信息</a></li></ul></li></ul><h3 id="功能包元信息" tabindex="-1"><a class="header-anchor" href="#功能包元信息" aria-hidden="true">#</a> 功能包元信息</h3><p>通过 <code>package.xml</code> 文件描述功能包的元信息<br> 常用的标签有</p><ul><li><code>package</code> 元信息根标签 <ul><li>该标签为 <code>package.xml</code> 文件的根标签, 不可缺少</li><li>属性 <code>format</code> 一般取值为 <code>2</code></li></ul></li><li><code>description</code> 功能包描述标签 <ul><li>标签内容为当前功能包的描述</li></ul></li><li><code>maintainer</code> 维护者标签 <ul><li>标签内容为该功能包的维护者</li><li>属性 <code>email</code> 为维护者邮箱</li></ul></li><li><code>license</code> 功能包证书, 一般使用待定 <code>TODO</code> 或 <code>GPLv3</code>, <code>BSD</code></li><li><code>buildtool_depend</code> 功能包构建工具, 即 <code>catkin</code></li><li><code>build_depend</code> 编译时功能包依赖 <ul><li>标签内容为依赖的功能包名称, 多个功能包则使用多个标签</li><li>后续依赖功能包可通过此标签添加</li></ul></li><li><code>exec_depend</code> 运行时功能包依赖 <ul><li>与 <code>build_depend</code> 相同, 用于确定运行时依赖 (根据功能包特点决定)</li><li>后续依赖功能包可通过此标签添加</li></ul></li></ul><h3 id="添加依赖功能包" tabindex="-1"><a class="header-anchor" href="#添加依赖功能包" aria-hidden="true">#</a> 添加依赖功能包</h3><ul><li>对于运行时依赖 <ul><li>在元信息文件 <code>package.xml</code> 中添加标签 <code>&lt;exec_depend&gt;[功能包名]&lt;/exec_depend&gt;</code></li><li>在 <code>CMakeLists.txt</code> 中的函数 <code>catkin_package</code> 添加参数 <code>CATKIN_DEPENDS [功能包名]</code></li></ul></li><li>对于构建时依赖 <ul><li>在元信息文件 <code>package.xml</code> 中添加标签 <code>&lt;build_depend&gt;[功能包名]&lt;/build_depend&gt;</code></li><li>在 <code>CMakeLists.txt</code> 中的函数 <code>find_package</code> 添加参数 <code>[功能包名]</code></li></ul></li></ul><h3 id="构建功能包" tabindex="-1"><a class="header-anchor" href="#构建功能包" aria-hidden="true">#</a> 构建功能包</h3><p>在功能包的源代码编写完成后, 要运行功能包前还需要构建工作空间, 编译其中的源代码</p><p>使用命令 <code>catkin_make [make_targets] [-D...]</code> 构建功能包</p>',22),f=e("li",null,[e("code",null,"make_targets"),l(" 编译的功能包名称")],-1),E=e("code",null,"-D...",-1),x=e("br",null,null,-1),B={href:"https://wiki.ros.org/catkin/commands/catkin_make",target:"_blank",rel:"noopener noreferrer"},A=s('<p>使用时注意</p><ul><li>在运行 <code>catkin_make</code> 时, 将列出<a href="#%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4%E7%9A%84%E7%BB%84%E6%88%90">四个子空间</a>的路径, 可依据此检查</li><li>功能包构建后最好再次运行 <code>source ./devel/setup.bash</code> 导入更改</li></ul><h3 id="功能包常见错误排查" tabindex="-1"><a class="header-anchor" href="#功能包常见错误排查" aria-hidden="true">#</a> 功能包常见错误排查</h3>',3),C=e("li",null,[l("构建时出错 "),e("ul",null,[e("li",null,[l("当构建时出错后, 在修复后依然出错, 可以尝试先删除 "),e("code",null,"./build/CMakeCache.txt"),l(", 再次出错时尝试删除整个构建空间 "),e("code",null,"./build")]),e("li",null,[l("当输入了错误名称的依赖功能包时, 需要同时修改"),e("a",{href:"#%E5%8A%9F%E8%83%BD%E5%8C%85%E5%85%83%E4%BF%A1%E6%81%AF"},"功能包元信息"),l("与功能包下 CMakeLists.txt 文件中的错误包名")])])],-1),R=e("li",null,[l("检查 "),e("a",{href:"#%E5%88%9D%E5%A7%8B%E5%8C%96"},"ROS 环境"),l("与"),e("a",{href:"#%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4%E7%9A%84%E7%BB%84%E6%88%90"},"工作空间环境"),l("是否正确建立 (即对应的脚本是否通过 "),e("code",null,"source"),l(" 导入环境)")],-1),S=s("<li>运行 Python 脚本时出错, 提示缺少模块 <code>rospkg</code>时<br> 根据所用的 Python 脚本, 使用 pip 安装 <code>rospkg</code>, 如对于 Python3.x 使用命令<br><code>python3 -m pip install rospkg</code></li><li>无法调用功能包内的自定义消息<br> 自定义消息后, 还需要使用 <code>source ./devel/setup.bash</code> 将生成的消息定义导入环境</li>",2),y=e("h3",{id:"常见功能包与工作空间问题",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#常见功能包与工作空间问题","aria-hidden":"true"},"#"),l(" 常见功能包与工作空间问题")],-1),O={href:"https://blog.csdn.net/lclfans1983/article/details/107453043",target:"_blank",rel:"noopener noreferrer"},w=e("ul",null,[e("li",null,[l("当工作空间 A 依赖于工作空间 B 时, 可先导入工作空间 B 的环境 "),e("code",null,"setup.bash")]),e("li",null,[l("在该环境下进入工作空间 A 并进行构建 "),e("code",null,"catkin_make")])],-1),D={href:"https://blog.csdn.net/RosettaLeong/article/details/116210936",target:"_blank",rel:"noopener noreferrer"},L=e("ul",null,[e("li",null,[l("当工作空间 A 依赖于工作空间 B 时, 进入工作空间 A 并修改文件 "),e("code",null,"./devel/_setup_util.py")]),e("li",null,[l("在文件中常量 "),e("code",null,"CMAKE_PREFIX_PATH"),l(" 末尾添加 "),e("code",null,";<工作空间 B 的绝对路径>/devel")])],-1);function F(P,M){const o=i("ExternalLinkIcon"),n=i("RouterLink");return t(),r("div",null,[p,e("p",null,[l("该笔记以 Ubuntu-18.04 下的 ROS 版本 Melodic 为例"),h,l(" 参考教程 "),e("a",k,[l("https://wiki.ros.org/cn/ROS/Tutorials"),a(o)])]),b,_,e("p",null,[l("安装 ROS 时, 参考官方文档 "),e("a",m,[l("https://wiki.ros.org/cn/melodic/Installation/Ubuntu"),a(o)]),l(" 即可")]),g,e("p",null,[l("rosbash 实际为一系列类似 bash "),a(n,{to:"/coding/web/linux/base.html#%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86"},{default:d(()=>[l("文件管理")]),_:1}),l("的指令")]),v,e("ul",null,[f,e("li",null,[E,l(" 传递给 CMake 的参数, 也可用于控制 Catkin"),x,l(" 参见 "),e("a",B,[l("https://wiki.ros.org/catkin/commands/catkin_make"),a(o)])])]),A,e("ul",null,[C,e("li",null,[l("运行时出错 "),e("ul",null,[R,e("li",null,[l("检查 Python 脚本是否正确导入, 可参见"),a(n,{to:"/coding/ros/node.html#%E5%9F%BA%E4%BA%8E-Python-%E7%9A%84%E8%8A%82%E7%82%B9%E7%BC%96%E7%A8%8B"},{default:d(()=>[l("笔记")]),_:1})]),S])])]),y,e("ul",null,[e("li",null,[l("跨工作空间调用功能包 (一般仅需如下执行一次, 之后构建都不需要重复操作) "),e("ul",null,[e("li",null,[l("保险方法, 参考 "),e("a",O,[l("https://blog.csdn.net/lclfans1983/article/details/107453043"),a(o)]),w]),e("li",null,[l("直接方法, 参考 "),e("a",D,[l("https://blog.csdn.net/RosettaLeong/article/details/116210936"),a(o)]),L])])])])])}const T=c(u,[["render",F],["__file","base.html.vue"]]);export{T as default};
