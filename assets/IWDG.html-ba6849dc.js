import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as i,e as l}from"./app-8c5ce49e.js";const r={},h=l('<h1 id="独立看门狗-iwdg" tabindex="-1"><a class="header-anchor" href="#独立看门狗-iwdg" aria-hidden="true">#</a> 独立看门狗 IWDG</h1><h2 id="外设介绍" tabindex="-1"><a class="header-anchor" href="#外设介绍" aria-hidden="true">#</a> 外设介绍</h2><p>本质为一个 12 位的递减计数器 如果计数器的值减到 0, 则产生复位信号, 表示程序出错 需要在复位前进行&quot;喂狗&quot;, 重载计数器, 证明程序正常运行 独立看门狗在停止模式和待机模式下仍然能工作</p><h3 id="功能框架" tabindex="-1"><a class="header-anchor" href="#功能框架" aria-hidden="true">#</a> 功能框架</h3><h4 id="时钟" tabindex="-1"><a class="header-anchor" href="#时钟" aria-hidden="true">#</a> 时钟</h4><ol><li>独立看门狗使用 LSI 时钟, 精度较低</li><li>通常 LSI 频率为 30 - 60KHz, 通过分频器得到计数器时钟 CK_CNT = 40 / 4 * 2 ^ PRV</li><li>设计溢出时间时应使重载时间足够大, 并且认为 LSI 为 60KHz</li></ol><h3 id="计数器" tabindex="-1"><a class="header-anchor" href="#计数器" aria-hidden="true">#</a> 计数器</h3><ol><li>独立看门狗为一个 12 位的递减计数器, 最大值位 0xFFF</li><li>计数器重载值存在重载寄存器 rlv 中, 这个值决定了独立看门狗的溢出时间</li><li>溢出时间 T = (4 * 2 ^ prv) / 40 x rlv(ms)</li></ol><h3 id="状态控制" tabindex="-1"><a class="header-anchor" href="#状态控制" aria-hidden="true">#</a> 状态控制</h3><ol><li>独立看门狗通过键寄存器 IWDG_KR 控制 <ol><li>0xAAAA 重载计数器</li><li>0x5555 PRV 与 RLV 使寄存器可写</li><li>0xCCCC 启动 IWDG, 一旦启动则无法关闭</li></ol></li><li>状态寄存器 SR 保存了 PRV 与 RLV 寄存器能否修改</li></ol><h2 id="ll-库配置" tabindex="-1"><a class="header-anchor" href="#ll-库配置" aria-hidden="true">#</a> LL 库配置</h2><ol><li>LL_IWDG_ReloadCounter(IWDGx); 重载计数器, 喂狗</li><li>LL_IWDG_Enable(IWDGx); 启动 IWDG(当使用 IWDG 后自动启动)</li><li>可在 cube 设置 Do not generate function call 防止自动启动, 并使用 MX_IWDG_Init 启动</li></ol>',12),d=[h];function o(t,n){return e(),i("div",null,d)}const _=a(r,[["render",o],["__file","IWDG.html.vue"]]);export{_ as default};
