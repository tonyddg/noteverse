import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as n,c as s,b as e,d as l,a,w as d,e as c}from"./app-8c5ce49e.js";const r={},u=c('<h1 id="控制器设计" tabindex="-1"><a class="header-anchor" href="#控制器设计" aria-hidden="true">#</a> 控制器设计</h1><h2 id="信号线性化" tabindex="-1"><a class="header-anchor" href="#信号线性化" aria-hidden="true">#</a> 信号线性化</h2><p>使用 Simulink 中的线性化管理器, 可以标记模型的输入与输出信号, 并将复杂模型转化为线性时不变系统 (LTI 系统)</p><h3 id="系统线性化" tabindex="-1"><a class="header-anchor" href="#系统线性化" aria-hidden="true">#</a> 系统线性化</h3><p>在对动态系统完成建模后, 模型通常为高阶, 时变且非线性的系统, 一般使用以下步骤对模型进行线性化</p>',5),h=c("<li>线性化模型前首先要标记模型的输入与输出信号 <ul><li>首先选择 <code>APP</code> 选项卡, 打开线性化管理器, 进入 <code>线性化管理器</code> 选项卡</li><li>选中模型的输入信号线, 并点击线性化管理器中 <code>输入扰动</code> 按钮 (如果不存在可下拉寻找), 将其标记为模型的输入信号</li><li>选中模型的输出信号线, 并点击线性化管理器中 <code>输出测量</code> 按钮, 将其标记为模型的输出信号</li></ul></li>",1),m=e("li",null,[l("首先选择 "),e("code",null,"APP"),l(" 选项卡, 打开模型线性化器")],-1),_=e("li",null,"在模型线性化器上方的设置分区中, 可设置线性化的工作点, 选择模型初始条件或特定时间的工作点 (输入数组将创建多个线性化模型) 作为线性化点",-1),p=e("li",null,[l("在模型线性化器上方的线性化分区中, 可对模型进行线性化并生成线性化模型对象以及模型的各种特性图像如 Nyquist 图, Bode 图等 "),e("ul",null,[e("li",null,"生成的特征图像与线性化结果无关 (各种图像对应相同的结果)"),e("li",null,"对于生成的特征图像, 可右键选择特征菜单, 现实图像中的特征值, 如阶跃图的上升时间, 峰值相应等")])],-1),B=e("li",null,"生成的线性化模型将存放在左侧的线性分析工作区中, 右键生成的模型, 选择导出到 Matlab 工作区, 即可在 Matlab 工作区中使用这些线性化的模型对象",-1),E=e("h3",{id:"在-simulink-中创建线性系统",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#在-simulink-中创建线性系统","aria-hidden":"true"},"#"),l(" 在 Simulink 中创建线性系统")],-1),P=e("code",null,"Control System Toolbox",-1),b=e("code",null,"LTI System",-1),f=e("ul",null,[e("li",null,[l("推荐将线性模型对象保存为 "),e("code",null,".mat"),l(" 文件, 并在下次打开模型时重新导入 Matlab 工作区")])],-1),I=e("li",null,[l("选择 "),e("code",null,"Continuous"),l(" 分类下的 "),e("code",null,"State-Space"),l(", "),e("code",null,"Transfer fcn"),l(", "),e("code",null,"Zero-Pole"),l(" 模块, 可在 Simulink 中创建不同的线性系统")],-1),x=e("h3",{id:"寻找稳态工作点",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#寻找稳态工作点","aria-hidden":"true"},"#"),l(" 寻找稳态工作点")],-1),D=e("p",null,[l("对于部分系统, 其在 "),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mi",null,"t"),e("mo",null,"="),e("mn",null,"0")]),e("annotation",{encoding:"application/x-tex"},"t=0")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.6151em"}}),e("span",{class:"mord mathnormal"},"t"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),e("span",{class:"mrel"},"="),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.6444em"}}),e("span",{class:"mord"},"0")])])]),l(" 时并不处于稳态, 不利于模型的线性化, 因此可通过稳态管理器寻找模型的稳态工作点"),e("br"),l(" 即寻找模型在稳定状态下的输出, 并以此平衡状态作为系统的初态分析系统")],-1),A=c('<ul><li>选择 <code>APP</code> 选项卡, 打开稳态管理器</li><li>在 <code>添加</code> 部分点击 <code>配平设定</code>, 如果在<a href="#%E7%B3%BB%E7%BB%9F%E7%BA%BF%E6%80%A7%E5%8C%96">系统线性化</a>已标记了系统的输入与输出即可自动识别需要配平的状态变量</li><li>在 <code>设定</code> 选显卡内点击 <code>配平</code> 自动寻找系统在稳态下的状态变量</li><li>对于得到的稳态状态变量值, 可在左侧的 <code>报告</code> 列表选择稳态报告对象并导出到 Matlab 工作区 <ul><li>在<a href="#%E7%B3%BB%E7%BB%9F%E7%BA%BF%E6%80%A7%E5%8C%96">系统线性化</a>时, 设置线性化工作点时, 可选择 <code>现有工作点</code> 下导出的稳态报告, 得到基于稳态的线性化系统</li><li>在 <code>模型设置</code> 中 (位于 <code>建模</code> 选项卡下), 选择 <code>数据导入/导出</code> 设置, 在 <code>从工作区加载</code> 部分, 勾选 <code>初始状态</code> 并输入 <code>getstatestruct(&lt;变量名&gt;)</code> 可将之前导出的稳态工作点作为模型的初始状态</li><li>推荐将导出的稳态报告对象以 <code>.mat</code> 保存为文件, 并在加载模型前将该对象导入到 Matlab 工作区内</li></ul></li></ul><h2 id="pid-控制器" tabindex="-1"><a class="header-anchor" href="#pid-控制器" aria-hidden="true">#</a> PID 控制器</h2><p>通过 <code>Continuous</code> 分类下的 <code>PID Controller</code> 模块即封装的 PID 控制器<br> 将误差信号 (输入信号与反馈信号之差) 输入控制器, 并输出控制信号, 实现对系统的控制</p><p>通过模块属性即可调节 P, I, D 三个参数</p><h3 id="自动调节-pid-参数" tabindex="-1"><a class="header-anchor" href="#自动调节-pid-参数" aria-hidden="true">#</a> 自动调节 PID 参数</h3><ul><li>打开 PID 控制器模块属性, 在 <code>主要</code> 的 <code>自动调节</code> 部分内点击 <code>调节</code> 按钮启动 PID 参数调节器</li><li>在 PID 参数调节器中, 可通过拖动 <code>调整工具</code> 部分的两个滑动条, 根据目标系统阶跃特性自动调节 PID 参数 <ul><li>推荐调解时可先将 <code>响应时间</code> 拖动到最快, 再在中间与稳健之间调节 <code>瞬态响应</code> 以得到一个性能较好的系统</li><li>点击拖动条两侧的按钮可增大调节范围, 但不推荐增大范围, 特别是控制信号的范围有限制的系统 (即具有输出饱和的 PID 控制器)</li></ul></li><li>在 <code>调整工具</code> 部分内点击 <code>显示参数</code> 可用于查看与比较控制器在旧 PID 参数与调节后 PID 参数下的性能</li><li>在 <code>被控对象</code> 部分内点击 <code>Plant</code> 可导入 Matlab 工作区内特定的线性系统对象 (如<a href="#%E7%B3%BB%E7%BB%9F%E7%BA%BF%E6%80%A7%E5%8C%96">系统线性化</a>得到的线性系统) 用于评估系统的性能</li><li>在 <code>设计</code> 部分内点击 <code>添加绘图</code> 的下拉菜单可以绘制系统各个环节在新旧 PID 参数下的信号 <ul><li>例如 <code>控制器代价</code> 即 PID 控制器输出的控制信号, 可观察该信号确保信号不会过饱和 (保证控制信号的最大值乘以最大输入信号小于饱和值)</li></ul></li><li>对于自动调节的结果可在 <code>结果</code> 部分内点击 <code>更新模型</code> 将新的 PID 参数更新到 PID 控制器中再进行下一步调节或退出<br> 自动调节一般基于线性化的系统, 因此还需要再原始系统上检验 PID 控制器的效果</li></ul>',6);function k(g,F){const o=t("RouterLink");return n(),s("div",null,[u,e("ul",null,[h,e("li",null,[l("完成标记后即可对模型进行线性化 "),e("ul",null,[m,_,p,B,e("li",null,[l("对于线性化模型对象, 可使用有关的"),a(o,{to:"/coding/math/model.html#%E6%A8%A1%E5%9E%8B%E4%BB%BF%E7%9C%9F"},{default:d(()=>[l("模型仿真")]),_:1}),l("函数, 获取模型更多信息")])])])]),E,e("p",null,[l("对于系统线性化的模型以及 "),a(o,{to:"/coding/math/model.html#%E7%B3%BB%E7%BB%9F%E6%95%B0%E5%AD%A6%E6%A8%A1%E5%9E%8B"},{default:d(()=>[l("Matlab 中创建的线性模型")]),_:1}),l("可以重新导入 Simulink 中, 作为系统的传递函数, 或可直接在 Simulink 中创建线性模型")]),e("ul",null,[e("li",null,[l("选择模块库 "),P,l(" 下的 "),b,l(" 模块, 在模块属性中, 设置 LTI 系统变量属性, 输入 Matlab 工作区或中的线性模型对象的变量名, 即可将模型对象作为一个传递函数使用 (状态空间可能需要"),a(o,{to:"/coding/math/simulink/base.html#%E4%BF%A1%E5%8F%B7%E9%9B%86%E6%95%A3"},{default:d(()=>[l("信号集散模块")]),_:1}),l(") "),f]),I]),x,D,A])}const S=i(r,[["render",k],["__file","control.html.vue"]]);export{S as default};
