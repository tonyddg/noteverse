import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as p,c as d,b as n,d as s,a,w as o,e as t}from"./app-8c5ce49e.js";const u={},r=n("h1",{id:"常用操作与模块",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#常用操作与模块","aria-hidden":"true"},"#"),s(" 常用操作与模块")],-1),k=n("h2",{id:"退出程序",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#退出程序","aria-hidden":"true"},"#"),s(" 退出程序")],-1),h={href:"https://www.bilibili.com/video/BV1bZ4y1B7vT",target:"_blank",rel:"noopener noreferrer"},m=t('<h3 id="直接方法" tabindex="-1"><a class="header-anchor" href="#直接方法" aria-hidden="true">#</a> 直接方法</h3><p><code>quit(code = 0)</code> 或 <code>exit(code = 0)</code><br> 函数参数 <code>code</code> 为退出码, 取 <code>0</code> 为正常退出<br> 以上两个退出函数为基本的退出函数, 其本质为发起异常 <code>raise SystemExit</code>, 可能被 <code>try</code> 语句捕获<br> 由于这两个函数来自自动导入的模块 <code>site</code>, 因此当这个模块被排除时, 将因为函数不存在而导致异常<br> 因此一般不推荐使用</p><h3 id="一般推荐方法" tabindex="-1"><a class="header-anchor" href="#一般推荐方法" aria-hidden="true">#</a> 一般推荐方法</h3><p><code>sys.exit(code = 0)</code><br> 同样为 <code>raise SystemExit</code><br> 但使用时要明确导入模块 <code>sys</code>, 因此更安全, 推荐使用</p><h3 id="特殊方法" tabindex="-1"><a class="header-anchor" href="#特殊方法" aria-hidden="true">#</a> 特殊方法</h3><p><code>os._exit(code)</code><br> 通过系统层面直接退出程序, 可以保证程序立刻退出<br> 该函数没有默认的退出码, 需要手动指定<br> 不推荐使用, 因为没有 <code>raise SystemExit</code>, 可能导致部分退出保护程序无法运行</p><h2 id="命令行解析" tabindex="-1"><a class="header-anchor" href="#命令行解析" aria-hidden="true">#</a> 命令行解析</h2>',7),_={href:"https://docs.python.org/zh-cn/3/howto/argparse.html#argparse-tutorial",target:"_blank",rel:"noopener noreferrer"},v=t('<p>通过模块 argparse, 可实现对输入的命令行参数或字符串的解析<br> 解析时遵守 Shell 传递命令行参数的一般准则</p><h3 id="解析器创建与解析" tabindex="-1"><a class="header-anchor" href="#解析器创建与解析" aria-hidden="true">#</a> 解析器创建与解析</h3><p>使用 <code>parser = argparse.ArgumentParser(prog = None, description = None, epilog = None)</code> 创建一个解析器对象</p><ul><li><code>prog</code> 字符串, 表示命令名称, 默认使用脚本名称</li><li><code>description</code> 字符串, 表示命令介绍</li><li><code>epilog</code> 字符串, 表示命令的补充详细说明</li></ul><p>使用解析器对象方法 <code>parser.parse_args(args = None)</code> 对参数进行解析</p><ul><li><code>args</code> 被解析的参数 <ul><li>当不给出参数时, 将对命令行参数进行解析</li><li>给出参数为一个字符串数组, 数组中各个元素即传入的参数</li></ul></li><li>返回值为一个解析结果对象, 对象的成员即命令行参数名, 成员的值即捕获的值</li><li>类似的还有 <code>parser.parse_known_args(args = None)</code>, 该方法仅解析已知的参数, 将返回一个元组, 第一个元素是解析结果对象, 第二个元素是无法解析的字符串组成的列表</li></ul><h3 id="通用添加参数值" tabindex="-1"><a class="header-anchor" href="#通用添加参数值" aria-hidden="true">#</a> 通用添加参数值</h3><p>对于 argparse 解析的命令通常有具有以下格式<br><code>python xxx.py &lt;位置参数&gt; --&lt;可选参数&gt; &lt;参数值&gt;</code></p><ul><li>命令只有一个位置参数, 通常紧跟在命令名后, 也可使用单独的 <code>--</code> 与前面的可选参数分隔, 并在最后给出</li><li>命令可以有多个可选参数, 可选参数则可以有多个, 并使用 <code>--</code> 或 <code>-</code> 为前缀, 后接参数值</li></ul><p>使用解析器对象方法 <code>parser.add_argument(*name_or_flags, help, metavar, ation, nargs, choices, type, default)</code> 添加命令参数以用于捕获</p><ul><li><code>name_or_flags</code> 字符串, 表示参数名称 <ul><li>名称只能由英文字母, 数字, 下划线组成</li><li>当名称以 <code>--</code> 为开头时, 表示可选参数, 否则表示位置参数</li><li>对于可选参数, 还可以传入多个字符串, 前几个以 <code>-</code> 为前缀, 最后一个以 <code>--</code> 为前缀, 表示可选参数及其短别名</li><li>参数名称同时也是解析结果对象的成员 (可选参数名不包含前缀 <code>--</code>)</li></ul></li><li><code>help</code> 字符串, 表示参数说明</li><li><code>metavar</code> 字符串, 表示在说明中使用的位置参数的参数名称或可选参数值的代称</li><li><code>action</code> 字符串, 特殊参数操作, 具体见下文介绍</li><li><code>nargs</code> 字符串或数组, 表示参数可以出现的次数 (当该参数被指定后, 除了默认情况, 捕获值总是一个列表) <ul><li>数字表示参数要求出现的此时</li><li><code>*</code> 表示参数可不出现或出现任意次</li><li><code>+</code> 表示参数必须出现但次数不限</li><li><code>?</code> 表示可出现一次或不出现 (捕获值不为列表)</li><li>传入过多参数时, 应使用 <code>--&lt;可选参数名1&gt; [参数值1] [参数值2...] --&lt;可选参数2&gt;</code>, 即一个可选参数后跟随多个参数值</li><li>推荐配合 <code>action = &#39;extend&#39;</code> 使用, 此时可以出现多次同名可选参数, 并合并参数值为一个列表, 而不需要使用上述格式</li></ul></li><li><code>choice</code> 列表, 表示参数的可取值, 当传入可取值外的参数时将出错</li><li><code>type</code> 接收字符串的回调函数, 表示参数转换器, 一般仅传入 <code>int</code> 与 <code>float</code> 用于接收数值类型的参数, 此外都应当接收字符串并在后续处理</li><li><code>default</code> 参数的默认值, 默认为 <code>None</code></li></ul><h3 id="特殊参数解析" tabindex="-1"><a class="header-anchor" href="#特殊参数解析" aria-hidden="true">#</a> 特殊参数解析</h3><p>以下介绍一些特殊的参数解析方法</p><ul><li>传入命令标志 <ul><li>默认情况下可选参数后必须有一个参数值, 但很多时候希望将可选参数作为一个标志使用</li><li>此时可在定义参数时, 给出 <code>action</code> 的值 <code>store_true</code>, 此时可选参数将视为一个标志处理, 当该参数出现时, 参数值赋 <code>True</code>, 否则赋 <code>False</code></li></ul></li><li>互斥参数组 <ul><li>对于几个参数可能相互排斥, 当一个出现时另几个参数不允许出现</li><li>可使用解析器对象创建一个互斥组 <code>group = parser.add_mutually_exclusive_group()</code>, 然后再使用互斥组对象的方法 <code>group.add_argument()</code> 添加参数, 以次方法添加的参数将相互排斥不能同时出现</li></ul></li><li>子命令 <ul><li>命令下可能还存在子命令, 即命令名后的第一个参数为子命令名称</li><li>通过解析器对象方法 <code>subparse = parser.add_subparsers(title, description)</code> 创建子命令生成器对象 (只能存在一个子命令生成器, 且原命令依然可以使用, 即对应没有传入子命令的情况)</li><li>通过子命令生成器对象方法 <code>parser_xxx = subparse.add_parser(name, help, aliases)</code> 创建子命令, 此时将返回一个用于子命令的解析器对象, 通过此对象为子命令添加参数 <ul><li>参数 <code>name</code> 字符串, 子命令名称</li><li>参数 <code>help</code> 字符串子命令帮助</li><li>参数 <code>aliases</code> 字符串列表, 子命令别名</li></ul></li><li>无论使用哪个子命令, 返回的解析结果对象中仅包含子命令所捕获的参数而不会区分具体调用了哪个子命令</li><li>使用子命令时有一个技巧, 即对于各个子命令均使用 <code>parser_xxx.set_default(func = proc_xxx)</code>, 方法 <code>set_default</code> 可用于设置特殊参数, 该参数以及参数值总会出现在解析结果对象中, <code>proc_xxx</code> 为子命令的处理函数<br> 此时无论调用哪个子命令, 只需要使用 <code>args.func(args)</code> 总能根据使用的子命令, 调用对应的处理函数</li></ul></li><li>版本显示 <ul><li>如果希望将一个命令标志用于显示版本号, 可使用以下示例代码</li><li><code>parser.add_argument(&#39;--version&#39;, action=&#39;version&#39;, version=&#39;%(prog)s &lt;版本号&gt;&#39;)</code></li><li>此时调用可选参数 <code>--version</code> 将用于显示版本号</li></ul></li></ul><h2 id="计时与时间" tabindex="-1"><a class="header-anchor" href="#计时与时间" aria-hidden="true">#</a> 计时与时间</h2><p>使用模块 <code>time</code> 实现与事件以及日期有关的操作<br> 以下仅介绍常用的操作</p><h3 id="日期获取" tabindex="-1"><a class="header-anchor" href="#日期获取" aria-hidden="true">#</a> 日期获取</h3>',17),b=n("li",null,[n("code",null,"ticks = time.time()"),s(" 获取当前时刻的时间戳 (浮点数)")],-1),g=n("li",null,[n("code",null,"lt = time.localtime(ticks)"),s(" 将时间戳转换为时间结构体 "),n("ul",null,[n("li",null,[n("code",null,"ticks"),s(" 为被转换的时间戳, 如果没有给出将使用当前时刻的时间戳")]),n("li",null,[s("返回值时间结构体中共包含成员 "),n("code",null,"tm_year, tm_mon, tm_mday, tm_hour, tm_min, tm_sec, tm_wday, tm_yday, tm_isdst")])])],-1),f=n("code",null,"time.strftime(format, lt)",-1),y=n("code",null,"format",-1),E=n("code",null,"%Y",-1),w=n("code",null,"%m",-1),B=n("code",null,"%d",-1),x=n("code",null,"%H",-1),A=n("code",null,"%M",-1),q=n("code",null,"%S",-1),N={href:"https://docs.python.org/3/library/time.html#time.strftime",target:"_blank",rel:"noopener noreferrer"},F=n("li",null,[n("code",null,"lt"),s(" 用于转化的时间结构体")],-1),T=t('<h3 id="计时与延时" tabindex="-1"><a class="header-anchor" href="#计时与延时" aria-hidden="true">#</a> 计时与延时</h3><ul><li><code>ticks = time.perf_counter()</code> 获取以秒为单位的浮点类型时间戳, 可通过两个时间戳的差值用于计时</li><li><code>time.sleep(sec)</code> 线程休眠 <ul><li><code>sec</code> 休眠时长, 单位为秒, 可以输入浮点值<br> 当 <code>sec=0</code>, 将会把时间片让渡给其他需要的线程</li></ul></li></ul><h2 id="文件操作" tabindex="-1"><a class="header-anchor" href="#文件操作" aria-hidden="true">#</a> 文件操作</h2><h3 id="打开文件" tabindex="-1"><a class="header-anchor" href="#打开文件" aria-hidden="true">#</a> 打开文件</h3><p>使用函数 <code>open(file, mode = &#39;r&#39;)</code> 打开文件并返回一个文件对象</p>',5),D=t("<li><code>file</code> 文件路径</li><li><code>mode</code> 文件打开方式标识, 使用一个字符串表示, 可用以下标识符任意组合 <ul><li><code>r</code> 读取文件</li><li><code>w</code> 写入文件</li><li><code>x</code> 创建一个新文件, 如果文件已存在将出错</li><li><code>a</code> 打开文件并写入时, 如果文件已存在将在末尾追加内容 (默认为清空原有内容)</li><li><code>b</code> 以二进制的方式打开文件, 此时不会尝试解码文件内容 (默认将尝试解析文件内容为字符)</li><li><code>+</code> 允许文件同时读取与写入, 不可单独使用, 需要与配合 <code>r</code> 或 <code>w</code> 标志配合, 如 <code>r+</code> 表示文件可用于读取与写入, 但主要用于读取</li></ul></li>",2),C=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment"># 操作文件对象</span>
<span class="token comment"># 无论是否有异常, 退出时将自动关闭文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="文件操作-1" tabindex="-1"><a class="header-anchor" href="#文件操作-1" aria-hidden="true">#</a> 文件操作</h3><p>对于 <code>open</code> 函数返回的文件对象, 可使用以下对象方法实现文件操作 (以下以 <code>file</code> 作为文件对象实例名称)</p>`,3),j=n("li",null,[n("code",null,"file.cloase()"),s(" 关闭并释放文件资源 (使用 "),n("code",null,"with"),s(" 语句时不必要, 将在退出时自动执行)")],-1),L=n("code",null,"file.read(size = None)",-1),P=n("li",null,[n("code",null,"size"),s(" 读取长度 "),n("ul",null,[n("li",null,"给出整数时, 表示读取的字符数, 同时将文件指针偏移相应位置"),n("li",null,[s("给出 "),n("code",null,"None"),s(" 时, 将读取文件所有剩余内容")]),n("li",null,"当文件指针位于末尾时, 读取得到的总为空")])],-1),z=t("<li><code>file.readline(size = -1)</code> 读取最多一行的文件内容 <ul><li><code>size</code> 最大读取长度 <ul><li>给出正整数时, 表示最多一行读取的内容, 读取后文件指针将偏移相应位置</li><li>给出 <code>-1</code> 时, 将读取整行的内容</li></ul></li><li>返回值与 <code>file.read()</code> 类似</li><li>该函数实际为从当前文件指针位置开始, 读取到 <code>size</code> 或换行符的位置 (读取结果中包含换行符)</li></ul></li><li><code>file.write(str)</code> 向文件写入内容 <ul><li><code>str</code> 向文件写入的内容 <ul><li>写入内容时, 文件指针也将移动对应长度</li><li>以二进制方式读取时, 应传入 bytes 对象</li></ul></li><li>返回值为实际写入的字符数</li></ul></li><li><code>file.seek(offset, whence = os.SEEK_SET)</code> 移动文件指针 <ul><li><code>offset</code> 文件指针的相对偏移量</li><li><code>whence</code> 使用整数表示的相对位置, 一般有以下取值 <ul><li><code>0</code> 或 <code>os.SEEK_SET</code>, 以文件开头为基准位置 (默认情况)</li><li><code>1</code> 或 <code>os.SEEK_CUR</code>, 以当前文件指针为基准位置</li><li><code>2</code> 或 <code>os.SEEK_END</code>, 以文件末尾为基准位置, 可用于获取文件末尾位置</li></ul></li><li>返回新文件指针相对文件开头为基准的位置</li></ul></li><li><code>file.tell()</code> 获取当前文件指针的位置</li>",4),S=n("h2",{id:"数据存取",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#数据存取","aria-hidden":"true"},"#"),s(" 数据存取")],-1),M=n("h3",{id:"json",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#json","aria-hidden":"true"},"#"),s(" JSON")],-1),O=n("li",null,[s("使用时需要导入包 "),n("code",null,"json"),s(" (内置模块)")],-1),V=n("code",null,"json.dump(data, fp)",-1),Y=n("code",null,"data",-1),H=n("code",null,"__dict__",-1),I=n("li",null,[n("code",null,"fp"),s(" 写入对象, 即一个具有 "),n("code",null,"write()"),s(" 方法的对象, 如"),n("a",{href:"#%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C"},"文件对象")],-1),K=n("li",null,[n("code",null,"json.dumps(data)"),s(" 以字符串形式导出数据 "),n("ul",null,[n("li",null,[n("code",null,"data"),s(" 与 "),n("code",null,"json.dump()"),s(" 相同")]),n("li",null,"将 json 以字符串的形式赴返回")])],-1),R=n("code",null,"json.load(fp)",-1),Q=n("li",null,[n("code",null,"fp"),s(", 读取对象, 即一个具有 "),n("code",null,"read()"),s(" 方法的对象, 如"),n("a",{href:"#%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C"},"文件对象")],-1),Z=n("li",null,[n("code",null,"json.loads(data)"),s(" 以字符串形式导入数据 "),n("ul",null,[n("li",null,[n("code",null,"data"),s(" json 文件的字符串")]),n("li",null,"返回 json 解析结果")])],-1),$=t(`<p>示例代码</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> json
<span class="token comment"># 导出</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.json&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>
    text <span class="token operator">=</span> json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>data<span class="token punctuation">,</span> f<span class="token punctuation">)</span>
<span class="token comment"># 导入</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.json&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    data <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="yaml" tabindex="-1"><a class="header-anchor" href="#yaml" aria-hidden="true">#</a> YAML</h3>`,3),G=n("li",null,[s("使用时需要导入包 "),n("code",null,"yaml"),s(" (需要安装包 "),n("code",null,"pyYAML"),s(")")],-1),J=n("code",null,"yaml.dump(data, stream)",-1),U=n("code",null,"data",-1),W=n("code",null,"__dict__",-1),X=n("li",null,[n("code",null,"stream"),s(", 读取对象 "),n("ul",null,[n("li",null,[s("可以是一个具有 "),n("code",null,"write()"),s(" 方法的对象, 如"),n("a",{href:"#%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C"},"文件对象")]),n("li",null,[s("也可以是字符串变量 (需要确保字符串已经声明, 如 "),n("code",null,'text = ""'),s(")")])])],-1),nn=n("code",null,"yaml.load(stream, loader)",-1),sn=t('<li><code>stream</code>, 读取对象 <ul><li>可以是一个具有 <code>read()</code> 方法的对象, 如<a href="#%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C">文件对象</a></li><li>也可以是字符串</li></ul></li><li><code>loader</code> 导入器 <ul><li><code>yaml.BaseLoader</code> 基础导入器, 仅支持最基础的 YAML 语法</li><li><code>yaml.FullLoader</code> 完整导入器, 支持所有 YAML 语法</li><li><code>yaml.SafeLoader</code> 安全导入器, 用于导入不信任的文件</li></ul></li>',2),an=t(`<p>示例代码</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> yaml
<span class="token comment"># 导出</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.yaml&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>
    text <span class="token operator">=</span> yaml<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>data<span class="token punctuation">,</span> f<span class="token punctuation">)</span>
<span class="token comment"># 导入</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.yaml&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    data <span class="token operator">=</span> yaml<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">,</span> yaml<span class="token punctuation">.</span>FullLoader<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="toml" tabindex="-1"><a class="header-anchor" href="#toml" aria-hidden="true">#</a> TOML</h3>`,3),en=n("li",null,[s("使用时 "),n("ul",null,[n("li",null,[s("对于 Python3.11 及之后的版本, 使用模块 "),n("code",null,"tomllib"),s(" (不需要安装)")]),n("li",null,[s("对于 Python3.11 之前的版本, 使用模块 "),n("code",null,"tomli"),s(" (需要安装, 类似但此处不介绍)")])])],-1),on=n("code",null,"tomli.load(fp)",-1),tn=n("li",null,[n("code",null,"fp"),s(", 读取对象, 即一个具有 "),n("code",null,"read()"),s(" 方法的对象, 如"),n("a",{href:"#%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C"},"文件对象")],-1),ln=n("li",null,[n("code",null,"tomli.loads(s)"),s(" 以字符串形式导入数据 "),n("ul",null,[n("li",null,[n("code",null,"data"),s(" json 文件的字符串")]),n("li",null,"返回 tomli 解析结果")])],-1),cn=n("li",null,"由于 TOML 一般为只读的, 因此不具备导出功能",-1),pn={href:"https://pypi.org/project/tomli-w/",target:"_blank",rel:"noopener noreferrer"},dn=t(`<p>实例代码</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> tomllib
<span class="token comment"># 注意 TOML 应当以 rb 模式读取文件</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;test.toml&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    data <span class="token operator">=</span> tomllib<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多线程" tabindex="-1"><a class="header-anchor" href="#多线程" aria-hidden="true">#</a> 多线程</h2>`,3),un={href:"https://www.cnblogs.com/guyuyun/p/11185832.html",target:"_blank",rel:"noopener noreferrer"},rn=n("br",null,null,-1),kn=n("code",null,"threading",-1),hn=t('<h3 id="多线程创建" tabindex="-1"><a class="header-anchor" href="#多线程创建" aria-hidden="true">#</a> 多线程创建</h3><h4 id="通过线程对象" tabindex="-1"><a class="header-anchor" href="#通过线程对象" aria-hidden="true">#</a> 通过线程对象</h4><p>创建线程前, 需要先创建一个线程对象, 明确线程执行的内容<br><code>threading.Thread(group = None, target = None, name = None, args = (), kwargs = {}, *, daemon = None)</code></p><ul><li><code>group</code> 一般设置为 <code>None</code> 即可</li><li><code>target</code> 线程执行的任务, 为一个函数</li><li><code>name</code> 线程的名称, 默认为 <code>Thread-N</code>, <code>N</code> 为十位数编号</li><li><code>args</code> 传递给线程函数的位置参数</li><li><code>kwargs</code> 传递给线程函数的关键字参数</li><li><code>daemon</code> 线程是否为守护模式 <ul><li>如果传入 <code>None</code> 将继承当前线程的模式, 对于主线程为非守护线程, 否则将设置为守护模式</li><li>非守护模式下, 当主线程退出后, 仍将运行, 直到所有线程退出时, Python 程序才会结束</li><li>在守护模式下, 当所有非守护线程退出后, 将强制退出, 可能导致其占用的资源没有正确释放</li></ul></li><li>线程对象创建后子线程并不会自动启动, 还需要通过 <code>start()</code> 方法启动线程</li></ul><p>通过对象的以下方法使用线程对象</p><ul><li>方法 <code>start()</code> 启动线程, 一个线程对象只能启动一次, 即使执行结束, 也不能再使用 <code>start</code> 重新启动</li><li>方法 <code>join(timeout = None)</code> 让当前线程 (通常即主线程) 等待线程运行结束 (必须保证线程已经启动) <ul><li><code>timeout</code> 等待时间</li></ul></li><li>方法 <code>is_alive()</code> 判断该线程是否仍在运行中, 仍在运行中返回 <code>True</code></li></ul><h4 id="通过线程对象子类" tabindex="-1"><a class="header-anchor" href="#通过线程对象子类" aria-hidden="true">#</a> 通过线程对象子类</h4><p>对于线程对象, 除了 <code>target</code> 参数传入任务, 还可通过继承 <code>threading.Thread</code> 类定义子任务类</p><p>继承 <code>threading.Thread</code> 类时注意</p>',9),mn=n("li",null,[s("必须给出虚方法 "),n("code",null,"run()"),s(" 的定义")],-1),_n=n("code",null,"target, args, kwargs",-1),vn=n("li",null,[s("类创建后, 依然需要通过 "),n("code",null,"start()"),s(" 方法启动线程")],-1),bn=t(`<p>例如以下代码</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> threading

<span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
    
    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;the name of task is </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    m <span class="token operator">=</span> MyThread<span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span>
    m<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="通过定时器对象" tabindex="-1"><a class="header-anchor" href="#通过定时器对象" aria-hidden="true">#</a> 通过定时器对象</h4><p>一般的多线程对象在线程任务执行结束后就会退出, 如果希望延迟执行任务, 则可使用定时器对象<br> 注意, 定时器对象只会在等待时间后执行一次任务, 定时执行任务可通过任务的 <code>while</code> 循环实现<br><code>threading.Timer(interval, function, args = None, kwargs = None)</code></p><ul><li><code>interval</code> 等待执行任务的时间, 单位秒</li><li><code>function</code> 线程执行的任务, 为一个函数</li><li><code>args</code> 传递给线程函数的位置参数</li><li><code>kwargs</code> 传递给线程函数的关键字参数</li></ul><p>通过对象的以下方法使用定时器对象</p><ul><li>该对象为<a href="#%E9%80%9A%E8%BF%87%E7%BA%BF%E7%A8%8B%E5%AF%B9%E8%B1%A1">线程对象</a>的子类, 因此基本方法与之相同</li><li><code>Timer.cancel()</code> 如果定时器在等待任务开始, 则停止该任务</li></ul><h3 id="多线程资源管理" tabindex="-1"><a class="header-anchor" href="#多线程资源管理" aria-hidden="true">#</a> 多线程资源管理</h3>`,8),gn={href:"https://docs.python.org/zh-cn/3/library/threading.html#module-threading",target:"_blank",rel:"noopener noreferrer"},fn=t('<h4 id="互斥量" tabindex="-1"><a class="header-anchor" href="#互斥量" aria-hidden="true">#</a> 互斥量</h4><p>虽然 Python 存在 GIL (全局解释器锁), 无法实现真正意义上的并发, 但依然可能存在资源竞争问题</p><p>例如当两个线程同时访问全局变量 <code>i</code>, 并执行 <code>i += 1</code>, 虽然该语句仅有一行, 但底层将分为 <code>tmp = i + 1</code> 与 <code>i = tmp</code> 两步</p><ul><li>当线程 1 运行到 <code>i = tmp</code>, 线程 2 运行到 <code>tmp = i + 1</code>, 此时线程 2 使用的是未经线程 1 运算的 <code>i</code></li><li>之后线程 2 运行 <code>i = tmp</code>, 线程 1 的运算将被覆盖</li></ul><p>对于每个全局变量或成员变量, 应该使用一个互斥量管理, 以防止资源竞争<br> 在访问资源前对其上锁, 在访问结束后解锁, 保证同时只有一个线程使用该资源</p><p>互斥量类构造函数 <code>threading.Lock()</code> 创建互斥量</p><ul><li>互斥量通常作为全局变量或成员变量</li></ul><p>通过互斥量的方法管理互斥量</p><ul><li><code>acquire(blocking = True, timeout = -1)</code> 对互斥量上锁 <ul><li><code>blocking</code> 是否阻塞程序直到互斥量解锁</li><li><code>timeout</code> 最多阻塞时长 <ul><li><code>-1</code> 表示不断阻塞, 直到成功上锁</li><li>正浮点数, 表示阻塞指定时长, 单位秒</li></ul></li><li>如果互斥量上锁失败将放弃并返回 <code>False</code>, 否则返回 <code>True</code></li></ul></li><li><code>release()</code> 对互斥量解锁 <ul><li>Python 中, 非上锁线程也可以解锁互斥量</li><li>如果互斥量已经解锁将出现异常</li></ul></li><li><code>locked()</code> 获取互斥量是否被上锁</li></ul><p>使用互斥量时也要注意死锁问题, 主要是</p><ul><li>互斥量上锁后没有解锁</li><li>同时对多个互斥量上锁</li></ul>',11),yn=n("br",null,null,-1),En=t(`<ul><li>进入 <code>with</code> 语句内的代码段前, 将对互斥量上锁</li><li><code>with</code> 语句内的代码无论因何退出, 都将保证解锁, 防止由于没有解锁导致的死锁</li><li>建议使用此方法使用互斥量, 而不是互斥量的方法</li></ul><p>例如以下例子</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>glob_val <span class="token operator">=</span> <span class="token number">0</span>
glob_val_mtx <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;task start&quot;</span><span class="token punctuation">)</span>

    <span class="token comment"># 仅在使用到资源时上锁</span>
    <span class="token keyword">with</span> glob_val_mtx<span class="token punctuation">:</span>
        <span class="token keyword">nonlocal</span> i
        i <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;task over&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="条件变量" tabindex="-1"><a class="header-anchor" href="#条件变量" aria-hidden="true">#</a> 条件变量</h4><p>假设使用多个消费者线程共同从队列中等待数据, 并使用 <code>while</code> 阻塞等待条件, 此时</p><ul><li>如果仅插入一个数据, 多个线程可能同时启动, 导致部分线程读取了空队列而出错</li><li>同时使用 <code>while</code> 阻塞等待效率较低</li></ul><p>可通过条件变脸解决此问题</p><ul><li>条件变量用于暂时阻塞线程并等待其他线程通知 (给出条件变量), 从而解开阻塞</li><li>条件变量被给出一次时, 同时只会有一个线程能够启动, 避免了同时读取</li><li>条件变量的阻塞将降低线程优先级, 效率较高</li></ul><p>互斥量类构造函数 <code>threading.Condition()</code></p><ul><li>条件变量需要与对应的等待条件组合使用, 当等待条件改变的同时切换条件量</li><li>条件变量通常作为全局变量或等待条件所在类的成员变量</li><li>一个条件变量可以被多个接收者等待, 也可以被多个通知者通知</li></ul><p>对于通知者</p><ul><li>方法 <code>notify(n = 1)</code> 唤醒 <code>n</code> 个接收者</li><li>方法 <code>notify_all()</code> 唤醒所有接收者</li></ul><p>对于接收者</p><ul><li>方法 <code>wait(timeout = None)</code> 阻塞等待其他线程给出条件变量 <ul><li><code>timeout</code> 如果参数为正浮点数, 则仅阻塞等待 <code>timeout</code> 秒, 否则不断阻塞</li></ul></li><li>方法 <code>wait_for(predicate, timeout = None)</code> 阻塞等待其他线程给出条件变量, 或等待条件变为 <code>True</code><ul><li><code>predicate</code> 返回布尔值的等待条件函数</li><li><code>timeout</code> 同 <code>wait()</code> 的 <code>timeout</code> 参数</li></ul></li></ul><p>使用条件变量时注意</p><ul><li>条件变量底层使用了<a href="#%E4%BA%92%E6%96%A5%E9%87%8F">互斥量</a>管理, 仅当底层的互斥量上锁时可以操作</li><li>通过同名的 <code>acquire()</code> 与 <code>release()</code> 方法, 以及 <code>with</code> 语句 (推荐) 可以管理底层的互斥量</li><li>接收者在等待开始时立刻解锁, 不需要担心接收者阻塞等待导致死锁</li></ul><p>条件变量使用示例如下</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> threading

<span class="token comment"># 使用事件对象, 向循环子程序通知主程序退出</span>
ent_mainexit <span class="token operator">=</span> threading<span class="token punctuation">.</span>Event<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">ObservedList</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>lt <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>cdt_lt_empty <span class="token operator">=</span> threading<span class="token punctuation">.</span>Condition<span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token keyword">pass</span>

    <span class="token keyword">def</span> <span class="token function">is_not_empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>lt<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span>
    
    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 当数据插入时, 表明列表不为空的条件满足, 给出条件量</span>
        <span class="token keyword">with</span> self<span class="token punctuation">.</span>cdt_lt_empty<span class="token punctuation">:</span>
            <span class="token comment"># 先插入再给出条件量</span>
            self<span class="token punctuation">.</span>lt<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>cdt_lt_empty<span class="token punctuation">.</span>notify<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 循环从列表中读取数据并处理</span>
<span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span>mark<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> obs<span class="token punctuation">:</span> ObservedList<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;task </span><span class="token interpolation"><span class="token punctuation">{</span>mark<span class="token punctuation">}</span></span><span class="token string"> start&quot;</span></span><span class="token punctuation">)</span>

    <span class="token comment"># 结束条件1: 通过事件检测主线程是否退出</span>
    <span class="token comment"># 结束条件2: 队列处理完成</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">not</span> ent_mainexit<span class="token punctuation">.</span>is_set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">or</span> obs<span class="token punctuation">.</span>is_not_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 通过条件变量, 等待列表不为空的条件为 True</span>
        <span class="token keyword">with</span> obs<span class="token punctuation">.</span>cdt_lt_empty<span class="token punctuation">:</span>
            obs<span class="token punctuation">.</span>cdt_lt_empty<span class="token punctuation">.</span>wait_for<span class="token punctuation">(</span>obs<span class="token punctuation">.</span>is_not_empty<span class="token punctuation">)</span>
        
        <span class="token comment"># 等待结束后即可读取与处理数据</span>
        item <span class="token operator">=</span> obs<span class="token punctuation">.</span>lt<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;task </span><span class="token interpolation"><span class="token punctuation">{</span>mark<span class="token punctuation">}</span></span><span class="token string"> receive: </span><span class="token interpolation"><span class="token punctuation">{</span>item<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;task </span><span class="token interpolation"><span class="token punctuation">{</span>mark<span class="token punctuation">}</span></span><span class="token string"> exit&quot;</span></span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        ol <span class="token operator">=</span> ObservedList<span class="token punctuation">(</span><span class="token punctuation">)</span>
        tl <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

        <span class="token comment"># 程序向队列中插入数据, 并由三个并行任务处理</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            tl<span class="token punctuation">.</span>append<span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target <span class="token operator">=</span> task<span class="token punctuation">,</span> args <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> ol<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            tl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
        
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            ol<span class="token punctuation">.</span>push<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token keyword">finally</span><span class="token punctuation">:</span>
        <span class="token comment"># 通过 try - finally 语句, 保证主程序结束事件总能在主程序退出时被发出</span>
        ent_mainexit<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意</p>`,19),wn={href:"https://docs.python.org/zh-cn/3/library/threading.html#event-objects",target:"_blank",rel:"noopener noreferrer"},Bn=n("li",null,[s("实际上可使用"),n("a",{href:"#%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97"},"消息队列"),s("实现更高效的数据交换, 而不需要条件变量")],-1),xn=n("h4",{id:"消息队列",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#消息队列","aria-hidden":"true"},"#"),s(" 消息队列")],-1),An={href:"https://docs.python.org/zh-cn/3/library/queue.html#module-queue",target:"_blank",rel:"noopener noreferrer"},qn=t(`<p>消息队列位于通过内置模块 <code>&lt;queue&gt;</code> 中<br> Python 中的消息队列能够安全的在不同线程之间交换数据, 而不需要<a href="#%E4%BA%92%E6%96%A5%E9%87%8F">互斥量</a>与<a href="#%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8F">条件变量</a>保护<br> 可以用于快速开发生产者-消费者模型的多线程应用</p><p>消息队列构造函数 <code>queue.Queue(maxsize = 0)</code></p><ul><li><code>maxsize</code> 消息队列内项目最大值, 如果传入 <code>0</code> 表示无限制</li></ul><p>消息队列方法</p><ul><li><code>empty()</code> 获取消息队列是否为空</li><li><code>full()</code> 获取消息队列是否为满</li><li><code>put(item, block = True, timeout = None)</code> 向消息队列插入数据 <ul><li><code>item</code> 插入值, 对类型没有要求</li><li><code>block</code> 如果队列已满, 是否阻塞等待</li><li><code>timeout</code> 传入整数表示等待时长单位秒, 否则将不断等待</li><li>如果插入失败, 将触发 <code>queue.Full</code> 异常</li></ul></li><li><code>get(block = True, timeout = None)</code> 向消息队列读取数据 <ul><li><code>block</code> 如果队列已满, 是否阻塞等待</li><li><code>timeout</code> 传入整数表示等待时长单位秒, 否则将不断等待</li><li>如果读取失败, 将触发 <code>queue.Empty</code> 异常</li></ul></li></ul><p>通过消息队列改进<a href="#%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8F">此处示例</a></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> threading
<span class="token keyword">import</span> queue

ent_mainexit <span class="token operator">=</span> threading<span class="token punctuation">.</span>Event<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span>mark<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> obs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;task </span><span class="token interpolation"><span class="token punctuation">{</span>mark<span class="token punctuation">}</span></span><span class="token string"> start&quot;</span></span><span class="token punctuation">)</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">not</span> ent_mainexit<span class="token punctuation">.</span>is_set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token keyword">not</span> obs<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        item <span class="token operator">=</span> obs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;task </span><span class="token interpolation"><span class="token punctuation">{</span>mark<span class="token punctuation">}</span></span><span class="token string"> receive: </span><span class="token interpolation"><span class="token punctuation">{</span>item<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;task </span><span class="token interpolation"><span class="token punctuation">{</span>mark<span class="token punctuation">}</span></span><span class="token string"> exit&quot;</span></span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        ol <span class="token operator">=</span> queue<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>
        tl <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            tl<span class="token punctuation">.</span>append<span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target <span class="token operator">=</span> task<span class="token punctuation">,</span> args <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> ol<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            tl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
        
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            ol<span class="token punctuation">.</span>put<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token keyword">finally</span><span class="token punctuation">:</span>
        ent_mainexit<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式" aria-hidden="true">#</a> 正则表达式</h2>`,8),Nn={href:"https://docs.python.org/zh-cn/3/library/re.html#module-re",target:"_blank",rel:"noopener noreferrer"},Fn=n("code",null,"re",-1),Tn=n("br",null,null,-1),Dn=n("h3",{id:"正则对象",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#正则对象","aria-hidden":"true"},"#"),s(" 正则对象")],-1),Cn=n("p",null,[s("模块方法 "),n("code",null,"re.compile(pattern, flags = 0)"),s(" 编译正则表达式")],-1),jn=n("code",null,"pattern",-1),Ln=n("code",null,"r",-1),Pn=n("code",null,"\\",-1),zn=n("code",null,"flags",-1),Sn=n("code",null,"|",-1),Mn=t('<ul><li><code>re.I</code> 相当于修饰符 <code>i</code></li><li><code>re.M</code> 相当于修饰符 <code>m</code></li><li><code>re.S</code> 相当于修饰符 <code>s</code></li><li>修饰符 <code>g</code> 通过<a href="#%E5%A4%9A%E6%AC%A1%E5%8C%B9%E9%85%8D">多次匹配</a></li></ul>',1),On=n("li",null,[s("该方法将返回编译完的正则表达式对象 "),n("code",null,"re.Pattern"),s(", 通过该对象的方法实现匹配")],-1),Vn=n("h3",{id:"单次匹配与提取",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#单次匹配与提取","aria-hidden":"true"},"#"),s(" 单次匹配与提取")],-1),Yn=n("code",null,"g",-1),Hn=n("br",null,null,-1),In=n("br",null,null,-1),Kn=n("a",{href:"#%E5%A4%9A%E6%AC%A1%E5%8C%B9%E9%85%8D"},"多次匹配",-1),Rn=t('<p>正则对象方法 <code>Pattern.search(string)</code> 匹配<mark>第一个满足要求</mark>的字符串</p><ul><li><code>string</code> 被匹配的文本内容字符串</li><li>当存在匹配的子字符串时, 返回<a href="#%E5%8C%B9%E9%85%8D%E5%AF%B9%E8%B1%A1">匹配对象</a>, <mark>否则返回 <code>None</code></mark>, 可通过判断结果是否为 <code>None</code> 检查文本内容是否满足要求</li><li>类似有方法 <code>Pattern.match(string)</code> <mark>从开头开始</mark>匹配第一个满足要求的字符串, 相当于在正则表达式加上元字符 <code>^</code></li><li>类似有方法 <code>Pattern.fullmatch(string)</code> 要求<mark>整个字符串都匹配</mark>, 相当于在正则表达式加上元字符 <code>^, $</code></li></ul><p>匹配对象为类 <code>re.Match</code>, 通常作为以上介绍单次匹配方法的返回值</p>',3),Qn=n("li",null,[s("通过 "),n("code",null,"[n]"),s(" 运算符访问第 "),n("code",null,"n"),s(" 个位置的选择内容, 索引 "),n("code",null,"0"),s(" 为整个被匹配的子字符串")],-1),Zn=n("code",null,"(?P<name>)",-1),$n=n("ul",null,[n("li",null,[s("例如正则表达式 "),n("code",null,"(?P<first_name>\\w+) (?P<last_name>\\w+)"),s(" 中, 匹配结果 "),n("code",null,"res[1]"),s(" 还可通过 "),n("code",null,'res["first_name"]'),s(" 访问")])],-1),Gn=t('<h3 id="多次匹配" tabindex="-1"><a class="header-anchor" href="#多次匹配" aria-hidden="true">#</a> 多次匹配</h3><p>正则对象方法 <code>Pattern.findall(string)</code> 直接寻找所有不重叠的满足要求的子字符串</p><ul><li><code>string</code> 用于匹配的文本内容字符串</li><li>返回值为一个列表 <ul><li>如果没有内容选择, 返回值即一个字符串列表</li><li>如果由内容选择, 返回值为元组列表, 元组上各个索引的元素对应了各个位置的选择内容 (不包含原始字符串)</li></ul></li></ul><p>正则对象方法 <code>Pattern.finditer(string)</code> 迭代寻找所有不重叠的满足要求的子字符串</p><ul><li><code>string</code> 用于匹配的文本内容字符串</li><li>返回值为一个迭代器, 每次迭代都将返回一个<a href="#%E5%8D%95%E6%AC%A1%E5%8C%B9%E9%85%8D%E4%B8%8E%E6%8F%90%E5%8F%96">匹配对象</a>, 可通过 <code>for</code> 循环遍历所有匹配结果</li><li>迭代时, 将从左到右扫描匹配</li></ul><h3 id="其他字符串操作" tabindex="-1"><a class="header-anchor" href="#其他字符串操作" aria-hidden="true">#</a> 其他字符串操作</h3><p>正则对象方法 <code>Pattern.sub(repl, string, count = 0)</code> 根据正则表达式与替换模板替换文本内容</p>',7),Jn=n("code",null,"repl",-1),Un=n("li",null,[s("与正则表达式不同, 替换模板使用 "),n("code",null,"\\"),s(" 加数字表示选择内容的索引, 而不是 "),n("code",null,"$")],-1),Wn=n("li",null,[s("模板中的如 "),n("code",null,"\\n"),s(" 等转义依然能发挥作用, 如 "),n("code",null,'r"\\n"'),s(" 经过该函数后将被转义")],-1),Xn=n("code",null,"r",-1),ns=n("li",null,[n("code",null,"string"),s(" 被用于替换的文本内容")],-1),ss=n("li",null,[n("code",null,"count"),s(" 替换次数 "),n("ul",null,[n("li",null,"当为正整数时, 将从左向右不重叠的替换有限个匹配子字符串"),n("li",null,"其他情况下将替换所有可能的匹配子字符串")])],-1),as=n("li",null,"返回值为替换后的字符串, 当替换没有发生将返回原字符串",-1);function es(os,ts){const l=i("ExternalLinkIcon"),e=i("RouterLink");return p(),d("div",null,[r,k,n("p",null,[s("参考自 "),n("a",h,[s("https://www.bilibili.com/video/BV1bZ4y1B7vT"),a(l)])]),m,n("p",null,[n("a",_,[s("https://docs.python.org/zh-cn/3/howto/argparse.html#argparse-tutorial"),a(l)])]),v,n("ul",null,[b,g,n("li",null,[f,s(" 将时间结构体格式化为字符串 "),n("ul",null,[n("li",null,[y,s(" 为格式化字符串, "),E,s(),w,s(),B,s(),x,s(),A,s(),q,s(" 分别表示年月日时分秒, 更多参考 "),n("a",N,[s("https://docs.python.org/3/library/time.html#time.strftime"),a(l)])]),F])])]),T,n("ul",null,[D,n("li",null,[s("返回值为一个文件对象, 可以配合 "),a(e,{to:"/coding/py/base/base.html#%E9%A2%84%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86"},{default:o(()=>[s("with")]),_:1}),s(" 语句使用, 推荐的打开文件代码如下")])]),C,n("ul",null,[j,n("li",null,[L,s(" 读取指定长度的文件内容 "),n("ul",null,[P,n("li",null,[s("按文本读取时, 函数返回一个字符串; 以二进制方式读取时, 函数返回一个 "),a(e,{to:"/coding/py/base/base.html#bytes-%E5%AF%B9%E8%B1%A1"},{default:o(()=>[s("bytes 对象")]),_:1})])])]),z]),S,n("p",null,[s("介绍"),a(e,{to:"/coding/random/textdata.html"},{default:o(()=>[s("文本数据存储语言")]),_:1}),s("的存取与二进制数据的存取")]),M,n("ul",null,[O,n("li",null,[s("数据导出 "),n("ul",null,[n("li",null,[V,s(" 将数据导出到可写对象 "),n("ul",null,[n("li",null,[Y,s(" 被导出的数据, 只能导出"),a(e,{to:"/coding/py/base/base.html#%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%AE%B9%E5%99%A8"},{default:o(()=>[s("基本类型")]),_:1}),s(", 对于对象可使用 "),a(e,{to:"/coding/py/base/base.html#%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8"},{default:o(()=>[H,s(" 属性")]),_:1}),s("转换为字典")]),I])]),K])]),n("li",null,[s("数据导入 "),n("ul",null,[n("li",null,[R,s(" 将数据从可读对象导入 "),n("ul",null,[Q,n("li",null,[s("返回 json 解析结果, 一般为一个"),a(e,{to:"/coding/py/base/base.html#%E5%AD%97%E5%85%B8"},{default:o(()=>[s("字典")]),_:1})])])]),Z])])]),$,n("ul",null,[G,n("li",null,[s("数据导出 "),n("ul",null,[n("li",null,[J,s(" 将数据导出到可写对象 "),n("ul",null,[n("li",null,[U,s(" 被导出的数据, 建议对象可使用 "),a(e,{to:"/coding/py/base/base.html#%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8"},{default:o(()=>[W,s(" 属性")]),_:1}),s("转换为字典")]),X])])])]),n("li",null,[s("数据导入 "),n("ul",null,[n("li",null,[nn,s(" 将数据从可读对象导入 "),n("ul",null,[sn,n("li",null,[s("返回 yaml 解析结果, 一般为一个"),a(e,{to:"/coding/py/base/base.html#%E5%AD%97%E5%85%B8"},{default:o(()=>[s("字典")]),_:1})])])])])])]),an,n("ul",null,[en,n("li",null,[s("数据导入 "),n("ul",null,[n("li",null,[on,s(" 将数据从可读对象导入 "),n("ul",null,[tn,n("li",null,[s("返回 tomli 解析结果, 一般为一个"),a(e,{to:"/coding/py/base/base.html#%E5%AD%97%E5%85%B8"},{default:o(()=>[s("字典")]),_:1})])])]),ln])]),n("li",null,[s("数据导出 "),n("ul",null,[cn,n("li",null,[s("如果要导出, 参考模块 "),n("a",pn,[s("tomli-w"),a(l)])])])])]),dn,n("p",null,[s("参考 "),n("a",un,[s("https://www.cnblogs.com/guyuyun/p/11185832.html"),a(l)]),rn,s(" 通过 Python 的内置模块 "),kn,s(" 实现多线程")]),hn,n("ul",null,[mn,n("li",null,[s("只能重载构造函数, 并且需要"),a(e,{to:"/coding/py/base/base.html#%E8%AE%BF%E9%97%AE%E7%88%B6%E7%B1%BB"},{default:o(()=>[s("调用父类的构造函数")]),_:1}),s(" (不需要传入 "),_n,s(" 参数)")]),vn]),bn,n("p",null,[s("此处仅介绍部分资源管理方法, 其他管理方法参见"),n("a",gn,[s("文档"),a(l)])]),fn,n("p",null,[s("Python 中没有 C++ 的 "),a(e,{to:"/coding/cpp/library.html#%E6%9C%AA%E8%A7%A3%E9%94%81%E5%AF%BC%E8%87%B4%E7%9A%84%E6%AD%BB%E9%94%81"},{default:o(()=>[s("lock_guard")]),_:1}),yn,s(" 可使用 "),a(e,{to:"/coding/py/base/base.html#%E9%A2%84%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86"},{default:o(()=>[s("with 语句")]),_:1})]),En,n("ul",null,[n("li",null,[s("以上示例还使用了事件对象 "),n("a",wn,[s("threading.Event"),a(l)]),s(", 并且展示了其通常应用 (通知循环进程关闭)")]),Bn]),xn,n("p",null,[s("参考 "),n("a",An,[s("https://docs.python.org/zh-cn/3/library/queue.html#module-queue"),a(l)])]),qn,n("p",null,[s("参考 "),n("a",Nn,[s("https://docs.python.org/zh-cn/3/library/re.html#module-re"),a(l)])]),n("p",null,[s("Python 中通过内置模块 "),Fn,s(" 引入与正则表达式相关的功能"),Tn,s(" 关于正则表达式的使用参见"),a(e,{to:"/coding/random/regex.html"},{default:o(()=>[s("笔记")]),_:1})]),Dn,Cn,n("ul",null,[n("li",null,[jn,s(" 字符串, 即正则表达式, 一般使用 "),Ln,s(" 为前缀表示"),a(e,{to:"/coding/py/base/base.html#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%A8%E7%A4%BA"},{default:o(()=>[s("不转义字符串")]),_:1}),s(", 避免元字符 "),Pn,s(" 导致的混乱")]),n("li",null,[zn,s(" 正则表达式的"),a(e,{to:"/coding/random/regex.html#%E4%BF%AE%E9%A5%B0%E7%AC%A6"},{default:o(()=>[s("修饰符")]),_:1}),s(", 使用模块下的常量表示, 可通过或运算 "),Sn,s(" 组合 "),Mn]),On]),Vn,n("p",null,[s("以下为单次匹配方法, 即没有修饰符 "),Yn,s(" 的匹配"),Hn,s(" 虽然无法匹配所有结果, 但可以在结果中"),a(e,{to:"/coding/random/regex.html#%E6%8F%90%E5%8F%96%E9%80%89%E6%8B%A9%E5%86%85%E5%AE%B9"},{default:o(()=>[s("提取选择内容")]),_:1}),In,s(" 如果希望多次匹配并分别提取结果, 参见"),Kn]),Rn,n("ul",null,[Qn,n("li",null,[s("除了"),a(e,{to:"/coding/random/regex.html#%E6%8F%90%E5%8F%96%E9%80%89%E6%8B%A9%E5%86%85%E5%AE%B9"},{default:o(()=>[s("通用规则")]),_:1}),s(", 还支持使用 "),Zn,s(" 表示命名的选择内容, 并通过相应名称访问 "),$n])]),Gn,n("ul",null,[n("li",null,[Jn,s(" 替换模板, 通过字符串表示 (也可使用函数, 参见文档) "),n("ul",null,[Un,Wn,n("li",null,[s("因此一般使用 "),Xn,s(" 为前缀表示"),a(e,{to:"/coding/py/base/base.html#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%A8%E7%A4%BA"},{default:o(()=>[s("不转义字符串")]),_:1})])])]),ns,ss,as])])}const cs=c(u,[["render",es],["__file","module.html.vue"]]);export{cs as default};
