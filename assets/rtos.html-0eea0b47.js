import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as t,c,b as e,d as a,a as i,e as n}from"./app-8c5ce49e.js";const d="/noteverse/assets/task_schedule-98d70bd5.jpg",r="/noteverse/assets/queue_example-5f4fc13c.webp",p={},u=n(`<h1 id="cmsis-rtos-笔记" tabindex="-1"><a class="header-anchor" href="#cmsis-rtos-笔记" aria-hidden="true">#</a> CMSIS-RTOS 笔记</h1><h2 id="创建任务" tabindex="-1"><a class="header-anchor" href="#创建任务" aria-hidden="true">#</a> 创建任务</h2><h3 id="启用-rtos" tabindex="-1"><a class="header-anchor" href="#启用-rtos" aria-hidden="true">#</a> 启用 RTOS</h3><ol><li>在 Middleware -&gt; FreeRTOS 的选项卡中启用 RTOS</li><li>使用 CMSIS-RTOS V2 API</li><li>在 Tasks and Queues 选项卡中创建任务</li></ol><h3 id="配置任务属性" tabindex="-1"><a class="header-anchor" href="#配置任务属性" aria-hidden="true">#</a> 配置任务属性</h3><ol><li>Task Name: 设置任务的名称, 将基于此名字建立一个指向任务的句柄 <ul><li>任务句柄定义于 Core/Src/freertos.c 中</li></ul></li><li>Entry Function: 设置任务的函数名 <ul><li>注意任务函数名是否正确</li></ul></li><li>Priority: 设置任务的优先级, 高优先级的任务会抢占低优先级的任务</li><li>Stack Size: 设置任务栈的大小, 用于储存任务相关的变量</li><li>Allocation: 设置任务所在的地方, 选择动态的话是生成在堆中, 选择静态的话则生成在静态区</li><li>Parameter: 传递给任务的参数</li><li>Code Generation Option: 设置任务函数的生成方式 <ul><li>Default 在 Core/Src/freertos.c 中编辑任务函数</li><li>As weak 在其他 .c 文件中定义任务函数, 不需要声明</li><li>As extern 在 .cpp 文件中定义任务函数, 需要使用 <code>extern &quot;C&quot;</code> 包裹, 其余同 As weak</li></ul></li></ol><h3 id="定义任务函数" tabindex="-1"><a class="header-anchor" href="#定义任务函数" aria-hidden="true">#</a> 定义任务函数</h3><p>任务函数的基本格式如下</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 函数名即 Entry Function 中确定的名称</span>
<span class="token comment">// 任务函数要有参数 void *argument</span>
<span class="token keyword">void</span> <span class="token function">TaskFunction</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>argument<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 在一个死循环中执行任务内容</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token comment">// 一般使用 osDelay 完成延时功能</span>
        <span class="token function">osDelay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        
    <span class="token punctuation">}</span>
    <span class="token function">vTaskDelete</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更多有关内容见<a href="#%E4%BB%BB%E5%8A%A1%E5%9F%BA%E6%9C%AC%E6%A8%A1%E5%BC%8F">任务基本模式</a></p><h3 id="相关函数" tabindex="-1"><a class="header-anchor" href="#相关函数" aria-hidden="true">#</a> 相关函数</h3><ol><li><code>osDelay(uint32_t ticks)</code> 任务延时函数 <ul><li>参数 <code>ticks</code> 为等待的任务刻, 可通过参数配置中的 TICK_RATE_HZ 参数设置</li><li>该函数将使任务暂时挂起以之心其他任务</li></ul></li><li><code>osKernelStart()</code> 启动任务调度 <ul><li>在 CubeMX 中, 该函数已经在 main 函数中调用, 且在 while 循环之前</li></ul></li></ol><h3 id="查看任务堆栈占用情况" tabindex="-1"><a class="header-anchor" href="#查看任务堆栈占用情况" aria-hidden="true">#</a> 查看任务堆栈占用情况</h3><ol><li>一个任务包含Stack区 (用于储存任务相关的变量) 和任务控制块TCB区 (Task Control Block, 用于储存任务本身的设置)</li><li>FreeRTOS Heap Usage 选项卡中, 可以查看堆栈使用情况</li><li>任务占用字节数 = TCB_size + (4 x Task stack size)</li></ol><h2 id="内存管理" tabindex="-1"><a class="header-anchor" href="#内存管理" aria-hidden="true">#</a> 内存管理</h2><h3 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h3><ol><li>栈 (stack): 由编译器自动分配和释放, 如存放函数的参数值, 局部变量的值</li><li>堆 (heap): 一般由程序员分配和释放, 通过 new / delete 控制, 位于 SRAM 上</li></ol><h3 id="任务分配空间" tabindex="-1"><a class="header-anchor" href="#任务分配空间" aria-hidden="true">#</a> 任务分配空间</h3><ol><li>当调用 FreeRTOS 的创建任务 API 函数 xTaskCreate() 时, FreeRTOS会在堆中开辟出一块空间, 用于存放任务的控制信息 TCB 块和栈区 Stack 用于储存任务相关的变量</li><li>TCB 块的大小取决于 FreeRTOSConfig.h 头文件中的设置 <ol><li>在最小的设置下TCB块的大小是 96 字节</li><li>如果 configUSE_TASK_NOTIFICATIONS 是1的话再增加8个字节</li><li>如果 configUSE_TRACE_FACILITY 是1的话再增加8个字节</li><li>如果 configUSE_MUTEXES 是1的话再增加8个字节</li></ol></li></ol><h3 id="msp-和-psp-栈指针" tabindex="-1"><a class="header-anchor" href="#msp-和-psp-栈指针" aria-hidden="true">#</a> MSP 和 PSP 栈指针</h3><h4 id="msp-指针" tabindex="-1"><a class="header-anchor" href="#msp-指针" aria-hidden="true">#</a> MSP 指针</h4><ul><li>主堆栈指针 (Main stack pointer)</li><li>用于操作内核以及处理异常和中断</li><li>由编译器分配</li></ul><h4 id="psp-指针" tabindex="-1"><a class="header-anchor" href="#psp-指针" aria-hidden="true">#</a> PSP 指针</h4><ul><li>用于每个任务的独立的栈指针, 用于用户的任务</li><li>在任务调度上下文切换 (context switch) 中，PSP 会初始化为相对应的任务的栈指针，如下图所示</li></ul><h3 id="内存池分配" tabindex="-1"><a class="header-anchor" href="#内存池分配" aria-hidden="true">#</a> 内存池分配</h3>`,25),h=n("<li>当 FreeRTOS 需要 RAM 的时候，它会调用 <code>pvPortMalloc</code> 这个函数而不是 malloc 这个系统函数</li><li>当它需要释放内存的时候，会调用 <code>vPortFree</code> 这个函数而不是 free 这个系统函数</li><li>FreeRTOS 提供了五个 <code>pvPortMalloc</code> 和 <code>vPortFree</code> 的实现方案</li><li>可以在 CubeMX 中, FreeRTOS -&gt; Config Parameters -&gt; Memory Management Setting 中设置</li>",4),k={href:"https://blog.csdn.net/qq_34269632/article/details/115618386",target:"_blank",rel:"noopener noreferrer"},v=n(`<h4 id="分配方案" tabindex="-1"><a class="header-anchor" href="#分配方案" aria-hidden="true">#</a> 分配方案</h4><ol><li>Heap_1 适用于小型的嵌入式系统<br> 只能在调度器启动之前创建任务和其它内核对象, 之后任务的内存分配在程序的运行周期中保持不变并且无法被释放</li><li>Heap_2 FreeRTOS 向旧版本兼容的方案<br> 不推荐使用</li><li>Heap_3 基于标准库<br> 使用标准库里的 malloc 和 free 函数，所以堆的大小由链接器配置决定, 使用场景不多</li><li>Heap_4 适用于通用的应用, 也是默认应用<br> 由一个数组表示堆, 并把数组分割成小的内存块, 堆的大小由 configTOTAL_HEAP_SIZE 定义</li><li>Heap_5 类似于Heap_4<br> Heap_5 可以用不同的数组空间对内存进行分配, 使用 vPortDefineHeapRegions 函数指定额外空间</li></ol><h3 id="内存管理函数" tabindex="-1"><a class="header-anchor" href="#内存管理函数" aria-hidden="true">#</a> 内存管理函数</h3><ol><li><code>void *pvPortMalloc(size_t xSize)</code> 申请内存空间 <ul><li>参数 <code>xSize</code> 为申请空间的字节数</li><li>申请成功时返回指向申请空间的指针</li><li>应使用该函数代替 malloc</li></ul></li><li><code>void vPortFree(void *pv)</code> 释放内存空间 <ul><li>参数 <code>pv</code> 为指向申请空间的指针</li><li>应使用该函数代替 free</li></ul></li><li><code>size_t xPortGetFreeHeapSize()</code> 获取堆中的剩余空间</li><li><code>size_t xPortGetMinimumEverFreeHeapSize()</code> 获取堆的最小剩余空间<br> 只能在 Heap_4 或者 Heap_5 下调用</li><li><code>void vApplicationMallocFailedHook()</code> 内存获取失败时调用的回调函数<br> 需要用户实现的回调函数</li></ol><h2 id="任务管理" tabindex="-1"><a class="header-anchor" href="#任务管理" aria-hidden="true">#</a> 任务管理</h2><h3 id="任务" tabindex="-1"><a class="header-anchor" href="#任务" aria-hidden="true">#</a> 任务</h3><p>在FreeRTOS中, 线程 (Thread) 和任务 (Task) 的概念是相同的, 每个任务就是一个线程</p><h3 id="任务基本模式" tabindex="-1"><a class="header-anchor" href="#任务基本模式" aria-hidden="true">#</a> 任务基本模式</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">TaskFunction</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token operator">*</span>pvParameters <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
    <span class="token function">vTaskDelete</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这个任务函数不能有返回值 (即使用 <code>return</code> 语句), 不然会导致异常</li><li>如果不需要这个任务的话, 必须要用语句显示地删除这个任务 (比如调用 <code>vTaskDelete()</code> 这个函数)</li><li>任务具有以下状态 <ol><li>就绪状态 (Ready)<br> 当任务没有被阻塞或者挂起等待运行的时候处于此状态</li><li>运行状态 (Running)<br> 当任务被内核调度执行的时候处于此状态</li><li>阻塞状态 (Blocked)<br> 当任务等待某个事件或信号的时候处于此状态</li><li>挂起状态 (Suspended)<br> 当任务被 vTaskSuspend() 函数禁止运行的时候处于此状态</li></ol></li></ul><figure><img src="`+d+'" alt="" tabindex="0"><figcaption></figcaption></figure><h3 id="调度器" tabindex="-1"><a class="header-anchor" href="#调度器" aria-hidden="true">#</a> 调度器</h3><ul><li>FreeRTOS 中采用了 round-robin 的调度算法, 包含抢占式 (preemptive) 和合作式 (cooperative) 两种模式</li><li>模式的选择由参数 <code>USE_PREEMPTION</code> 决定</li></ul><h4 id="抢占式模式" tabindex="-1"><a class="header-anchor" href="#抢占式模式" aria-hidden="true">#</a> 抢占式模式</h4><p>在抢占式模式下, 在每次调度器运行时, 高优先级的任务会被切换优先执行, 当前处于运行状态的低优先级的任务则会立刻进入就绪状态等待运行</p><h4 id="合作式模式" tabindex="-1"><a class="header-anchor" href="#合作式模式" aria-hidden="true">#</a> 合作式模式</h4><p>在合作式模式下, 高优先级任务不会抢占当前正在运行状态的低优先级任务, 直到低优先级任务进入以下状态才会切换任务</p><ol><li>完成进入阻塞状态 (比如调用 <code>osDelay()</code> 函数)</li><li>就绪状态 (比如调用 <code>osThreadYield()</code> 函数)</li><li>被系统置于挂起状态后</li></ol><h4 id="抢占式无时间片调度" tabindex="-1"><a class="header-anchor" href="#抢占式无时间片调度" aria-hidden="true">#</a> 抢占式无时间片调度</h4><ul><li>需要设置 <code>USE_TIME_SLICING</code> 以关闭时间片</li><li>这种调度方式下, 因为没有采取时间片, 所以调度器的执行开销会比较小</li><li>在抢占式无时间片调度下, 当前运行的任务会一直运行, 直到它进入阻塞或者挂起状态, 另一个相同优先级的任务才会运行</li></ul><h3 id="任务的调度" tabindex="-1"><a class="header-anchor" href="#任务的调度" aria-hidden="true">#</a> 任务的调度</h3><ul><li>FreeRTOS 对任务的调度采用基于时间片 (time slicing) 的方式</li><li>即把一段时间等分成了很多个时间段, 在每个时间片结束后, 进入内核调度任务, 保证优先级最高的任务能执行或使相同优先级的轮流使用每个时间段占用 CPU 资源</li><li>时间片的大小由参数 <code>TICK_RATE_HZ</code> 设置</li><li>因此, 在 FreeRTOS 内时间的最小单位是一个节拍 (tick), 延时函数 <code>vTaskDelayUntil</code> 和 <code>vTaskDelay</code> 的参数需要的是延时的节拍数, 不能直接设置延时时间</li><li>可以使用函数 <code>pdMS_TO_TICKS()</code> 将时间转为节拍数</li></ul><h3 id="空闲任务" tabindex="-1"><a class="header-anchor" href="#空闲任务" aria-hidden="true">#</a> 空闲任务</h3><ul><li>空闲任务是调度器在 <code>vTaskStartScheduler</code> 函数调用启动后自动创建的一个任务</li><li>空闲任务具有最低的优先级0, 当用户创建的任务都在阻塞状态或挂起状态时, 空闲任务便得以执行</li><li>最低的优先级确保空闲任务不会抢占用户任务, 同时空闲任务负责清理内核的资源</li><li>空闲任务可以绑定一个钩子任务 (Task Hook), 当空闲任务运行的时候钩子任务也会被自动调用</li><li>钩子任务的函数原型是 <code>vApplicationIdleHook(void)</code>, 可以由用户定义</li></ul><h2 id="队列管理" tabindex="-1"><a class="header-anchor" href="#队列管理" aria-hidden="true">#</a> 队列管理</h2><figure><img src="'+r+'" alt="" tabindex="0"><figcaption></figcaption></figure><h3 id="关于队列" tabindex="-1"><a class="header-anchor" href="#关于队列" aria-hidden="true">#</a> 关于队列</h3><h4 id="全局变量和弊端" tabindex="-1"><a class="header-anchor" href="#全局变量和弊端" aria-hidden="true">#</a> 全局变量和弊端</h4><ul><li>使用全局变量将导致线程不安全, 一种解决这个问题的方案就是采用队列</li><li>队列提供了一种任务间或者任务和中断间的通讯机制</li></ul><h4 id="队列" tabindex="-1"><a class="header-anchor" href="#队列" aria-hidden="true">#</a> 队列</h4><ul><li>队列是先进先出 FIFO (First In First Out), 先进先出表示的是先写入的数据会先被读取</li><li>队列中的数据必须是相同类型的, 可以是基本类型也可以是结构体</li><li>FreeRTOS 采用是复制队列的实现方式, 即写入队列的数据每个字节都被完整复制到队列, 不通过引用方式保存</li><li>如果使用指针管理队列, 可能指针的资源已被销毁, 但留在队列中导致错误</li><li>当一个任务试图从队列读取数据的时候, 它可以设置一个阻塞时间 (block time), 这是当队列数据为空时, 任务处于阻塞状态的时间, 当有数据在队列或者到达阻塞时间的时候，任务都会进入就绪状态</li><li><mark>将队列定义为全局变量, 各个任务通过队列传输数据</mark></li></ul><h3 id="队列操作方法" tabindex="-1"><a class="header-anchor" href="#队列操作方法" aria-hidden="true">#</a> 队列操作方法</h3>',32),m={href:"https://arm-software.github.io/CMSIS_5/RTOS2/html/group__CMSIS__RTOS__Message.html",target:"_blank",rel:"noopener noreferrer"},b=n(`<h4 id="创建队列" tabindex="-1"><a class="header-anchor" href="#创建队列" aria-hidden="true">#</a> 创建队列</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">osMessageQueueId_t</span> <span class="token function">osMessageQueueNew</span><span class="token punctuation">(</span>
    <span class="token class-name">uint32_t</span> msg_count<span class="token punctuation">,</span> 
    <span class="token class-name">uint32_t</span> msg_size<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> <span class="token class-name">osMessageQueueAttr_t</span> <span class="token operator">*</span>attr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>参数 <code>msg_count</code> 队列长度</li><li>参数 <code>msg_size</code> 队列单元大小<br> 单位为字节, 对于特定类型的单元, 使用 sizeof 计算即可</li><li>参数 <code>attr</code> 队列属性<br> 一般使用 <code>NULL</code> 即可</li><li>返回值为队列句柄, 当创建失败时返回 <code>NULL</code></li></ul><h4 id="读取数据" tabindex="-1"><a class="header-anchor" href="#读取数据" aria-hidden="true">#</a> 读取数据</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>osStatus_t <span class="token function">osMessageQueueGet</span><span class="token punctuation">(</span>
    osMessageQueueId_t mq_id<span class="token punctuation">,</span>
    <span class="token keyword">void</span> <span class="token operator">*</span> msg_ptr<span class="token punctuation">,</span>
    <span class="token keyword">uint8_t</span> <span class="token operator">*</span> msg_prio<span class="token punctuation">,</span>
    <span class="token keyword">uint32_t</span> timeout 
<span class="token punctuation">)</span>	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>参数 <code>mq_id</code> 队列句柄</li><li>参数 <code>msg_ptr</code> 单个数据保存位置指针</li><li>参数 <code>msg_prio</code> 优先数据指针, 一般为 <code>NULL</code> 即可</li><li>参数 <code>timeout</code> 读取等待事件 <ul><li>设置为 <code>0</code> 时, 可在中断函数中使用</li><li>设置为 <code>osWaitForever</code> 时, 可用于阻塞任务等待数据</li></ul></li></ul><h4 id="写入数据" tabindex="-1"><a class="header-anchor" href="#写入数据" aria-hidden="true">#</a> 写入数据</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>osStatus_t <span class="token function">osMessageQueuePut</span><span class="token punctuation">(</span>
    osMessageQueueId_t mq_id<span class="token punctuation">,</span>
    <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> msg_ptr<span class="token punctuation">,</span>
    <span class="token keyword">uint8_t</span> msg_prio<span class="token punctuation">,</span>
    <span class="token keyword">uint32_t</span> timeout 
<span class="token punctuation">)</span>	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>参数 <code>mq_id</code> 队列句柄</li><li>参数 <code>msg_ptr</code> 单个数据发送位置指针</li><li>参数 <code>msg_prio</code> 优先数据指针, 一般为 <code>NULL</code> 即可</li><li>参数 <code>timeout</code> 读取等待事件 <ul><li>设置为 <code>0</code> 时, 可在中断函数中使用</li><li>设置为 <code>osWaitForever</code> 时, 可用于阻塞任务等待数据</li></ul></li></ul><h2 id="错误排查与技巧" tabindex="-1"><a class="header-anchor" href="#错误排查与技巧" aria-hidden="true">#</a> 错误排查与技巧</h2><h3 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理" aria-hidden="true">#</a> 异常处理</h3><p>调用 <code>main.h</code> 中的 <code>Error_Handler()</code> 函数可强制进入错误状态</p><h3 id="pvportmalloc-申请失败" tabindex="-1"><a class="header-anchor" href="#pvportmalloc-申请失败" aria-hidden="true">#</a> pvPortMalloc 申请失败</h3><p>当进入错误状态 <code>Error_Handler</code> 时, 上层调用为 <code>pvPortMalloc</code><br> 可以在 FREERTO -&gt; Heap Usage 检查堆空间是否不足, 可通过调大参数 <code>TOTAL_HEAP_SIZE</code> 解决</p><h3 id="上电死机复位后正常" tabindex="-1"><a class="header-anchor" href="#上电死机复位后正常" aria-hidden="true">#</a> 上电死机复位后正常</h3>`,15),_={href:"https://blog.csdn.net/wevsa/article/details/25402805",target:"_blank",rel:"noopener noreferrer"},f=e("p",null,[a("在初始化前, 一般为 "),e("code",null,"USER CODE BEGIN Init"),a(" 前, 使用 "),e("code",null,"HAL_Delay"),a(" 添加一个短时间的延时 (通常为 100)")],-1);function g(S,T){const s=o("ExternalLinkIcon");return t(),c("div",null,[u,e("ul",null,[h,e("li",null,[a("由于通常的 free 与 malloc 不可使用, 在 C++ 中, 需要重载 new 与 delete, "),e("a",k,[a("参考"),i(s)])])]),v,e("p",null,[a("参考文档 "),e("a",m,[a("https://arm-software.github.io/CMSIS_5/RTOS2/html/group__CMSIS__RTOS__Message.html"),i(s)])]),b,e("p",null,[a("参考 "),e("a",_,[a("https://blog.csdn.net/wevsa/article/details/25402805"),i(s)])]),f])}const M=l(p,[["render",g],["__file","rtos.html.vue"]]);export{M as default};
