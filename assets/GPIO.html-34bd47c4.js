import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as i,f as s,e as a}from"./app-8c5ce49e.js";const d="/noteverse/assets/pull_up_down-436f755a.png",t="/noteverse/assets/push_pull-aa8207d4.png",l="/noteverse/assets/drain-7e9cddca.png",r="/noteverse/assets/line_and-46ea5d72.png",c={},p=a('<h1 id="通用输入输出-gpio" tabindex="-1"><a class="header-anchor" href="#通用输入输出-gpio" aria-hidden="true">#</a> 通用输入输出 GPIO</h1><h2 id="外设介绍" tabindex="-1"><a class="header-anchor" href="#外设介绍" aria-hidden="true">#</a> 外设介绍</h2><h3 id="电路理论" tabindex="-1"><a class="header-anchor" href="#电路理论" aria-hidden="true">#</a> 电路理论</h3>',3),o=a('<h4 id="基本部分" tabindex="-1"><a class="header-anchor" href="#基本部分" aria-hidden="true">#</a> 基本部分</h4><ol><li>电源 <ul><li>VCC：C=circuit 表示电路的意思, 即接入电路的电压</li><li>VDD：D=device 表示器件的意思, 即器件内部的工作电压;</li><li>VSS：S=series 表示公共连接的意思，通常指电路公共接地端电压</li></ul></li><li>接地 GUN</li></ol><h4 id="端口" tabindex="-1"><a class="header-anchor" href="#端口" aria-hidden="true">#</a> 端口</h4><p>电路中的高电平与低电平需要通过与电源或接地的连接体现 电源 =&gt; 端口 高电平 端口 =&gt; 接地 低电平 其他情况在电路中不允许出现</p><p>当端口与电源连接时, 端口视为与接地连接了一个阻止为无穷大的电阻 与接地连接时同</p><h4 id="上拉与下拉" tabindex="-1"><a class="header-anchor" href="#上拉与下拉" aria-hidden="true">#</a> 上拉与下拉</h4><figure><img src="'+d+'" alt="" tabindex="0"><figcaption></figcaption></figure><h5 id="上拉电路" tabindex="-1"><a class="header-anchor" href="#上拉电路" aria-hidden="true">#</a> 上拉电路</h5><div id="pullup_figure"></div><ol><li>开关断开时, 上拉电阻 R1 与 端口串联, 端口视为一个电压无限的的电阻, 因此上拉电阻分压为 0, 端口为高电平</li><li>开关闭合时, 端口与开关通路并联向接地, 端口电压与通路相同, 由于通路上电阻为零, 并联电路等效电阻即为 0, 即端口被短路, 为低电平</li></ol><ul><li>上拉电阻可以在开关闭合时分得电源向接地的电压 (上拉电阻与零电阻的端口并联电路串联)</li><li>开关另一侧不能有电阻, 否则开关闭合时, 端口不会短路, 产生未知电平</li></ul><h5 id="下拉电阻" tabindex="-1"><a class="header-anchor" href="#下拉电阻" aria-hidden="true">#</a> 下拉电阻</h5><div id="pulldown_figure"></div><ol><li>开关断开时, 下拉电阻 R2 与 端口串联, 端口为低电平</li><li>开关闭合时, 端口与下拉电阻并联, 端口电压与下拉电阻相同, 由于电源为通路, 端口与下拉电阻并联部分的电路分得电源电压, 为高电平</li></ol><ul><li>下拉电阻可以在开关闭合时分得电源向接地的电压, 使端口也能获得高电平</li><li>开关另一侧不能有电阻, 否则开关闭合时, 端口与下拉电阻并联部分不能分得全部电压, 产生未知电平</li></ul><h4 id="推挽输出" tabindex="-1"><a class="header-anchor" href="#推挽输出" aria-hidden="true">#</a> 推挽输出</h4><div id="pullpush_figure"></div><figure><img src="'+t+'" alt="" tabindex="0"><figcaption></figcaption></figure><ol><li>输入高电平时, Q3 开启, Q4 关闭, 电源向负载导通</li><li>输入低电平时, Q3 关闭, Q4 开启, 电源接地, 负载被短路 用于快速切换开关时</li></ol><h4 id="开漏输出" tabindex="-1"><a class="header-anchor" href="#开漏输出" aria-hidden="true">#</a> 开漏输出</h4><div id="opendrain_figure"></div><figure><img src="'+l+'" alt="" tabindex="0"><figcaption></figcaption></figure><ol><li>输入高电平时, Q5 开启, 电源接地, 负载被短路</li><li>输入低电平时, Q5 关闭, 电源向负载导通, 并经过上拉电阻 可以用于线与功能</li></ol><h4 id="线与" tabindex="-1"><a class="header-anchor" href="#线与" aria-hidden="true">#</a> 线与</h4><p><img src="'+r+`" alt=""> 线与既仅通过线路的连接实现 and 运算的功能</p><ol><li>左侧两个开漏输入部分均为高电平, 连接端口后, 输出高电平</li><li>右侧上方的开楼漏输入部分为低电平, 下方为高电平, 低电平一侧与接地直接导通, 导致总端口被短路, 为低电平</li></ol><h3 id="gpio-的基本模式" tabindex="-1"><a class="header-anchor" href="#gpio-的基本模式" aria-hidden="true">#</a> GPIO 的基本模式</h3><h4 id="开漏输出-1" tabindex="-1"><a class="header-anchor" href="#开漏输出-1" aria-hidden="true">#</a> 开漏输出</h4><p><a href="#opendrain_figure">电路原理</a> OUT_OD 可实现线与功能, 主要用于 I<sup>2</sup>C 中的总线 在高频的驱动电路中，噪声很高</p><h4 id="推挽输出-1" tabindex="-1"><a class="header-anchor" href="#推挽输出-1" aria-hidden="true">#</a> 推挽输出</h4><p><a href="#pullpush_figure">电路原理</a> OUT_PP 可以实现快速开启与关闭 常用于输出高/低电平</p><h4 id="复用开漏输出" tabindex="-1"><a class="header-anchor" href="#复用开漏输出" aria-hidden="true">#</a> 复用开漏输出</h4><p>AF_OD 用于 STM32 内部的 I<sup>2</sup>C 外设</p><h4 id="复用推挽输出" tabindex="-1"><a class="header-anchor" href="#复用推挽输出" aria-hidden="true">#</a> 复用推挽输出</h4><p>AF_PP 用于 STM32 内部的 SPI, USART 等外设</p><h4 id="浮空输入" tabindex="-1"><a class="header-anchor" href="#浮空输入" aria-hidden="true">#</a> 浮空输入</h4><p>IN_FLOATING 端口直接与输入连接, 此时默认输入电平不确定, 因此输入端最好接地或接 VCC</p><h4 id="上拉输入" tabindex="-1"><a class="header-anchor" href="#上拉输入" aria-hidden="true">#</a> 上拉输入</h4><p><a href="#pullup_figure">电路原理</a> IPU 默认输入高电平, 当输入低电平时变为低电平</p><h4 id="下拉输入" tabindex="-1"><a class="header-anchor" href="#下拉输入" aria-hidden="true">#</a> 下拉输入</h4><p><a href="#pulldown_figure">电路原理</a> IPD 默认输入低电平, 当输入高电平时变为高电平</p><h4 id="模拟输入" tabindex="-1"><a class="header-anchor" href="#模拟输入" aria-hidden="true">#</a> 模拟输入</h4><p>AIN 端口直接与 ADC 模块连接, 且不进行任何转换, 不使用时, 功耗最低</p><h2 id="标准库配置" tabindex="-1"><a class="header-anchor" href="#标准库配置" aria-hidden="true">#</a> 标准库配置</h2><h3 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化" aria-hidden="true">#</a> 初始化</h3><p>使用结构体 GPIO_InitStructure 定义初始化信息</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">GPIO_InitStructure</span>
<span class="token punctuation">{</span>
    <span class="token comment">//初始化的引脚</span>
    <span class="token comment">//使用宏 GPIO_Pin_x 作为参数</span>
    std<span class="token double-colon punctuation">::</span><span class="token keyword">uint16_t</span> GPIO_Pin<span class="token punctuation">;</span>

    <span class="token comment">//设置模式</span>
    <span class="token comment">//f10x GPIO_Mode_In/Out_xxx 设置为输入/输出/复用等</span>
    <span class="token comment">//f4xx GPIO_Mode_IN/OUT</span>
    <span class="token keyword">enum</span> <span class="token class-name">GPIO_Mode</span><span class="token punctuation">;</span>

    <span class="token comment">//设置引脚速率</span>
    <span class="token comment">//使用宏 GPIO_Speed_xxx 作为参数</span>
    <span class="token keyword">enum</span> <span class="token class-name">GPIO_Speed</span>

    <span class="token comment">//设置引脚上拉/下拉</span>
    <span class="token comment">//参数 GPIO_PuPd_UP / GPIO_PuPd_DOWN / GPIO_PuPd_NOPULL</span>
    <span class="token comment">//仅用于 STM32F4XX</span>
    <span class="token keyword">enum</span> <span class="token class-name">GPIO_PuPd</span>

    <span class="token comment">//设置输出模式</span>
    <span class="token comment">//有推挽与开漏两种</span>
    <span class="token keyword">enum</span> <span class="token class-name">GPIO_OType</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct) 执行初始化</p><ol><li>GPIOx 为初始化端口的寄存器地址 , 可以直接使用 GPIOx 作为参数(已定义的端口宏)</li><li>GPIO_InitStruct 为初始化信息结构体的地址</li></ol><h3 id="电平控制" tabindex="-1"><a class="header-anchor" href="#电平控制" aria-hidden="true">#</a> 电平控制</h3><p>void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) 设置指定阵脚为高电平 void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) 设置指定阵脚为低电平</p><h3 id="读取" tabindex="-1"><a class="header-anchor" href="#读取" aria-hidden="true">#</a> 读取</h3><p>uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) 读取指定阵脚的电平</p><h3 id="时钟初始化" tabindex="-1"><a class="header-anchor" href="#时钟初始化" aria-hidden="true">#</a> 时钟初始化</h3><p>void RCC_XXXXPeriphClockCmd(uint32_t RCC_XXXXPeriph, FunctionalState NewState) 初始化指定总线与端口的 RCC 时钟, 保证 GPIO 正常工作 查询芯片 GPIO 所在的桥进行初始化</p><ol><li>RCC_XXXXPeriph 初始化的RCC, 使用宏 RCC_XXXXPeriph_GPIOx 作为参数</li><li>NewState 设置状态, 初始化则使用 ENABLE</li></ol><h2 id="hal-库配置" tabindex="-1"><a class="header-anchor" href="#hal-库配置" aria-hidden="true">#</a> HAL 库配置</h2><ol><li>设置引脚电平</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">HAL_GPIO_WritePin</span><span class="token punctuation">(</span>GPIO_TypeDef<span class="token operator">*</span> GPIOx<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> GPIO_Pin<span class="token punctuation">,</span> GPIO_PinState PinState<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>读取引脚的电平状态</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>GPIO_PinState <span class="token function">HAL_GPIO_ReadPin</span><span class="token punctuation">(</span>GPIO_TypeDef<span class="token operator">*</span> GPIOx<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> GPIO_Pin<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,61);function h(u,_){return e(),i("div",null,[p,s(" [仿真结果](https://github.com/tonyddg/icublog/tree/main/electronic/src) "),o])}const P=n(c,[["render",h],["__file","GPIO.html.vue"]]);export{P as default};
