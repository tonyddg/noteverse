import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as i,f as d,b as a,d as e,e as t}from"./app-8c5ce49e.js";const c={},l=a("h1",{id:"资源管理",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#资源管理","aria-hidden":"true"},"#"),e(" 资源管理")],-1),r=a("h2",{id:"数据同步与信号量",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#数据同步与信号量","aria-hidden":"true"},"#"),e(" 数据同步与信号量")],-1),p=t(`<ul><li>信号量不是一个具体的值, 而是一种多任务同步机制</li><li>等待 (Take) 信号量的任务会阻塞, 直到有任务给出 (Give) 信号量</li><li>不同于回调, 信号量机制可以保证每个任务相互独立与任务之间正常调度</li><li>可通过各个任务等待上一个信号量与给出下一个信号量, 规定各个任务的调度顺序</li><li>与消息队列相同, 信号量应作为全局变量使用</li></ul><h2 id="二进制信号量" tabindex="-1"><a class="header-anchor" href="#二进制信号量" aria-hidden="true">#</a> 二进制信号量</h2><ul><li>二进制信号量中信号量的数目最多为 1</li><li>二进制信号量无论同时给出多少次, 只能被读取一次</li><li>因此当资源给出的频率较快时, 不应当使用二进制信号量, 否则可能导致资源丢失</li></ul><h2 id="计数信号量" tabindex="-1"><a class="header-anchor" href="#计数信号量" aria-hidden="true">#</a> 计数信号量</h2><ul><li>计数信号量可以被多次读取与给出</li></ul><h2 id="资源保护与互斥量" tabindex="-1"><a class="header-anchor" href="#资源保护与互斥量" aria-hidden="true">#</a> 资源保护与互斥量</h2><ul><li>互斥量不是一个具体的值, 而是一种资源保护机制</li><li>由于任务调度机制, 当任务 A 使用资源时, 调度到同样使用此资源的任务 B 将导致混乱, 需要引入互斥量</li><li>在使用特定资源前, 先等待管理这个资源的互斥量, 确保这个资源不被其他任务使用</li><li>在使用结束后再给出互斥量, 使这个资源能够被使用</li><li>互斥量不能在中断中操作</li></ul><h2 id="freertos-信号量函数" tabindex="-1"><a class="header-anchor" href="#freertos-信号量函数" aria-hidden="true">#</a> FreeRTOS 信号量函数</h2><p>FreeRTOS 中, 三种信号量的操作函数相同</p><h3 id="创建二进制信号量" tabindex="-1"><a class="header-anchor" href="#创建二进制信号量" aria-hidden="true">#</a> 创建二进制信号量</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>SemaphoreHandle_t <span class="token function">xSemaphoreCreateBinary</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="创建计数信号量" tabindex="-1"><a class="header-anchor" href="#创建计数信号量" aria-hidden="true">#</a> 创建计数信号量</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>SemaphoreHandle_t <span class="token function">xSemaphoreCreateCounting</span><span class="token punctuation">(</span>
     UBaseType_t uxMaxCount<span class="token punctuation">,</span>
    UBaseType_t uxInitialCount <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>uxMaxCount 计数信号量包含信号量的最大值</li><li>uxInitialCount 计数信号量中信号量的初始值</li></ul><h3 id="创建互斥量" tabindex="-1"><a class="header-anchor" href="#创建互斥量" aria-hidden="true">#</a> 创建互斥量</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>SemaphoreHandle_t <span class="token function">xSemaphoreCreateMutex</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="等待信号量" tabindex="-1"><a class="header-anchor" href="#等待信号量" aria-hidden="true">#</a> 等待信号量</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>BaseType_t <span class="token function">xSemaphoreTake</span><span class="token punctuation">(</span> 
    SemaphoreHandle_t xSemaphore<span class="token punctuation">,</span> 
    TickType_t xTicksToWait <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>xSemaphore 信号量的句柄</li><li>xTicksToWait 如果信号量不可用的话任务处于阻塞状态的最长时间, 设置为 portMAX_DELAY 的话任务会一直处于阻塞状态直到信号量可用, 设置为 0 的话如果信号量不可用的话会直接返回</li><li>返回值 pdPASS 表示成功获取了信号量, 返回值为 pdFALSE 表示获取信号量失败</li></ul><h3 id="给出信号量" tabindex="-1"><a class="header-anchor" href="#给出信号量" aria-hidden="true">#</a> 给出信号量</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>BaseType_t <span class="token function">xSemaphoreGive</span><span class="token punctuation">(</span> 
    SemaphoreHandle_t xSemaphore <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>xSemaphore 信号量的句柄</li><li>返回值 pdPASS 表示成功给予信号量, 返回值为 pdFALSE 表示给予信号量失败</li></ul><h3 id="在中断中给出信号量" tabindex="-1"><a class="header-anchor" href="#在中断中给出信号量" aria-hidden="true">#</a> 在中断中给出信号量</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>BaseType_t <span class="token function">xSemaphoreGiveFromISR</span><span class="token punctuation">(</span> 
    SemaphoreHandle_t xSemaphore<span class="token punctuation">,</span>
    BaseType_t <span class="token operator">*</span>pxHigherPriorityTaskWoken<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>pxHigherPriorityTaskWoken 可以使用值 pdFALSE / pdTrue, 但要通过指针的形式给出, pdTRUE 时, 离开中断时, 如果有高优先级的任务因此解除阻塞, 则将优先执行此任务</li></ul><h2 id="cmsis-rtos-信号量操作函数" tabindex="-1"><a class="header-anchor" href="#cmsis-rtos-信号量操作函数" aria-hidden="true">#</a> CMSIS RTOS 信号量操作函数</h2><h3 id="互斥量部分" tabindex="-1"><a class="header-anchor" href="#互斥量部分" aria-hidden="true">#</a> 互斥量部分</h3><h4 id="创建互斥量-1" tabindex="-1"><a class="header-anchor" href="#创建互斥量-1" aria-hidden="true">#</a> 创建互斥量</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>osMutexId_t <span class="token function">osMutexNew</span> <span class="token punctuation">(</span><span class="token keyword">const</span> osMutexAttr_t <span class="token operator">*</span> attr<span class="token punctuation">)</span>	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>attr 互斥量属性, 对于一般使用 NULL 即可</li></ul><h4 id="等待互斥量" tabindex="-1"><a class="header-anchor" href="#等待互斥量" aria-hidden="true">#</a> 等待互斥量</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>osStatus_t <span class="token function">osMutexAcquire</span><span class="token punctuation">(</span>
    osMutexId_t mutex_id<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> timeout<span class="token punctuation">)</span>	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="给出互斥量" tabindex="-1"><a class="header-anchor" href="#给出互斥量" aria-hidden="true">#</a> 给出互斥量</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>osStatus_t <span class="token function">osMutexRelease</span><span class="token punctuation">(</span>osMutexId_t mutex_id<span class="token punctuation">)</span>	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="获取互斥量的来源" tabindex="-1"><a class="header-anchor" href="#获取互斥量的来源" aria-hidden="true">#</a> 获取互斥量的来源</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>osThreadId_t <span class="token function">osMutexGetOwner</span><span class="token punctuation">(</span>osMutexId_t mutex_id<span class="token punctuation">)</span>	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="信号量部分" tabindex="-1"><a class="header-anchor" href="#信号量部分" aria-hidden="true">#</a> 信号量部分</h3><p>默认创建的是计数信号量</p><h2 id="关键区" tabindex="-1"><a class="header-anchor" href="#关键区" aria-hidden="true">#</a> 关键区</h2><ul><li>另一种资源管理方法, 在关键区内, 任务不能被调度, 必须完整执行关键区内的内容</li></ul><h3 id="进入关键区" tabindex="-1"><a class="header-anchor" href="#进入关键区" aria-hidden="true">#</a> 进入关键区</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">taskENTER_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="离开关键区" tabindex="-1"><a class="header-anchor" href="#离开关键区" aria-hidden="true">#</a> 离开关键区</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">taskEXIT_CRITICAL</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,44);function o(u,h){return s(),i("div",null,[l,r,d(" ![](./src/semaphore.webp) "),p])}const x=n(c,[["render",o],["__file","resource.html.vue"]]);export{x as default};
