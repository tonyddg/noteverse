import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as p,c as r,b as n,d as s,a,w as t,e as c}from"./app-8c5ce49e.js";const d={},u=n("h1",{id:"occt-快速入门",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#occt-快速入门","aria-hidden":"true"},"#"),s(" OCCT 快速入门")],-1),k={href:"https://mp.weixin.qq.com/s/grYeK0j23XckbnvCbny62g",target:"_blank",rel:"noopener noreferrer"},h=n("h2",{id:"创建-occt-项目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#创建-occt-项目","aria-hidden":"true"},"#"),s(" 创建 OCCT 项目")],-1),_=n("p",null,"关于 OCCT 的构建参见",-1),m={href:"https://zhuanlan.zhihu.com/p/536502638",target:"_blank",rel:"noopener noreferrer"},v={href:"https://zhuanlan.zhihu.com/p/540717573",target:"_blank",rel:"noopener noreferrer"},b=c(`<p>创建 OCCT 项目前, 需要安装 OCCT 并确定以下路径是否有效</p><ul><li>OCCT 包含目录 <code>D:\\\\path_to_occt\\\\inc</code></li><li>OCCT 静态库目录 <code>D:\\\\path_to_occt\\\\win64\\\\vc14\\\\libd</code></li><li>OCCT 动态库目录 <code>D:\\\\path_to_occt\\\\win64\\\\vc14\\\\bind</code></li></ul><h3 id="测试代码" tabindex="-1"><a class="header-anchor" href="#测试代码" aria-hidden="true">#</a> 测试代码</h3><p>通过以下代码测试 OCCT 正确配置</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// Use Toolkit TKernel.</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;TCollection_AsciiString.hxx&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  TCollection_AsciiString <span class="token function">asHelloWorld</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  TCollection_AsciiString <span class="token function">asHelloOCC</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Open CASCADE!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  cout <span class="token operator">&lt;&lt;</span> asHelloWorld <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  cout <span class="token operator">&lt;&lt;</span> asHelloOCC <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基于-cmake" tabindex="-1"><a class="header-anchor" href="#基于-cmake" aria-hidden="true">#</a> 基于 CMake</h3><p>使用 Visual Studio 创建空的 CMake 项目</p>`,7),E=n("li",null,"Visual Studio 中, 将整个解决方案作为一个 CMake 主项目",-1),g=n("li",null,"解决方案下的 VS 项目作为 CMake 子项目, 默认目标与解决方案同名",-1),C=n("p",null,[s("对于主项目的 "),n("code",null,"CMakeLists.txt"),s(" (位于解决方案根目录)")],-1),f=n("p",null,[s("对于子项目的 "),n("code",null,"CMakeLists.txt")],-1),A=n("li",null,"完成设置项目名, 搜索源文件, 设置包含目录等一般 CMake 项目的配置",-1),B=n("a",{href:"#%E5%88%9B%E5%BB%BA-occt-%E9%A1%B9%E7%9B%AE"},"包含目录与静态库目录",-1),x={href:"https://mp.weixin.qq.com/s/Esws9UFDpZz6YVYqsQV-uw",target:"_blank",rel:"noopener noreferrer"},T=n("li",null,[s("在 VS 下, 也可使用预编译指令 "),n("code",null,'#pragma comment(lib, "TKernel.lib")'),s(" 达到相同的效果, 但可能不利于跨平台")],-1),w={href:"https://blog.csdn.net/u013238941/article/details/125752851",target:"_blank",rel:"noopener noreferrer"},q=n("li",null,[s("选择 VS 项目, 在其右键菜单选择 "),n("code",null,"添加调试配置")],-1),y=n("li",null,[s("在配置的 json 界面内, 为键 "),n("code",null,"configurations"),s(" 下的字典添加如下键值对, 即在调试时将动态链接库文件夹添加到环境变量 "),n("code",null,"PATH"),s(" 中")],-1),V=c(`<div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;env&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;PATH&quot;</span><span class="token operator">:</span> <span class="token string">&quot;D:\\\\path_to_occt\\\\win64\\\\vc14\\\\bind;%PATH%&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基于-vs" tabindex="-1"><a class="header-anchor" href="#基于-vs" aria-hidden="true">#</a> 基于 VS</h3>`,2);function D(O,S){const l=o("ExternalLinkIcon"),e=o("RouterLink");return p(),r("div",null,[u,n("p",null,[s("参考教程 "),n("a",k,[s("https://mp.weixin.qq.com/s/grYeK0j23XckbnvCbny62g"),a(l)])]),h,_,n("ul",null,[n("li",null,[n("a",m,[s("基础"),a(l)])]),n("li",null,[n("a",v,[s("VTK"),a(l)])])]),b,n("ul",null,[E,g,n("li",null,[s("关于子项目设置与文件结构等可参见"),a(e,{to:"/coding/cpp/cmake.html#%E5%A4%9A%E5%B1%82%E7%BA%A7%E7%BB%93%E6%9E%84"},{default:t(()=>[s("笔记")]),_:1})])]),C,n("ul",null,[n("li",null,[s("一般不需要额外设置, 仅当需要添加子项目时, 添加 "),a(e,{to:"/coding/cpp/cmake.html#%E6%B7%BB%E5%8A%A0%E5%AD%90%E9%A1%B9%E7%9B%AE"},{default:t(()=>[s("add_subdirectory")]),_:1}),s(" 命令")])]),f,n("ul",null,[A,n("li",null,[s("分别使用 "),a(e,{to:"/coding/cpp/cmake.html#%E7%9B%AE%E6%A0%87%E9%85%8D%E7%BD%AE"},{default:t(()=>[s("target_include_directories 与 target_link_directories")]),_:1}),s(" 命令设置"),B,s(", 注意使用正确的"),a(e,{to:"/coding/cpp/cmake.html#%E4%BE%9D%E8%B5%96%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0"},{default:t(()=>[s("依赖传递参数")]),_:1})]),n("li",null,[s("对于子项目链接静态库设置 "),n("ul",null,[n("li",null,[s("关于如何确定所需的静态库参见"),n("a",x,[s("教程"),a(l)])]),n("li",null,[s("一般情况下使用 "),a(e,{to:"/coding/cpp/cmake.html#%E7%9B%AE%E6%A0%87%E9%85%8D%E7%BD%AE"},{default:t(()=>[s("target_link_libraries")]),_:1}),s(" 命令设置链接的静态库")]),T])])]),n("p",null,[s("关于动态链接库的处理 (参考"),n("a",w,[s("教程"),a(l)]),s(")")]),n("ul",null,[n("li",null,[s("参考"),a(e,{to:"/coding/cpp/cmake.html#%E6%89%93%E5%BC%80-cmake-%E9%A1%B9%E7%9B%AE"},{default:t(()=>[s("笔记")]),_:1}),s(", 进入项目视图")]),q,y]),V])}const j=i(d,[["render",D],["__file","base.html.vue"]]);export{j as default};
