import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as i,e as l}from"./app-8c5ce49e.js";const r={},t=l('<h1 id="创建任务" tabindex="-1"><a class="header-anchor" href="#创建任务" aria-hidden="true">#</a> 创建任务</h1><h2 id="启用-rtos" tabindex="-1"><a class="header-anchor" href="#启用-rtos" aria-hidden="true">#</a> 启用 RTOS</h2><ol><li>在 Middleware-&gt;FreeRTOS的选项卡中, 可以启用 RTOS</li><li>使用 CMSIS-RTOS V2 API</li><li>在 Tasks and Queues 选项卡中创建任务, 第一个默认任务不修改</li></ol><h2 id="任务属性" tabindex="-1"><a class="header-anchor" href="#任务属性" aria-hidden="true">#</a> 任务属性</h2><ol><li>Task Name: 设置任务的名称, 它会基于此名字建立一个指向任务的句柄</li><li>Priority: 设置任务的优先级, 高优先级的任务会抢占低优先级的任务</li><li>Stack Size: 设置任务栈的大小, 用于储存任务相关的变量</li><li>Entry_Function: 设置任务的入口函数</li><li>Allocation: 设置任务所在的地方, 选择动态的话是生成在堆中, 选择静态的话则生成在静态区</li><li>Parameter: 传递给任务的参数</li><li>Code Generation Option: 设置任务函数的生成方式, 如果需要使用 C++, 则因设置为 as extern, 在外部定义任务函数</li></ol><h2 id="任务堆栈占用情况" tabindex="-1"><a class="header-anchor" href="#任务堆栈占用情况" aria-hidden="true">#</a> 任务堆栈占用情况</h2><ol><li>一个任务包含Stack区 (用于储存任务相关的变量) 和任务控制块TCB区 (Task Control Block, 用于储存任务本身的设置)</li><li>FreeRTOS Heap Usage 选项卡中, 可以查看堆栈使用情况</li><li>任务占用字节数 = TCB_size + (4 x Task stack size)</li></ol><h2 id="编辑任务函数" tabindex="-1"><a class="header-anchor" href="#编辑任务函数" aria-hidden="true">#</a> 编辑任务函数</h2><ol><li>CubeMX 将任务函数生成于 Src/freertos.c 中</li><li>通过函数 osKernelStart() 启动 RTOS 任务调度 (CubeMX 已经自动在 main 中调用此函数了)</li><li>各个线程之间耦合程度低, 日后对项目进行维护时只要对相关的线程程序进行修改就行了</li><li>在任务中, 一般使用 osDelay 用于延时, 参数单位为系统刻 (一般即 1ms), 而非 HAL_Delay</li></ol>',9),o=[t];function s(n,d){return a(),i("div",null,o)}const _=e(r,[["render",s],["__file","task.html.vue"]]);export{_ as default};
