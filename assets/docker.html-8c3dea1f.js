import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as r,e as d}from"./app-8c5ce49e.js";const i={},o=d(`<h1 id="docker" tabindex="-1"><a class="header-anchor" href="#docker" aria-hidden="true">#</a> Docker</h1><h2 id="docker-核心工作流程" tabindex="-1"><a class="header-anchor" href="#docker-核心工作流程" aria-hidden="true">#</a> Docker 核心工作流程</h2><ol><li>定制 Dockerfile, 确定环境, 系统, 依赖</li><li>使用 docker build, 根据 Dockerfile 生成镜像(Image)</li><li>使用 docker run 运行镜像, 让 docker 引擎为分配容器</li><li>使用 docker push 推送镜像到 docker hub</li><li>使用 docker pull 拉取 docker hub 上的镜像</li></ol><h2 id="定制镜像" tabindex="-1"><a class="header-anchor" href="#定制镜像" aria-hidden="true">#</a> 定制镜像</h2><h3 id="docker-file" tabindex="-1"><a class="header-anchor" href="#docker-file" aria-hidden="true">#</a> Docker File</h3><p>文件名为 Dockerfile, 以文本形式编辑</p><h3 id="from" tabindex="-1"><a class="header-anchor" href="#from" aria-hidden="true">#</a> FROM</h3><p>FROM [基础镜像] 引用 docker hub 上的基础镜像</p><h3 id="workdir" tabindex="-1"><a class="header-anchor" href="#workdir" aria-hidden="true">#</a> WORKDIR</h3><p>WORKDIR [目录] 指定容器中的目录(相当于在容器中使用 cd)</p><h3 id="copy" tabindex="-1"><a class="header-anchor" href="#copy" aria-hidden="true">#</a> COPY</h3><p>COPY [本机文件] [容器地址] 将本地文件复制到容器里 COPY . [容器地址] 复制所有本地文件, 使用 .dockerignore 排除</p><h3 id="run" tabindex="-1"><a class="header-anchor" href="#run" aria-hidden="true">#</a> RUN</h3><p>RUN [指令] 在容器里运行指令</p><h3 id="dockerignore" tabindex="-1"><a class="header-anchor" href="#dockerignore" aria-hidden="true">#</a> dockerignore</h3><p>在本地根目录创建 .dockerignore 可以指定排除的本地文件 通常必须要忽略 .dockerignore, Dockerfile, .git, .gitignore</p><h3 id="expose" tabindex="-1"><a class="header-anchor" href="#expose" aria-hidden="true">#</a> EXPOSE</h3><p>EXPOSE [端口号] 暴露容器的端口号</p><h3 id="cmd" tabindex="-1"><a class="header-anchor" href="#cmd" aria-hidden="true">#</a> CMD</h3><p>CMD [&quot;[命令部分1]&quot;,&quot;[命令部分2]&quot;, ...] 启动容器时运行脚本 此处命令部分为按空格划分命令 如 npm run dev 变为 [&quot;npm&quot;,&quot;run&quot;,&quot;dev&quot;]</p><h2 id="docker-命令" tabindex="-1"><a class="header-anchor" href="#docker-命令" aria-hidden="true">#</a> docker 命令</h2><h3 id="docker-build" tabindex="-1"><a class="header-anchor" href="#docker-build" aria-hidden="true">#</a> docker build</h3><p>docker build (-t) [目录] 寻找目录下的 Dockerfile, 创建镜像</p><ul><li>-t [镜像名] 指定镜像名</li></ul><h3 id="docker-images" tabindex="-1"><a class="header-anchor" href="#docker-images" aria-hidden="true">#</a> docker images</h3><p>docker images 查看所有镜像</p><h3 id="docker-tag" tabindex="-1"><a class="header-anchor" href="#docker-tag" aria-hidden="true">#</a> docker tag</h3><p>docker tag [镜像ID] [镜像名] 给镜像命名 镜像名格式 [用户名]/[镜像名]:vx.x</p><h3 id="docker-login" tabindex="-1"><a class="header-anchor" href="#docker-login" aria-hidden="true">#</a> docker login</h3><p>登录 docker hub</p><h3 id="docker-rmi" tabindex="-1"><a class="header-anchor" href="#docker-rmi" aria-hidden="true">#</a> docker rmi</h3><p>docker rmi (-f) [镜像ID/镜像名称] 删除镜像</p><ul><li>-f 强制删除正在运行的镜像</li><li>镜像ID 可以只输入前 3 个字符</li></ul><h3 id="docker-run" tabindex="-1"><a class="header-anchor" href="#docker-run" aria-hidden="true">#</a> docker run</h3><p>docker run (-d/p/v/name) [镜像名] 在容器中运行镜像</p><ul><li>-d 后台运行镜像</li><li>-p [主机端口]:[容器端口] 映射容器端口</li><li>--name [容器名] 指定容器名称</li><li>-v [本地路径]:[容器路径](:ro) (-v) 将本地路径与容器路径同步, 本地文件修改后将同步到容器里 <ul><li>:ro 使本地变为只读, 容器的变化不会同步到本地</li><li>-v [本地路径] 再次使用 -v 表示同步目录下不进行同步的文件</li><li>一般使用绝对路径</li></ul></li></ul><h3 id="docker-ps" tabindex="-1"><a class="header-anchor" href="#docker-ps" aria-hidden="true">#</a> docker ps</h3><p>docker ps (-a) 查看正在运行的容器</p><ul><li>-a 查看所有容器, 包括暂停运行的容器</li></ul><h3 id="docker-stop" tabindex="-1"><a class="header-anchor" href="#docker-stop" aria-hidden="true">#</a> docker stop</h3><p>docker stop [容器ID] 暂停容器</p><h3 id="docker-rm" tabindex="-1"><a class="header-anchor" href="#docker-rm" aria-hidden="true">#</a> docker rm</h3><p>docker rmi (-f/v) [容器ID/容器名称] 删除容器</p><ul><li>-f 强制删除正在运行的容器</li><li>-v 删除容器中的绑定, 如果容器使用了 -v, 则删除时也要有 -v 选项</li></ul><h3 id="docker-exec" tabindex="-1"><a class="header-anchor" href="#docker-exec" aria-hidden="true">#</a> docker exec</h3><p>docker exec (-i/t) [容器名] [脚本解释器] 进入容器</p><ul><li>docker exec -it [容器名] /bin/sh 使用 bash 的方式进入容器, 使用 exit 即可退出</li></ul><h2 id="docker-compose" tabindex="-1"><a class="header-anchor" href="#docker-compose" aria-hidden="true">#</a> docker-compose</h2><p>通过在镜像根目录下的 docker-compose.yml 快速构建容器</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3.8&quot;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
    <span class="token punctuation">[</span>容器名<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token key atrule">build</span><span class="token punctuation">:</span> .
        <span class="token key atrule">ports</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> <span class="token string">&quot;3000:3000&quot;</span>
        <span class="token key atrule">volume</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> ./<span class="token punctuation">:</span>/path<span class="token punctuation">:</span>ro
            <span class="token punctuation">-</span> ./xxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>build 即 docker build 命令</li><li>ports 即 docker run -p 命令</li><li>volume 即 docker run -v 命令</li></ol><h3 id="docker-compose-up-d-build" tabindex="-1"><a class="header-anchor" href="#docker-compose-up-d-build" aria-hidden="true">#</a> docker-compose up (-d/build)</h3><p>运行 docker-compose 自动构建镜像, 创建容器</p><ul><li>-d 后台运行容器</li><li>--build 重新启动容器, 如果修改后再次启动, 需要有此选项</li></ul><h3 id="docker-compose-down-v" tabindex="-1"><a class="header-anchor" href="#docker-compose-down-v" aria-hidden="true">#</a> docker-compose down (-v)</h3><p>清除 docker-compose 删除创建的镜像与容器</p><ul><li>-v 清除绑定, 如果使用了 volume, 则要由此选项</li></ul>`,57),n=[o];function c(s,l){return a(),r("div",null,n)}const u=e(i,[["render",c],["__file","docker.html.vue"]]);export{u as default};
