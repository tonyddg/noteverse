import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as d,c as i,b as e,d as a,a as o,e as c}from"./app-8c5ce49e.js";const p={},l=c('<h1 id="twincat3-实用模块" tabindex="-1"><a class="header-anchor" href="#twincat3-实用模块" aria-hidden="true">#</a> TwinCat3 实用模块</h1><h2 id="轴基本控制" tabindex="-1"><a class="header-anchor" href="#轴基本控制" aria-hidden="true">#</a> 轴基本控制</h2><h3 id="使能与复位" tabindex="-1"><a class="header-anchor" href="#使能与复位" aria-hidden="true">#</a> 使能与复位</h3>',3),r={href:"https://infosys.beckhoff.com/content/1033/tcplclib_tc2_mc2/70048011.html",target:"_blank",rel:"noopener noreferrer"},u=e("h4",{id:"状态读取",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#状态读取","aria-hidden":"true"},"#"),a(" 状态读取")],-1),h={href:"https://infosys.beckhoff.com/content/1033/tcplclib_tc2_mc2/70054027.html",target:"_blank",rel:"noopener noreferrer"},b=e("h3",{id:"jog-点动控制",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#jog-点动控制","aria-hidden":"true"},"#"),a(" JOG 点动控制")],-1),k={href:"https://infosys.beckhoff.com/content/1033/tcplclib_tc2_mc2/70120459.html",target:"_blank",rel:"noopener noreferrer"},f=e("h3",{id:"ptp-点到点控制",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#ptp-点到点控制","aria-hidden":"true"},"#"),a(" PTP 点到点控制")],-1),m={href:"https://infosys.beckhoff.com/content/1033/tcplclib_tc2_mc2/70093323.html",target:"_blank",rel:"noopener noreferrer"},g=c('<h2 id="fifo-先入先出控制" tabindex="-1"><a class="header-anchor" href="#fifo-先入先出控制" aria-hidden="true">#</a> FIFO 先入先出控制</h2><p>FIFO 即 First in First out<br> 通过此功能可以将用户设定的坐标数据保存在栈中<br> 轴的控制器将根据用户设定的间隔, 按行读取数组中的坐标并运动</p><p>FIFO 可以同时控制多个轴 (最多 8/16) 个轴, 实现多轴联动<br> 可以最多保存 1000 个坐标数据 (默认), 并在运动时插补提升平稳性</p><p>但 FIFO 不支持反转, 也无法根据主轴调整速度, 且运动后需要重新装填坐标数据</p><h3 id="fifo-配置" tabindex="-1"><a class="header-anchor" href="#fifo-配置" aria-hidden="true">#</a> FIFO 配置</h3>',5),_={href:"https://infosys.beckhoff.com/content/1033/tf5060_tc3_nc_fifo_axes/6940881291.html",target:"_blank",rel:"noopener noreferrer"},x=c('<h4 id="创建-fifo" tabindex="-1"><a class="header-anchor" href="#创建-fifo" aria-hidden="true">#</a> 创建 FIFO</h4><p>在资源管理器打开 MOTION -&gt; NC TASK<br> 右键 NC TASK, 选择 Add new item, 在弹出对话框中, Name 属性中输入通道名称, Type 属性选择 NC-Channel(for FIFO Axes) 完成创建</p><p>在资源管理器打开 MOTION -&gt; NC TASK -&gt; 通道名称 -&gt; Group 2<br> 选择 FIFO 选项卡进行配置</p><h4 id="基本配置" tabindex="-1"><a class="header-anchor" href="#基本配置" aria-hidden="true">#</a> 基本配置</h4><ul><li><code>FIFO-Dimension</code> FIFO 控制的轴组数, 最多 8/16 (由控制器性能决定)</li><li><code>Fifo Length</code> 坐标栈的大小, 即最多保存的坐标数</li><li><code>Fifo Override Type</code> 运动速度调节方式 <ul><li><code>1</code> 表示跃进型</li><li><code>2</code> 表示平滑型 (默认, 经测试存在问题 ?)</li></ul></li><li><code>P-T2 time for override changes</code> 平滑型下的切换时间, 越大运动切换越平滑</li><li><code>Base Time of Fifo entries</code> 坐标点运动间隔, 必须是控制周期的整数倍</li></ul><h4 id="曲线校验" tabindex="-1"><a class="header-anchor" href="#曲线校验" aria-hidden="true">#</a> 曲线校验</h4>',6),T=e("br",null,null,-1),I={href:"https://infosys.beckhoff.com/content/1033/tf50x0_tc3_nc_ptp/10541544203.html",target:"_blank",rel:"noopener noreferrer"},v=c('<h4 id="id-获取" tabindex="-1"><a class="header-anchor" href="#id-获取" aria-hidden="true">#</a> ID 获取</h4><p>FIFO 功能块中多使用轴与通道的 ID (一个 UINT 值) 来绑定与操作有关轴 / 通道</p><p>在资源管理器中打开轴 / 通道, 选择 General 选项卡, 其中的 Id 属性即其 ID</p><h4 id="模块导入" tabindex="-1"><a class="header-anchor" href="#模块导入" aria-hidden="true">#</a> 模块导入</h4><p>FIFO 有关功能块位于模块 Tc2_NcFifoAxes 中<br> 通过 库管理器 -&gt; Motion -&gt; FifoAxes -&gt; Tc2_NcFifoAxes 导入</p><p>使用有关功能块时需要提前导入</p><h3 id="有关功能块" tabindex="-1"><a class="header-anchor" href="#有关功能块" aria-hidden="true">#</a> 有关功能块</h3>',7),F={href:"https://infosys.beckhoff.com/content/1033/tf5060_tc3_nc_fifo_axes/10822792587.html",target:"_blank",rel:"noopener noreferrer"},O=c('<h4 id="轴绑定-fifogroupintegrate" tabindex="-1"><a class="header-anchor" href="#轴绑定-fifogroupintegrate" aria-hidden="true">#</a> 轴绑定 FiFoGroupIntegrate</h4><ul><li><p><code>UDINT</code> 输入变量 <code>iChannelId</code><br> 被设置的 FIFO 通道 ID</p></li><li><p><code>UDINT</code> 输入变量 <code>iAxisId</code><br> 被绑定的轴 ID</p></li><li><p><code>UDINT</code> 输入变量 <code>iGroupPosition</code> 被绑定轴对应的 FIFO 坐标 (索引由 1 开始)</p></li><li><p><code>BOOL</code> 输入变量 <code>bExecute</code><br> 在上升沿执行绑定操作</p></li><li><p><code>TIME</code> 输入变量 <code>tTimeout</code><br><code>ADS</code> 等待时间, 通常设置为 <code>T#1s</code></p></li><li><p><code>BOOL</code> 输出变量 <code>bBusy</code><br> 当 <code>bExecute</code> 上升沿时变为 <code>TRUE</code>, 当命令结束或出错时, 变为 <code>FALSE</code></p></li><li><p><code>BOOL</code> 输出变量 <code>bErr</code><br> 当命令执行出错, 变为 <code>TRUE</code></p></li><li><p><code>UDINT</code> 输出变量 <code>iErrId</code><br><code>ADS</code> 或 <code>NC</code> 错误码</p></li></ul><h4 id="写入坐标-fifowrite" tabindex="-1"><a class="header-anchor" href="#写入坐标-fifowrite" aria-hidden="true">#</a> 写入坐标 FiFoWrite</h4><ul><li><p><code>UDINT</code> 输入变量 <code>iChannelId</code><br> 被设置的 FIFO 通道 ID</p></li><li><p><code>Pointer To LREAL</code> 输入变量 <code>AdrDataArray</code> 保存坐标数据的数组, 该数组为 <code>ARRAY[0..x, 1..n] OF LREAL</code><br> 其中 <code>x</code> 为坐标数, <code>n</code> 为 FIFO 控制的轴数</p></li><li><p><code>UDINT</code> 输入变量 <code>iColDim</code><br> FIFO 控制的轴数, 即坐标数组中的 <code>n</code></p></li><li><p><code>UDINT</code> 输入变量 <code>iRowsToWrite</code><br> 实际装载入 FIFO 的坐标数, 即坐标数组中的有效函数, 如全部行都使用则为 <code>x + 1</code></p></li><li><p><code>BOOL</code> 输入变量 <code>bExecute</code><br> 在上升沿执行写入操作</p></li><li><p><code>TIME</code> 输入变量 <code>tTimeout</code><br><code>ADS</code> 等待时间, 通常设置为 <code>T#1s</code></p></li><li><p><code>BOOL</code> 输出变量 <code>bBusy</code><br> 当 <code>bExecute</code> 上升沿时变为 <code>TRUE</code>, 当命令结束或出错时, 变为 <code>FALSE</code></p></li><li><p><code>BOOL</code> 输出变量 <code>bErr</code><br> 当命令执行出错, 变为 <code>TRUE</code></p></li><li><p><code>UDINT</code> 输出变量 <code>iErrId</code><br><code>ADS</code> 或 <code>NC</code> 错误码</p></li><li><p>注意, 如果要重新写入坐标数组, 则需要使用功能块 <code>FiFoOverwrite</code>, 其参数与 <code>FiFoWrite</code> 相同</p></li></ul><h4 id="开始运动-fifostart" tabindex="-1"><a class="header-anchor" href="#开始运动-fifostart" aria-hidden="true">#</a> 开始运动 FiFoStart</h4><ul><li><p><code>UDINT</code> 输入变量 <code>iChannelId</code><br> 被控制的 FIFO 通道 ID</p></li><li><p><code>BOOL</code> 输入变量 <code>bExecute</code><br> 在上升沿开始运动</p></li><li><p><code>TIME</code> 输入变量 <code>tTimeout</code><br><code>ADS</code> 等待时间, 通常设置为 <code>T#1s</code></p></li><li><p><code>BOOL</code> 输出变量 <code>bBusy</code><br> 当 <code>bExecute</code> 上升沿时变为 <code>TRUE</code>, 当命令结束或出错时, 变为 <code>FALSE</code></p></li><li><p><code>BOOL</code> 输出变量 <code>bErr</code><br> 当命令执行出错, 变为 <code>TRUE</code></p></li><li><p><code>UDINT</code> 输出变量 <code>iErrId</code><br><code>ADS</code> 或 <code>NC</code> 错误码</p></li></ul><h4 id="停止运动-fifostop" tabindex="-1"><a class="header-anchor" href="#停止运动-fifostop" aria-hidden="true">#</a> 停止运动 FiFoStop</h4><ul><li><p><code>UDINT</code> 输入变量 <code>iChannelId</code><br> 被控制的 FIFO 通道 ID</p></li><li><p><code>BOOL</code> 输入变量 <code>bExecute</code><br> 在上升沿终止运动</p></li><li><p><code>TIME</code> 输入变量 <code>tTimeout</code><br><code>ADS</code> 等待时间, 通常设置为 <code>T#1s</code></p></li><li><p><code>BOOL</code> 输出变量 <code>bBusy</code><br> 当 <code>bExecute</code> 上升沿时变为 <code>TRUE</code>, 当命令结束或出错时, 变为 <code>FALSE</code></p></li><li><p><code>BOOL</code> 输出变量 <code>bErr</code><br> 当命令执行出错, 变为 <code>TRUE</code></p></li><li><p><code>UDINT</code> 输出变量 <code>iErrId</code><br><code>ADS</code> 或 <code>NC</code> 错误码</p></li></ul><h4 id="解除绑定-fifogroupdisintegrate" tabindex="-1"><a class="header-anchor" href="#解除绑定-fifogroupdisintegrate" aria-hidden="true">#</a> 解除绑定 FiFoGroupDisintegrate</h4><ul><li><p><code>UDINT</code> 输入变量 <code>iChannelId</code><br> 被控制的 FIFO 通道 ID</p></li><li><p><code>BOOL</code> 输入变量 <code>bExecute</code><br> 在上升沿执行命令</p></li><li><p><code>TIME</code> 输入变量 <code>tTimeout</code><br><code>ADS</code> 等待时间, 通常设置为 <code>T#1s</code></p></li><li><p><code>BOOL</code> 输出变量 <code>bBusy</code><br> 当 <code>bExecute</code> 上升沿时变为 <code>TRUE</code>, 当命令结束或出错时, 变为 <code>FALSE</code></p></li><li><p><code>BOOL</code> 输出变量 <code>bErr</code><br> 当命令执行出错, 变为 <code>TRUE</code></p></li><li><p><code>UDINT</code> 输出变量 <code>iErrId</code><br><code>ADS</code> 或 <code>NC</code> 错误码</p></li><li><p>注意, 仅有此命令被执行后, 被绑定的轴才能重新使用基本 PTP 控制</p></li></ul><h3 id="基本使用流程" tabindex="-1"><a class="header-anchor" href="#基本使用流程" aria-hidden="true">#</a> 基本使用流程</h3><ol><li>通过 <code>MC_Power</code> 使能被控制的轴</li><li>使用功能块 <code>FiFoWrite</code> 写入坐标</li><li>使用功能块 <code>FiFoGroupIntegrate</code> 绑定被控制的轴</li><li>使用功能块 <code>FiFoStart</code> 开始运行指定运动</li><li>使用功能块 <code>FiFoGroupDisintegrate</code> 解除绑定</li></ol><h2 id="xml-server" tabindex="-1"><a class="header-anchor" href="#xml-server" aria-hidden="true">#</a> XML Server</h2>',13),E={href:"https://infosys.beckhoff.com/content/1033/tf6421_tc3_xml_server/index.html",target:"_blank",rel:"noopener noreferrer"},S=c(`<h3 id="有关功能块-1" tabindex="-1"><a class="header-anchor" href="#有关功能块-1" aria-hidden="true">#</a> 有关功能块</h3><h4 id="读取-xml-文件-fb-xmlsrvread" tabindex="-1"><a class="header-anchor" href="#读取-xml-文件-fb-xmlsrvread" aria-hidden="true">#</a> 读取 XML 文件 FB_XmlSrvRead</h4><p>说明中仅介绍部分有用的参数, 其余未介绍参数见文档, 一般取空值即可</p><ul><li><p><code>DWORD</code> 输入变量 <code>pSymAddr</code><br> 保存读取结果的地址, 可通过函数 <code>ADR(val)</code> 获取变量地址</p></li><li><p><code>UDINT</code> 输入变量 <code>cbSymSize</code><br> 保存空间大小, 通常使用 <code>sizeof(val)</code> 获取空间大小</p></li><li><p><code>T_MaxString (STRING)</code> 输入变量 <code>sFilePath</code><br> XML 文件的本地地址</p></li><li><p><code>T_MaxString</code> 输入变量 <code>sXPath</code><br> 读取参数在 XML 文件的标签位置, 使用 <code>/</code> 作为分隔符, 以分隔符 <code>/</code> 开始</p></li><li><p><code>BOOL</code> 输入变量 <code>bExecute</code><br> 在上升沿执行命令</p></li><li><p><code>TIME</code> 输入变量 <code>tTimeout</code><br> 读取等待时间, 通常设置为 <code>T#60s</code></p></li><li><p><code>BOOL</code> 输出变量 <code>bBusy</code><br> 当 <code>bExecute</code> 上升沿时变为 <code>TRUE</code>, 当命令结束或出错时, 变为 <code>FALSE</code></p></li><li><p><code>BOOL</code> 输出变量 <code>bErr</code><br> 当命令执行出错, 变为 <code>TRUE</code></p></li><li><p><code>UDINT</code> 输出变量 <code>nErrId</code><br> 错误码, 含义见文档</p></li></ul><p>可使用 <code>FB_XmlSrvReadByName</code> 版本的功能块按变量名称 (<code>STRING</code> 输入参数 <code>sSymName</code>) 获取变量, 其余参数同</p><h4 id="向-xml-文件写入数据-fb-xmlsrvwrite" tabindex="-1"><a class="header-anchor" href="#向-xml-文件写入数据-fb-xmlsrvwrite" aria-hidden="true">#</a> 向 XML 文件写入数据 FB_XmlSrvWrite</h4><p>说明中仅介绍部分有用的参数, 其余未介绍参数见文档, 一般取空值即可</p><ul><li><p><code>WORD</code> 输入变量 <code>nMode</code><br> 写入模式</p><ul><li><code>XMLSRV_SKIPMISSING</code> 当标签不存在时跳过 (默认)</li><li><code>XMLSRV_ADDMISSING</code> 当标签不存在时创建标签</li></ul></li><li><p><code>DWORD</code> 输入变量 <code>pSymAddr</code><br> 保存写入值的地址, 可通过函数 <code>ADR(val)</code> 获取变量地址</p></li><li><p><code>UDINT</code> 输入变量 <code>cbSymSize</code><br> 写入值占用空间大小, 通常使用 <code>sizeof(val)</code> 获取空间大小</p></li><li><p><code>T_MaxString (STRING)</code> 输入变量 <code>sFilePath</code><br> XML 文件的本地地址</p></li><li><p><code>T_MaxString</code> 输入变量 <code>sXPath</code><br> 读取参数在 XML 文件的标签位置, 使用 <code>/</code> 作为分隔符, 以分隔符 <code>/</code> 开始</p></li><li><p><code>BOOL</code> 输入变量 <code>bExecute</code><br> 在上升沿执行命令</p></li><li><p><code>TIME</code> 输入变量 <code>tTimeout</code><br> 读取等待时间, 通常设置为 <code>T#60s</code></p></li><li><p><code>BOOL</code> 输出变量 <code>bBusy</code><br> 当 <code>bExecute</code> 上升沿时变为 <code>TRUE</code>, 当命令结束或出错时, 变为 <code>FALSE</code></p></li><li><p><code>BOOL</code> 输出变量 <code>bErr</code><br> 当命令执行出错, 变为 <code>TRUE</code></p></li><li><p><code>UDINT</code> 输出变量 <code>nErrId</code><br> 错误码, 含义见文档</p></li></ul><p>可使用 <code>FB_XmlSrvWriteByName</code> 版本的功能块按变量名称 (<code>STRING</code> 输入参数 <code>sSymName</code>) 获取变量, 其余参数同</p><h3 id="使用说明" tabindex="-1"><a class="header-anchor" href="#使用说明" aria-hidden="true">#</a> 使用说明</h3><h4 id="读取结构体" tabindex="-1"><a class="header-anchor" href="#读取结构体" aria-hidden="true">#</a> 读取结构体</h4><p>对于结构体</p><div class="language-iecst line-numbers-mode" data-ext="iecst"><pre class="language-iecst"><code><span class="token keyword">TYPE</span> ST_MYSTRUCT<span class="token operator">:</span>
<span class="token keyword">STRUCT</span>
    a<span class="token operator">:</span> <span class="token class-name">UINT</span><span class="token punctuation">;</span>
    b<span class="token operator">:</span> <span class="token class-name">DINT</span><span class="token punctuation">;</span>
    c<span class="token operator">:</span> <span class="token class-name">LREAL</span><span class="token punctuation">;</span>
    d<span class="token operator">:</span> <span class="token class-name">STRING</span><span class="token punctuation">;</span>
<span class="token keyword">END_STRUCT</span>
<span class="token keyword">END_TYPE</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当读取标签下有相应的子标签, <mark>且变量类型正确</mark>, 则能够直接读取到结构体中<br> 例如如下的 XML 文件内容</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variables</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Var1</span><span class="token punctuation">&gt;</span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Var1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Var2</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- sXPath := &#39;/variables/Var2&#39; --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">&gt;</span></span>100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>-10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>c</span><span class="token punctuation">&gt;</span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>c</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>d</span><span class="token punctuation">&gt;</span></span>Hallo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>d</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Var2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>variables</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="读取数组" tabindex="-1"><a class="header-anchor" href="#读取数组" aria-hidden="true">#</a> 读取数组</h4><p>在读取数组时, 要求数组各个元素有如下格式的 XML 标签<br><code>&lt;[ARR] index=&quot;[INX]&quot;&gt;[ELM]&lt;/[ARR]&gt;</code></p><ul><li><code>ARR</code> 为被读取的数组标签名</li><li><code>INX</code> 为数组的索引</li><li><code>ELM</code> 为数组元素</li></ul><p>仅当数组标签含有属性 <code>index</code> 时, 元素才能被读取</p><p>例如如下的 XML 文件内容</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataentry</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array1</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array1</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array1</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array1</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataentry</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实用参考" tabindex="-1"><a class="header-anchor" href="#实用参考" aria-hidden="true">#</a> 实用参考</h2><h3 id="错误码查询" tabindex="-1"><a class="header-anchor" href="#错误码查询" aria-hidden="true">#</a> 错误码查询</h3>`,23),D={href:"https://infosys.beckhoff.com/content/1033/tc3ncerrcode/index.html",target:"_blank",rel:"noopener noreferrer"};function N(L,R){const n=t("ExternalLinkIcon");return d(),i("div",null,[l,e("p",null,[e("a",r,[a("功能块参考文档"),o(n)])]),u,e("p",null,[e("a",h,[a("功能块参考文档"),o(n)])]),b,e("p",null,[e("a",k,[a("功能块参考文档"),o(n)])]),f,e("p",null,[e("a",m,[a("功能块参考文档"),o(n)])]),g,e("p",null,[e("a",_,[a("配置参考文档"),o(n)])]),x,e("p",null,[a("在读取坐标后, 最好先在虚轴运行, 检查运动时的最大速度是否超过设定的最大速度"),T,a(" 虚轴的创建可参考"),e("a",I,[a("官方文档"),o(n)])]),v,e("p",null,[e("a",F,[a("功能块参考文档"),o(n)])]),O,e("p",null,[e("a",E,[a("官方参考文档"),o(n)])]),S,e("p",null,[e("a",D,[a("https://infosys.beckhoff.com/content/1033/tc3ncerrcode/index.html"),o(n)])])])}const B=s(p,[["render",N],["__file","twincat_module.html.vue"]]);export{B as default};
