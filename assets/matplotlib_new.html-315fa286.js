import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as d,c as r,b as e,d as a,a as n,w as t,e as s}from"./app-8c5ce49e.js";const p="/noteverse/assets/plt_exp_grid-d6368dce.svg",u="/noteverse/assets/plt_exp_twinx-ee1ca537.svg",h={},b=s('<h1 id="matplotlib-笔记" tabindex="-1"><a class="header-anchor" href="#matplotlib-笔记" aria-hidden="true">#</a> Matplotlib 笔记</h1><blockquote><p>基于 Matplotlib 版本 3.8.0</p></blockquote><h2 id="画布与图像" tabindex="-1"><a class="header-anchor" href="#画布与图像" aria-hidden="true">#</a> 画布与图像</h2><p>在 Matplotlib 中</p><ul><li>画布 Figure 对应了一块像素区域, 同时也作为容器包含了单个或多个图像</li><li>图像 Axes 则管理了内容 Artist, 坐标轴 Axis, 边框 Spine, 标签 Label 等对象, 并在绘制阶段呈现在图像上</li></ul><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h3><h4 id="创建画布与图像" tabindex="-1"><a class="header-anchor" href="#创建画布与图像" aria-hidden="true">#</a> 创建画布与图像</h4><p>首先需要导入 Matplotlib 整体管理接口 (习惯上将其简写为 <code>plt</code>) <code>import matplotlib.pyplot as plt</code></p><p>通过管理接口的方法 <code>plt.figure(*, figsize = (6, 8), dpi = 100, layout)</code></p><ul><li><code>figsize</code> 二元素元组, 表示画布大小</li><li><code>dpi</code> 整数, 表示画布分辨率, 实际画布像素值即分辨率乘以大小</li><li><code>layout</code> 字符串, 画布布局引擎, 可参见<a href="#%E5%9B%BE%E5%83%8F%E5%B8%83%E5%B1%80%E5%BC%95%E6%93%8E">图像布局引擎</a></li><li>允许一个程序创建多个画布</li></ul><p>对于单图像的画布, 使用画布对象方法 <code>fig.add_subplot()</code> 即可创建图像<br> 如果一个画布上包含了多个图像, 参见<a href="#%E5%9B%BE%E5%83%8F%E5%B8%83%E5%B1%80">图像布局</a></p><h4 id="显示画布" tabindex="-1"><a class="header-anchor" href="#显示画布" aria-hidden="true">#</a> 显示画布</h4><p>需要通过管理接口 <code>plt</code> 的方法显示画布<br> 有以下两种常用方法</p><p>将画布直接显示到窗口中 <code>plt.show(block = True)</code></p><ul><li><code>block</code> 是否阻塞程序, 直到窗口关闭 <ul><li>如果不阻塞, 则要保证以一个主循环不断运行此函数, 用于需要交互的情况</li></ul></li><li>如果有管理多个画布, 则将显示多个窗口</li><li>在此方法中画布的大小设置不起作用</li></ul><p>将画布保存到文件中<br><code>fig / plt.savefig(fname)</code></p><ul><li><code>fname</code> 字符串, 保存文件名, 通过后缀确定文件类型, 支持 <code>.png</code>, <code>.svg</code> 等</li><li>对于多画布的情况, 建议通过画布对象调用</li></ul><h4 id="画布类与图像类" tabindex="-1"><a class="header-anchor" href="#画布类与图像类" aria-hidden="true">#</a> 画布类与图像类</h4><p>一般不直接访问画布类与图像类, 仅用于 TypeHint</p><ul><li>导入画布类 <code>from matplotlib.figure import Figure</code></li><li>导入图像类 <code>from matplotlib.axes import Axes</code></li></ul><h3 id="图像布局" tabindex="-1"><a class="header-anchor" href="#图像布局" aria-hidden="true">#</a> 图像布局</h3><p>此处主要介绍的为栅格布局, 即将画布划分为指定行列的栅格<br> 通过指定图像占据的栅格区域, 确定子图像的位置</p><h4 id="简单栅格布局" tabindex="-1"><a class="header-anchor" href="#简单栅格布局" aria-hidden="true">#</a> 简单栅格布局</h4><p>创建绝大多数的简单栅格布局<br><code>axes = fig.subplot_mosaic(mosaic, *, sharex = False, sharey = False, width_ratios = None, height_ratios = None)</code></p>',24),_=e("code",null,"mosaic",-1),k=e("li",null,"使用单个字符表示子图像标签, 一般为大写字母或数字",-1),x=e("li",null,"当一个子图像占据多个栅格时, 体现为同一个标签重复出现",-1),m=e("li",null,[a("使用字符 "),e("code",null,"."),a(" 表示该栅格不用于放置子图像")],-1),f=e("code",null,"r",-1),g=e("code",null,"c",-1),v=e("code",null,";",-1),E=e("li",null,[e("code",null,"width_ratios"),a(" 等于栅格列数的浮点数数组, 表明各列宽度比例 (默认全相等)")],-1),y=e("li",null,[e("code",null,"height_ratios"),a(" 等于栅格行数的浮点数数组, 含义类似 "),e("code",null,"width_ratios")],-1),B=e("li",null,[e("code",null,"sharex, sharey"),a(" 布尔值, 栅格间是否共享 x, y 轴")],-1),w=e("li",null,[a("返回值为一个以字符串为键名, 以对应图像对象 "),e("code",null,"Axes"),a(" 为键值的字典")],-1),A=s('<h4 id="创建栅格" tabindex="-1"><a class="header-anchor" href="#创建栅格" aria-hidden="true">#</a> 创建栅格</h4><p>创建栅格对象 <code>gs</code> <code>gs = fig.add_gridspec(nrows, ncols, **kwargs)</code></p><ul><li><code>nrows</code> 栅格行数</li><li><code>rcols</code> 栅格列数</li><li><code>**kwargs</code> 栅格设置, 具体见下</li></ul><p>常用的栅格设置有</p><ul><li><code>wspace</code> 浮点数, 每个栅格在宽度方向的外边距</li><li><code>hspace</code> 浮点数, 每个栅格在长度方向的外边距</li><li><code>width_ratios, height_ratios</code> 栅格比例, 具体含义见<a href="#%E7%AE%80%E5%8D%95%E6%A0%85%E6%A0%BC%E5%B8%83%E5%B1%80">简单栅格布局</a></li></ul><h4 id="通过栅格创建子图像" tabindex="-1"><a class="header-anchor" href="#通过栅格创建子图像" aria-hidden="true">#</a> 通过栅格创建子图像</h4><p>在指定的栅格区域上创建子图像 <code>axe = fig.add_subplot(pos = None, **kwargs)</code></p><ul><li><code>pos</code> 子图像占据的栅格区域, 通过栅格对象 <code>gs</code> 的 <code>[a, b]</code> 运算实现 <ul><li><code>a, b</code> 对应栅格的行与列索引, 从 <code>0</code> 开始</li><li>当传入单个数值时, 则索引单个栅格</li><li>支持 <code>b:e</code> 索引多个栅格实现跨栅格的子图像, 从索引 <code>b</code> 开始, 不包含 <code>e</code></li><li>当传入 <code>None</code> 时, 表明将整个图像区域都用于单个图像</li></ul></li><li><code>**kwargs</code> 子图像设置, 具体见下</li><li>返回值即子图像对象</li></ul><p>常用的子图像设置有</p><ul><li><code>projection = &quot;rectilinear&quot;</code> 传入字符串, 表示子图像类别, 如极坐标图, 常用的有 <ul><li><code>polar</code> 表示极坐标图</li><li><code>rectilinear</code> 表示二维空间坐标图</li><li><code>3d</code> 表示三维空间坐标图</li><li>其余图像主要用于地理</li></ul></li><li><code>sharex</code> 共用 x 轴的图像, 传入位于同列的子图像对象</li><li><code>sharey</code> 共用 y 轴的图像, 传入位于同行的子图像对象</li></ul><p>除了创建子图像, 还可以创建子画布<br><code>axe = fig.add_subfigure(subplotspec = None)</code></p><ul><li><code>subplotspec</code> 子画布占据的栅格区域, 具体使用同上</li><li>主要用于<a href="#%E5%BD%A9%E8%89%B2%E6%9D%A1">彩色条</a>等特殊的图像组合布局使用</li></ul><h4 id="子栅格图像" tabindex="-1"><a class="header-anchor" href="#子栅格图像" aria-hidden="true">#</a> 子栅格图像</h4><p>如果需要实现非比例的子图像排版, 可通过在已有的栅格区域下划分子栅格实现</p><p>在指定栅格区域或子栅格上创建子栅格 <code>sub_gs = gs[...]/sub_gs.subgridspec(nrows, ncols, **kwargs)</code></p><ul><li><code>nrows</code> 子栅格行数</li><li><code>rcols</code> 子栅格列数</li><li><code>**kwargs</code> 子栅格设置, 含义与<a href="#%E5%88%9B%E5%BB%BA%E6%A0%85%E6%A0%BC">创建栅格</a>中的参数相同</li></ul><p>与栅格不同, 子栅格只能以一个栅格放置一个图像, 且使用以下函数<br> 基于子栅格创建图像 <code>sub_gs.subplots(**kwargs)</code></p><ul><li><code>**kwargs</code> 子图像设置, 含义与<a href="#%E9%80%9A%E8%BF%87%E6%A0%85%E6%A0%BC%E5%88%9B%E5%BB%BA%E5%AD%90%E5%9B%BE%E5%83%8F">通过栅格创建子图像</a>中的参数相同</li></ul><h4 id="图像布局引擎" tabindex="-1"><a class="header-anchor" href="#图像布局引擎" aria-hidden="true">#</a> 图像布局引擎</h4><p>虽然栅格确定了子图像的位置, 但子图像间的边距等参数还需要使用布局引擎确定</p><p>设置子图像布局引擎 <code>fig.set_layout_engine(layout = None, **kwargs)</code></p><ul><li><code>layout</code> 使用的布局引擎, 传入 <code>None</code> 表示不布局, 其他使用字符串 <ul><li>默认情况下为 <code>None</code>, 此时不进行布局处理, 可能会出现图像重叠</li><li><code>constrained</code> 调整图像大小以防止图像间的元素重叠, 用于一般情况</li><li><code>compressed</code> 与 <code>constrained</code> 算法相同, 但会移除图像间的多余空间</li><li><code>tight</code> 调整图像参数以防止图像间的元素重叠</li></ul></li><li><code>**kwargs</code> 布局引擎设置, 具体见文档, 以下为常用的参数 <ul><li>参数 <code>h_pad</code> 子图像在长度方向的内边距</li><li>参数 <code>w_pad</code> 子图像在宽度方向的内边距</li><li>参数 <code>hspace</code> 子图像在长度方向的外边距 (<code>tight</code> 模式无此参数)</li><li>参数 <code>wspace</code> 子图像在宽度方向的外边距 (<code>tight</code> 模式无此参数)</li></ul></li></ul><h3 id="曲线图例" tabindex="-1"><a class="header-anchor" href="#曲线图例" aria-hidden="true">#</a> 曲线图例</h3><p>在 Matplotlib, 称图例为 Legend</p>',24),q=e("code",null,"axe.legend()",-1),N=e("br",null,null,-1),F={href:"https://matplotlib.org/stable/users/explain/axes/legend_guide.html#legend-guide",target:"_blank",rel:"noopener noreferrer"},C=e("h4",{id:"创建图例",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#创建图例","aria-hidden":"true"},"#"),a(" 创建图例")],-1),L=e("li",null,[a("基本图例设置 "),e("code",null,"axe.legend(labels)"),e("ul",null,[e("li",null,[e("code",null,"labels"),a(" 字符串列表, 依据图像定义顺序确定曲线图例标签")])])],-1),M=e("code",null,"axe.legend(handles = None, labels = None)",-1),j=e("li",null,[e("code",null,"handles"),a(" 曲线对象 (Line) 列表, 仅显示列表中的曲线对象的图例, 传入 "),e("code",null,"None"),a(" 时则显示全部图像的图例")],-1),D=e("li",null,[e("code",null,"labels"),a(" 字符串列表, 含义同上, 但当传入 "),e("code",null,"None"),a(" 时, 将通过定义曲线对象时的设置参数 "),e("code",null,"label"),a(" 确定图像的图例标签")],-1),X=e("code",null,"axe.plot",-1),z=e("code",null,"l, = axe.plot(x, y, label = ...)",-1),T=e("a",{href:"#%E5%8F%8C-xy-%E8%BD%B4"},"此处示例",-1),R=s('<h4 id="图例设置" tabindex="-1"><a class="header-anchor" href="#图例设置" aria-hidden="true">#</a> 图例设置</h4><ul><li><code>loc = &quot;best&quot;</code> 字符串, 表示图例的位置, 常用的有 <ul><li><code>best</code> 自动确定最佳位置</li><li><code>[upper / lower] right / left</code> 位于图像右侧或左侧, 前缀确定为上侧或下侧</li></ul></li><li><code>ncols = 1</code> 整数, 表示图例的列数</li><li><code>title = None</code> 字符串, 图例标题</li></ul><h3 id="图像坐标" tabindex="-1"><a class="header-anchor" href="#图像坐标" aria-hidden="true">#</a> 图像坐标</h3>',3),V={href:"https://matplotlib.org/stable/users/explain/axes/axes_ticks.html#locators-and-formatters",target:"_blank",rel:"noopener noreferrer"},G=s('<h4 id="坐标刻度" tabindex="-1"><a class="header-anchor" href="#坐标刻度" aria-hidden="true">#</a> 坐标刻度</h4><p>使用函数 <code>axe.set_xticks(ticks, labels = None, *, minor = False)</code> 手动创建坐标刻度</p><ul><li><code>ticks</code> 一维浮点数数组, 表示指定的刻度值, 传入空数组 <code>[]</code> 时将关闭图像刻度</li><li><code>labels</code> 一维浮点数或字符串数组, 表示刻度标签</li><li><code>minor</code> 布尔值, 传入 <code>True</code> 是表示使用次函数设置子刻度, 否则表示设置主刻度</li><li>对于 y 轴类似的有 <code>axe.set_yticks()</code></li><li>注意, 当主刻度与子刻度重合时, 子刻度将被忽略</li></ul><p>除了手动创建刻度, 还可使用以下设置方法, 通过刻度样式设置</p>',4),S=s("<li>首先需要导入刻度样式模块 <code>from matplotlib import ticker</code></li><li>模块中有如下常用的刻度定位样式 <ul><li><code>loc = ticker.MultipleLocator(base = 1.0)</code> 使用指定间隔的刻度</li><li><code>loc = ticker.LinearLocator(numticks = 11)</code> 根据指定的刻度数分配间隔</li><li><code>loc = ticker.FixedLocator(locs)</code> 使用指定的位置作为刻度位置</li><li><code>loc = ticker.AutoMinorLocator()</code> 自动设置子刻度 (用于需要生成子刻度但对刻度没有要求时使用)</li></ul></li>",2),W=e("code",null,"fmt = ticker.StrMethodFormatter(fmt)",-1),Y=e("code",null,"x",-1),$=e("code",null,"{x:.3f}%",-1),H=e("li",null,[e("code",null,"fmt = ticker.FixedFormatter(seq)"),a(" 使用指定的标签作为刻度标签")],-1),I=s('<li>为了使刻度样式生效, 还需要通过图像对象下的刻度对象 <code>axe.xaxis</code> (y 轴类似有 <code>axe.yaxis</code>) 的方法进行设置 <ul><li><code>axis.set_major_locator(loc)</code> 设置主刻度定位 (子刻度有 <code>axis.set_minor_locator(loc)</code>)</li><li><code>axis.set_major_formatter(fmt)</code> 设置主刻度定位 (子刻度有 <code>axis.set_minor_formatter(fmt)</code>)</li><li>对于对数轴等特殊刻度, 建议通过<a href="#%E5%9D%90%E6%A0%87%E5%B0%BA%E5%BA%A6">坐标尺度</a>设置</li></ul></li>',1),O=s(`<h4 id="坐标网格" tabindex="-1"><a class="header-anchor" href="#坐标网格" aria-hidden="true">#</a> 坐标网格</h4><p>使用函数 <code>axe.grid(visible, which = &quot;major&quot;, **kwargs)</code> 设置坐标网格</p><ul><li><code>visible</code> 布尔值, 设置坐标网格是否可见</li><li><code>which</code> 字符串, 坐标网格基于刻度, 可选择 <code>major</code>, <code>minor</code>, <code>both</code></li><li><code>kwargs</code> 直线样式相关参数, 可参见<a href="#%E6%9B%B2%E7%BA%BF%E6%A0%B7%E5%BC%8F">曲线样式</a></li><li>如果需要单独设置 x, y 轴的网格 (体现为刻度线的延长线), 需要单独调用刻度对象的同名方法, 如 <code>axe.xaxis.grid(True)</code></li></ul><p>利用子刻度与网格实现类似水平线的效果 (仅用于示例, 更推荐使用<a href="#%E8%BE%85%E5%8A%A9%E7%9B%B4%E7%BA%BF">辅助直线</a>实现相同效果)</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> ticker
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt

fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>
axe <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token punctuation">)</span>
t <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span>

l1<span class="token punctuation">,</span> <span class="token operator">=</span> axe<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token punctuation">(</span>t <span class="token operator">-</span> <span class="token number">0.3</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">&#39;C0&#39;</span><span class="token punctuation">)</span>

axe<span class="token punctuation">.</span>xaxis<span class="token punctuation">.</span>set_major_locator<span class="token punctuation">(</span>ticker<span class="token punctuation">.</span>MultipleLocator<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
axe<span class="token punctuation">.</span>set_xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;peak&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> minor <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
axe<span class="token punctuation">.</span>xaxis<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">&#39;minor&#39;</span><span class="token punctuation">,</span> linestyle <span class="token operator">=</span> <span class="token string">&#39;--&#39;</span><span class="token punctuation">)</span>

axe<span class="token punctuation">.</span>tick_params<span class="token punctuation">(</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span> which <span class="token operator">=</span> <span class="token string">&#39;minor&#39;</span><span class="token punctuation">,</span> labelrotation <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码运行效果</p><figure><img src="`+p+'" alt="" tabindex="0"><figcaption></figcaption></figure><h4 id="刻度样式" tabindex="-1"><a class="header-anchor" href="#刻度样式" aria-hidden="true">#</a> 刻度样式</h4><p>使用函数 <code>axe.tick_params(axis = &quot;both&quot;, *, which = &quot;major&quot;, **kwargs)</code> 设置刻度样式</p><ul><li><code>axis</code> 字符串, 设置样式的轴, 可选择 <code>x</code>, <code>y</code>, <code>both</code></li><li><code>which</code> 字符串, 设置样式的刻度, 可选择 <code>major</code>, <code>minor</code>, <code>both</code></li><li><code>kwargs</code> 刻度样式相关参数, 具体见下介绍</li></ul><p>对于刻度样式参数, 常用的有</p><ul><li><code>direction = &quot;out&quot;</code> 字符串, 刻度是否直线图像内, 可选择 <code>in</code>, <code>out</code>, <code>both</code></li><li><code>labelsize</code> 浮点数, 刻度标签的字体大小</li><li><code>labelcolor</code> <a href="#%E9%A2%9C%E8%89%B2%E6%A0%B7%E5%BC%8F">颜色样式</a>, 标签颜色</li><li><code>labelrotation</code> 浮点数, 刻度标签的旋转角度, 单位为度</li></ul><h4 id="坐标尺度" tabindex="-1"><a class="header-anchor" href="#坐标尺度" aria-hidden="true">#</a> 坐标尺度</h4><p>使用函数 <code>axe.set_xscale(value = &quot;linear&quot;)</code> 设置 x 坐标尺度</p><ul><li><code>value</code> 坐标尺度类型, 使用字符串表示常用有 <ul><li><code>linear</code> 线性坐标尺度, 每个刻度值间隔相同 (关于设置间隔参见<a href="#%E5%9D%90%E6%A0%87%E5%88%BB%E5%BA%A6">坐标刻度</a>)</li><li><code>log</code> 对数坐标尺度, 每个刻度值间间隔相同比例, 有以下专用设置 <ul><li><code>base = 10</code> 传入浮点数, 表示对数刻度的底数</li><li><code>subs = None</code> 传入小于底数的浮点数列表, 表示子刻度, 体现为 <code>subs[i] * ticks</code></li></ul></li><li><code>symlog</code> 对称对数尺度, 正负使用对数尺度, 在接近 0 的位置使用线性尺度, 有以下专用设置 <ul><li><code>base, subs</code> 与对数坐标尺度含义相同</li><li><code>linthresh = 2</code> 线性区域范围, 在该区域内将使用线性尺度</li><li><code>linscale = 1</code> 线性区域相对对数区域一个刻度的比例</li></ul></li></ul></li><li>除了 <code>linear</code>, 其他样式都将自动设置刻度位置与标签</li><li>对于 y 轴类似的有 <code>axe.set_yscale(value = &quot;linear&quot;)</code></li></ul>',15),P={href:"https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.set_xscale.html#matplotlib.axes.Axes.set_xscale",target:"_blank",rel:"noopener noreferrer"},J=s(`<h4 id="双-x-y-轴" tabindex="-1"><a class="header-anchor" href="#双-x-y-轴" aria-hidden="true">#</a> 双 x/y 轴</h4><ul><li>创建一个具有双 y 轴的图像 <code>atx = axe.twinx()</code></li><li>创建一个具有双 x 轴的图像 <code>aty = axe.twinx()</code></li><li>函数返回值同样为一个图像对象 (Axes), 但是建议仅调用该对象与绘图以及对应刻度设置有关的方法</li><li>双 x / y 轴图像中建议使用<a href="#%E6%9B%B2%E7%BA%BF%E5%9B%BE%E4%BE%8B">指定图像图例</a>的方式创建图例, 可参考如下示例</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt

fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>
axe <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token punctuation">)</span>
t <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span>
l1<span class="token punctuation">,</span> <span class="token operator">=</span> axe<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token punctuation">(</span>t <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">,</span> label <span class="token operator">=</span> <span class="token string">&quot;line 1&quot;</span><span class="token punctuation">)</span>
axe2 <span class="token operator">=</span> axe<span class="token punctuation">.</span>twinx<span class="token punctuation">(</span><span class="token punctuation">)</span>
l2<span class="token punctuation">,</span> <span class="token operator">=</span> axe2<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">*</span> t<span class="token punctuation">,</span> label <span class="token operator">=</span> <span class="token string">&quot;line 2&quot;</span><span class="token punctuation">)</span>
axe<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>handles <span class="token operator">=</span> <span class="token punctuation">[</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">]</span><span class="token punctuation">,</span> loc <span class="token operator">=</span> <span class="token string">&quot;lower right&quot;</span><span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码运行效果</p><figure><img src="`+u+'" alt="" tabindex="0"><figcaption></figcaption></figure><h3 id="图像其他设置" tabindex="-1"><a class="header-anchor" href="#图像其他设置" aria-hidden="true">#</a> 图像其他设置</h3><h4 id="图像分辨率与大小" tabindex="-1"><a class="header-anchor" href="#图像分辨率与大小" aria-hidden="true">#</a> 图像分辨率与大小</h4><p>使用 <code>axe.set_aspect(aspect)</code> 设置图像的分辨率 (图像长度与实际长度的比例)</p><ul><li><code>aspect</code> 长宽比设置, 可以使用以下值 <ul><li><code>auto</code> 自动选择 x, y 方向的分辨率</li><li><code>equal</code> x, y 方向具有相同的分辨率</li><li>浮点数, y 方向的分辨率为参数值乘以 x 方向的分辨率</li></ul></li></ul><p>使用 <code>axe.set_box_aspect(aspect = None)</code> 设置图像的长宽比</p><ul><li><code>aspect</code> 传入浮点数表示图像长宽比, 传入 <code>None</code> 将自动设置</li></ul><h4 id="坐标范围" tabindex="-1"><a class="header-anchor" href="#坐标范围" aria-hidden="true">#</a> 坐标范围</h4>',12),K={href:"https://matplotlib.org/stable/users/explain/axes/autoscale.html",target:"_blank",rel:"noopener noreferrer"},Q=s('<ul><li>设置 x 坐标范围 <code>axe.set_xlim(left = None, right = None)</code></li><li>设置 y 坐标范围 <code>axe.set_ylim(left = None, right = None)</code></li><li>基于图像内容设置坐标范围 <code>axe.margins(*margins = (0.05, 0.05))</code><ul><li>传入单个参数时, 将自动设置坐标范围, 使图像内容与边框间的空隙占整个边框长度为指定的比例</li><li>传入多个参数时, 将分别设置 x, y, z 轴的空隙占比</li><li>允许传入负数, 此时将体现为显示局部的图像内容</li></ul></li></ul><h4 id="设置轴标签" tabindex="-1"><a class="header-anchor" href="#设置轴标签" aria-hidden="true">#</a> 设置轴标签</h4><ul><li>设置图像的 X 轴标签 <code>axe.set_xlabel(xlabel)</code></li><li>设置图像的 Y 轴标签 <code>axe.set_ylabel(ylabel)</code></li><li>设置画布的 X 轴标签 <code>fig.supxlabel(xlabel)</code></li><li>设置画布的 Y 轴标签 <code>fig.supylabel(ylabel)</code></li></ul><h4 id="设置图像与画布标题" tabindex="-1"><a class="header-anchor" href="#设置图像与画布标题" aria-hidden="true">#</a> 设置图像与画布标题</h4><ul><li>设置图像的标题 <code>axe.set_title(label)</code></li><li>设置图像的 Y 轴标签 <code>axe.suptitle(t)</code></li></ul><h2 id="基本二维图像" tabindex="-1"><a class="header-anchor" href="#基本二维图像" aria-hidden="true">#</a> 基本二维图像</h2><h3 id="平面曲线图像" tabindex="-1"><a class="header-anchor" href="#平面曲线图像" aria-hidden="true">#</a> 平面曲线图像</h3><h4 id="基本曲线" tabindex="-1"><a class="header-anchor" href="#基本曲线" aria-hidden="true">#</a> 基本曲线</h4><h4 id="离散曲线" tabindex="-1"><a class="header-anchor" href="#离散曲线" aria-hidden="true">#</a> 离散曲线</h4><h4 id="填充区域" tabindex="-1"><a class="header-anchor" href="#填充区域" aria-hidden="true">#</a> 填充区域</h4><h3 id="平面散点图像" tabindex="-1"><a class="header-anchor" href="#平面散点图像" aria-hidden="true">#</a> 平面散点图像</h3><h4 id="基本散点图" tabindex="-1"><a class="header-anchor" href="#基本散点图" aria-hidden="true">#</a> 基本散点图</h4><h4 id="矢量场图" tabindex="-1"><a class="header-anchor" href="#矢量场图" aria-hidden="true">#</a> 矢量场图</h4><h3 id="平面网格图像" tabindex="-1"><a class="header-anchor" href="#平面网格图像" aria-hidden="true">#</a> 平面网格图像</h3><h4 id="等高线图" tabindex="-1"><a class="header-anchor" href="#等高线图" aria-hidden="true">#</a> 等高线图</h4><h4 id="分层设色图" tabindex="-1"><a class="header-anchor" href="#分层设色图" aria-hidden="true">#</a> 分层设色图</h4><h4 id="一般图片" tabindex="-1"><a class="header-anchor" href="#一般图片" aria-hidden="true">#</a> 一般图片</h4><h3 id="平面统计图像" tabindex="-1"><a class="header-anchor" href="#平面统计图像" aria-hidden="true">#</a> 平面统计图像</h3><h4 id="直方图" tabindex="-1"><a class="header-anchor" href="#直方图" aria-hidden="true">#</a> 直方图</h4><h4 id="饼图" tabindex="-1"><a class="header-anchor" href="#饼图" aria-hidden="true">#</a> 饼图</h4><h4 id="误差盒" tabindex="-1"><a class="header-anchor" href="#误差盒" aria-hidden="true">#</a> 误差盒</h4><h3 id="三维图像" tabindex="-1"><a class="header-anchor" href="#三维图像" aria-hidden="true">#</a> 三维图像</h3><h4 id="创建三维图像" tabindex="-1"><a class="header-anchor" href="#创建三维图像" aria-hidden="true">#</a> 创建三维图像</h4><h4 id="三维曲线" tabindex="-1"><a class="header-anchor" href="#三维曲线" aria-hidden="true">#</a> 三维曲线</h4><h4 id="三维曲面" tabindex="-1"><a class="header-anchor" href="#三维曲面" aria-hidden="true">#</a> 三维曲面</h4><h4 id="三维散点图像" tabindex="-1"><a class="header-anchor" href="#三维散点图像" aria-hidden="true">#</a> 三维散点图像</h4><h3 id="样式设置" tabindex="-1"><a class="header-anchor" href="#样式设置" aria-hidden="true">#</a> 样式设置</h3><h4 id="颜色样式" tabindex="-1"><a class="header-anchor" href="#颜色样式" aria-hidden="true">#</a> 颜色样式</h4>',28),U={href:"https://matplotlib.org/stable/users/explain/colors/colors.html#cn-color-selection",target:"_blank",rel:"noopener noreferrer"},Z=s("<p>在 Matplotlib 中, 一般使用浮点数, 元组, 字符串表示颜色样式, 常用的有 (其他见上述参考链接)</p><ul><li>预设颜色序列, 使用字符串 <code>C0</code> 到 <code>C9</code> 表示, 无特殊需求推荐使用此方法</li><li>灰度颜色, 使用 <code>[0, 1]</code> 的浮点数表示灰度颜色, 用于黑白打印</li><li>RGB 元组, 使用三元素元组表示 RGB 颜色 <code>(R, G, B)</code>, 颜色值取值范围为 <code>[0, 1]</code></li><li>标准颜色, 使用单个字符表示标准颜色, 如 <code>b</code> 表示蓝色, <code>g</code> 表示绿色, <code>k</code> 表示黑色</li><li>无颜色, 使用空值 <code>None</code> 表示</li></ul><p>对于图像与标记, 通常都有以下参数用于设置颜色</p>",3),ee=e("li",null,[e("code",null,"color"),a(" 设置图像 / 标记主要部分的颜色")],-1),ae=e("code",null,"cmap",-1),ne={href:"https://matplotlib.org/stable/gallery/color/colormap_reference.html",target:"_blank",rel:"noopener noreferrer"},se=e("li",null,[e("code",null,"alpha"),a(" 设置透明度, 取值范围为 "),e("code",null,"[0, 1]"),a(", 越小越透明")],-1),oe=e("h4",{id:"标记点样式",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#标记点样式","aria-hidden":"true"},"#"),a(" 标记点样式")],-1),le={href:"https://matplotlib.org/stable/gallery/lines_bars_and_markers/marker_reference.html",target:"_blank",rel:"noopener noreferrer"},te=s('<p>对于标记点, 通常有以下参数用于设置其</p><ul><li><code>marker</code> 标记点样式, 使用字符串表示, 常用的有:<br><code>o</code> 圆形标记, <code>x</code> 交叉标记, <code>D</code> 菱形标记, <code>v</code> 倒三角标记, <code>s</code> 正方形标记, <code>none</code> 无标记</li><li><code>markersize</code> 标记大小, 传入整数</li><li><code>markerfacecolor</code> 标记填充颜色, 传入<a href="#%E9%A2%9C%E8%89%B2%E6%A0%B7%E5%BC%8F">颜色样式</a></li><li><code>markeredgecolor</code> 标记边缘颜色, 传入<a href="#%E9%A2%9C%E8%89%B2%E6%A0%B7%E5%BC%8F">颜色样式</a></li></ul><h4 id="线条样式" tabindex="-1"><a class="header-anchor" href="#线条样式" aria-hidden="true">#</a> 线条样式</h4>',3),ie={href:"https://matplotlib.org/stable/gallery/lines_bars_and_markers/linestyles.html#linestyles",target:"_blank",rel:"noopener noreferrer"},ce=s('<p>对于线条样式, 通常有以下参数用于设置</p><ul><li><code>linestyle</code> 线条样式, 使用字符串表示, 常用的有:<br><code>-</code> 实线, <code>--</code> 虚线, <code>-.</code> 点划线, <code>:</code> 点线, <code>none</code> 无线条</li><li><code>linewidth</code> 线条跨度, 传入整数</li></ul><h2 id="标记绘制" tabindex="-1"><a class="header-anchor" href="#标记绘制" aria-hidden="true">#</a> 标记绘制</h2><h3 id="平面物件" tabindex="-1"><a class="header-anchor" href="#平面物件" aria-hidden="true">#</a> 平面物件</h3><h4 id="取值强调" tabindex="-1"><a class="header-anchor" href="#取值强调" aria-hidden="true">#</a> 取值强调</h4><h4 id="辅助直线" tabindex="-1"><a class="header-anchor" href="#辅助直线" aria-hidden="true">#</a> 辅助直线</h4><h4 id="彩色条" tabindex="-1"><a class="header-anchor" href="#彩色条" aria-hidden="true">#</a> 彩色条</h4><h3 id="文字标记" tabindex="-1"><a class="header-anchor" href="#文字标记" aria-hidden="true">#</a> 文字标记</h3>',8),de={href:"https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.annotate.html#matplotlib.axes.Axes.annotate",target:"_blank",rel:"noopener noreferrer"},re=e("h4",{id:"标记绘制函数",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#标记绘制函数","aria-hidden":"true"},"#"),a(" 标记绘制函数")],-1),pe=e("p",null,[e("code",null,"zorder")],-1),ue=e("h4",{id:"箭头样式",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#箭头样式","aria-hidden":"true"},"#"),a(" 箭头样式")],-1),he={href:"https://matplotlib.org/stable/users/explain/text/annotations.html#annotating-with-arrows",target:"_blank",rel:"noopener noreferrer"},be=e("h4",{id:"文本边框",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#文本边框","aria-hidden":"true"},"#"),a(" 文本边框")],-1),_e={href:"https://matplotlib.org/stable/users/explain/text/annotations.html#annotating-with-boxed-text",target:"_blank",rel:"noopener noreferrer"},ke=e("h4",{id:"其他样式设置",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#其他样式设置","aria-hidden":"true"},"#"),a(" 其他样式设置")],-1),xe=e("br",null,null,-1),me={href:"https://matplotlib.org/stable/users/explain/text/annotations.html#coordinate-systems-for-annotations",target:"_blank",rel:"noopener noreferrer"},fe=e("ul",null,[e("li",null,[e("code",null,"axes fraction")]),e("li",null,[e("code",null,"data")])],-1),ge=e("br",null,null,-1),ve={href:"https://matplotlib.org/stable/gallery/text_labels_and_annotations/text_alignment.html",target:"_blank",rel:"noopener noreferrer"},Ee=s('<h3 id="多边形" tabindex="-1"><a class="header-anchor" href="#多边形" aria-hidden="true">#</a> 多边形</h3><h4 id="平面多边形" tabindex="-1"><a class="header-anchor" href="#平面多边形" aria-hidden="true">#</a> 平面多边形</h4><h4 id="三维多边形" tabindex="-1"><a class="header-anchor" href="#三维多边形" aria-hidden="true">#</a> 三维多边形</h4><h2 id="其他使用说明" tabindex="-1"><a class="header-anchor" href="#其他使用说明" aria-hidden="true">#</a> 其他使用说明</h2><h3 id="使用-latex" tabindex="-1"><a class="header-anchor" href="#使用-latex" aria-hidden="true">#</a> 使用 Latex</h3><p>Matplotlib 可以绘制简单的行内 Latex (不支持宏包)<br> 可以实现希腊字母, 上下标, 简单数学符号的绘制</p><p>使用时注意</p><ol><li>需要转换的部分使用 <code>$...$</code> 包括</li><li>由于反斜杠 <code>\\</code> 也是字符串转义符, 因此需要使用双反斜杠, 或使用 <code>r&#39;...&#39;</code>, 不对字符串转义</li><li>为了更好的分式显示效果, 最好使用 <code>\\dfrac</code> 表示分式</li><li>在配合 <code>str.format</code> 使用时, <code>{...}</code> 应改为 <code>{{...}}</code></li></ol><h3 id="使用中文" tabindex="-1"><a class="header-anchor" href="#使用中文" aria-hidden="true">#</a> 使用中文</h3><p>默认情况下 Matplotlib 不支持中文, 需要进行以下设置</p>',10),ye=e("li",null,[a("打开模块资源文件夹 "),e("code",null,".../anaconda3/envs/[python 环境名]/Lib/site-packages/matplotlib/mpl-data"),a(" (或 "),e("code",null,"miniconda3"),a(")")],-1),Be={href:"https://github.com/adobe-fonts/source-han-sans/releases/tag/2.004R",target:"_blank",rel:"noopener noreferrer"},we=s("<li>打开模块设置文件夹 <ul><li><code>C:\\用户\\[用户名]\\.matplotlib\\matplotlibrc</code> (Windows)</li><li><code>$HOME/.config/matplotlib/matplotlibrc</code> (Linux)</li></ul></li><li>打开模块设置文件夹下的 <code>fontlist-v330.json</code>, 并在键 <code>ttflist</code> 下的数组中添加如下方代码所示的结构体 <ul><li>将键 <code>fname</code> 的值改为字体路径, Windows 下安装字体后一般位于文件夹 <code>C:\\\\Windows\\\\Fonts</code></li><li>将键 <code>name</code> 的值改为字体名称, 一般输入文件名即可</li></ul></li><li>将模块资源文件夹下的 <code>matplotlibrc</code> 文件复制到模块设置文件夹并打开复制后的文件, 进行以下修改 <ol><li><code>font.family</code> 删除该选项前的 <code>#</code></li><li><code>font.sans-serif</code> 删除该选项前的 <code>#</code>, 在冒号后添加之前添加结构体中键 <code>name</code> 的值</li></ol></li>",3),Ae=s(`<p>结构体示例</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;fname&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Path\\\\to\\\\font\\\\XXX.ttf&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;XXX&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;style&quot;</span><span class="token operator">:</span> <span class="token string">&quot;normal&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;variant&quot;</span><span class="token operator">:</span> <span class="token string">&quot;normal&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;weight&quot;</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span>
    <span class="token property">&quot;stretch&quot;</span><span class="token operator">:</span> <span class="token string">&quot;normal&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;size&quot;</span><span class="token operator">:</span> <span class="token string">&quot;scalable&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;__class__&quot;</span><span class="token operator">:</span> <span class="token string">&quot;FontEntry&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="动画绘制" tabindex="-1"><a class="header-anchor" href="#动画绘制" aria-hidden="true">#</a> 动画绘制</h3>`,3);function qe(Ne,Fe){const l=i("RouterLink"),o=i("ExternalLinkIcon");return d(),r("div",null,[b,e("ul",null,[e("li",null,[_,a(" 字符串, 通过字符串表示栅格行列, 各子图像占据栅格位置等信息 "),e("ul",null,[k,x,m,e("li",null,[a("字符串具有 "),f,a(" 行 "),g,a(" 列的字符, 其中使用字符 "),v,a(" 可表示换行, 或使用"),n(l,{to:"/coding/py/base/base.html#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%A8%E7%A4%BA"},{default:t(()=>[a("多行字符串")]),_:1})])])]),E,y,B,w]),A,e("p",null,[a("使用 "),q,a(" 为图像创建图例"),N,a(" 更多参见 "),e("a",F,[a("https://matplotlib.org/stable/users/explain/axes/legend_guide.html#legend-guide"),n(o)])]),C,e("ul",null,[L,e("li",null,[a("显示指定图像的图例 "),M,e("ul",null,[j,D,e("li",null,[a("注意, "),X,a(" 的返回值为曲线对象列表, 因此接收单条曲线的曲线对象时应使用"),n(l,{to:"/coding/py/base/base.html#%E5%BA%8F%E5%88%97%E7%B1%BB%E5%9E%8B"},{default:t(()=>[a("序列解包语法")]),_:1}),a(", 如 "),z,a(", 可参见"),T])])])]),R,e("p",null,[a("更多参见 "),e("a",V,[a("https://matplotlib.org/stable/users/explain/axes/axes_ticks.html#locators-and-formatters"),n(o)])]),G,e("ul",null,[S,e("li",null,[a("模块中有如下常用的刻度标签样式 "),e("ul",null,[e("li",null,[W,a(" 将原始刻度值 (浮点数) 以名称 "),Y,a(" 传入指定的"),n(l,{to:"/coding/py/base/base.html#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%A1%A8%E7%A4%BA%E6%96%B9%E6%B3%95"},{default:t(()=>[a("格式化字符串")]),_:1}),a("格式化作为刻度标签, 如 "),$]),H])]),I]),O,e("p",null,[a("更多尺度与使用方法参见 "),e("a",P,[a("https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.set_xscale.html#matplotlib.axes.Axes.set_xscale"),n(o)])]),J,e("p",null,[a("更多参见 "),e("a",K,[a("https://matplotlib.org/stable/users/explain/axes/autoscale.html"),n(o)])]),Q,e("p",null,[a("参见 "),e("a",U,[a("https://matplotlib.org/stable/users/explain/colors/colors.html#cn-color-selection"),n(o)])]),Z,e("ul",null,[ee,e("li",null,[ae,a(" 设置色彩映射, 参见"),e("a",ne,[a("官网介绍"),n(o)])]),se]),oe,e("p",null,[a("参见 "),e("a",le,[a("https://matplotlib.org/stable/gallery/lines_bars_and_markers/marker_reference.html"),n(o)])]),te,e("p",null,[a("参见 "),e("a",ie,[a("https://matplotlib.org/stable/gallery/lines_bars_and_markers/linestyles.html#linestyles"),n(o)])]),ce,e("p",null,[a("参考 "),e("a",de,[a("https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.annotate.html#matplotlib.axes.Axes.annotate"),n(o)])]),re,pe,ue,e("p",null,[e("a",he,[a("https://matplotlib.org/stable/users/explain/text/annotations.html#annotating-with-arrows"),n(o)])]),be,e("p",null,[e("a",_e,[a("https://matplotlib.org/stable/users/explain/text/annotations.html#annotating-with-boxed-text"),n(o)])]),ke,e("p",null,[a("坐标参考"),xe,e("a",me,[a("https://matplotlib.org/stable/users/explain/text/annotations.html#coordinate-systems-for-annotations"),n(o)])]),fe,e("p",null,[a("对齐方向"),ge,e("a",ve,[a("https://matplotlib.org/stable/gallery/text_labels_and_annotations/text_alignment.html"),n(o)])]),Ee,e("ol",null,[ye,e("li",null,[a("将中文黑体如"),e("a",Be,[a("思源黑体"),n(o)]),a("并安装或放置在特定字体文件夹 (对后缀无要求, 最好使用新字体)")]),we]),Ae])}const Me=c(h,[["render",qe],["__file","matplotlib_new.html.vue"]]);export{Me as default};
