import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as r,c as i,e as a}from"./app-8c5ce49e.js";const t={},l=a('<h1 id="中断管理" tabindex="-1"><a class="header-anchor" href="#中断管理" aria-hidden="true">#</a> 中断管理</h1><h2 id="freertos的中断管理" tabindex="-1"><a class="header-anchor" href="#freertos的中断管理" aria-hidden="true">#</a> FreeRTOS的中断管理</h2><ul><li>FreeRTOS对于中断没有特别的处理程序</li><li>对于大部分内核函数<mark>不能</mark>在中断内调用, 或者要调用中断版本 XXXFromISR (如果是 CMSIS RTOS, 可以调用部分函数, 但参数有限制)</li><li>即使是拥有最小优先级的中断也会打断拥有最高优先级的任务</li></ul><h2 id="延迟中断处理" tabindex="-1"><a class="header-anchor" href="#延迟中断处理" aria-hidden="true">#</a> 延迟中断处理</h2><ul><li>在竞争调度模式下, 小优先级任务进入中断后, 离开中断时, 是否继续执行小优先级任务需要使用函数 portYIELD_FROM_ISR(BaseType_t xHigherPriorityTaskWoken) 决定 (参数 pdFALSE 时不发生切换)</li><li>中断会打断内核, 当中断持续时间过长或调用内核函数, 将导致系统不稳定, 通过延迟中断, 将控制权移交回内核, 可以让程序更加稳定</li></ul><ol><li>可以将中断处理任务定为最高优先级的任务, 并使用信号量阻塞</li><li>在中断函数中, 清除中断标志后, 给出信号量, 并使用 portYIELD_FROM_ISR, 进入处理任务</li></ol>',6),o=[l];function n(h,s){return r(),i("div",null,o)}const _=e(t,[["render",n],["__file","interrupt.html.vue"]]);export{_ as default};
