import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as e,e as s}from"./app-8c5ce49e.js";const i={},d=s(`<h1 id="twincat3-编程基础" tabindex="-1"><a class="header-anchor" href="#twincat3-编程基础" aria-hidden="true">#</a> TwinCat3 编程基础</h1><p>笔记介绍 TwinCAT3 编程语言的 IEC61131-3 标准</p><h2 id="杂项" tabindex="-1"><a class="header-anchor" href="#杂项" aria-hidden="true">#</a> 杂项</h2><h3 id="注释" tabindex="-1"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h3><ul><li>行内注释 <code>(* ... *)</code></li><li>行末注释 <code>// ...</code></li></ul><p>注释尽量不使用中文</p><h3 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h3><table><thead><tr><th>操作</th><th>符号</th></tr></thead><tbody><tr><td>括号</td><td>()</td></tr><tr><td>函数调用</td><td>函数名</td></tr><tr><td>逻辑取反</td><td>NOT</td></tr><tr><td>负数</td><td>-</td></tr><tr><td>四则运算</td><td>* / + -</td></tr><tr><td>比较</td><td>&lt; &gt; &lt;= &gt;=</td></tr><tr><td>等于</td><td>=</td></tr><tr><td>不等于</td><td>&lt;&gt;</td></tr><tr><td>逻辑运算</td><td>AND XOR OR</td></tr></tbody></table><h3 id="调试技巧" tabindex="-1"><a class="header-anchor" href="#调试技巧" aria-hidden="true">#</a> 调试技巧</h3><h4 id="在线修改变量值" tabindex="-1"><a class="header-anchor" href="#在线修改变量值" aria-hidden="true">#</a> 在线修改变量值</h4><p>当 PLC 在运行时, 在监视窗口 (通常隐藏在程序编辑器上方下拉条内) 内可以查看与修改变量<br> 首先双击准备值, 输入希望修改的值, 再点击 <code>所有在线应用中写入值</code> (图标栏, 往左数第三列, 第三个图标), 应用<br> 点击 <code>冷复位</code> (图标栏, 往左数第二列, 第一个图标) 则可以使值回到定义的初始值</p><h4 id="查看定义" tabindex="-1"><a class="header-anchor" href="#查看定义" aria-hidden="true">#</a> 查看定义</h4><p>右键子程序, 程序, 变量名的, 可在菜单中选择转到定义, 快速查看其定义</p><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><h3 id="变量类型" tabindex="-1"><a class="header-anchor" href="#变量类型" aria-hidden="true">#</a> 变量类型</h3><h4 id="常用变量类型" tabindex="-1"><a class="header-anchor" href="#常用变量类型" aria-hidden="true">#</a> 常用变量类型</h4><table><thead><tr><th>类型名</th><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>BOOL</td><td>布尔型</td><td>取值有 False 或 True (可以全大写 / 小写)</td></tr><tr><td>BYTE</td><td>字节</td><td>8 位无符号整数, 可使用 <code>val.x</code> 取变量第 x 位二进制位的值 (BOOL) 类型</td></tr><tr><td>INT</td><td>整数</td><td>32 位有符号整数</td></tr><tr><td>REAL</td><td>实数</td><td>32 位浮点数</td></tr><tr><td>LREAL</td><td>长实数</td><td>64 位浮点数</td></tr><tr><td>TIME</td><td>时间</td><td>32 位时间, 使用 <code>T#[w]H[x]m[y]s[z]ms</code> 表示</td></tr><tr><td>STRING(n)</td><td>ACSII 字符串</td><td>n 为字符数, 最多有 255 个字符</td></tr><tr><td>POINTER TO [TYPE]</td><td>指针</td><td>使用 <code>ADR(val)</code> 取地址, 使用 <code>val^</code> 获取指针指向的变量</td></tr></tbody></table><h4 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h4><p><code>ARRAY[a...b(, ...)] OF TYPE</code></p><ul><li><code>a</code> 数组索引下限</li><li><code>b</code> 数组索引上限</li><li><code>TYPE</code> 数组类型</li><li>多维数组使用逗号隔开确定其他维度的索引</li></ul><p>使用 <code>val[i(, j, ...)]</code> 索引数组</p><h4 id="复合类型" tabindex="-1"><a class="header-anchor" href="#复合类型" aria-hidden="true">#</a> 复合类型</h4><p>在资源管理器中右击 DUTs, 然后点击 Add, 然后选择 DUT , 在对话框内选择相应的数据类型进行定义</p><h5 id="联合体" tabindex="-1"><a class="header-anchor" href="#联合体" aria-hidden="true">#</a> 联合体</h5><p>联合体内的成员变量公用同一块内存空间<br> 使用 <code>var.member</code> 的方式访问成员</p><div class="language-iecst line-numbers-mode" data-ext="iecst"><pre class="language-iecst"><code><span class="token keyword">TYPE</span> <span class="token punctuation">[</span>NAME<span class="token punctuation">]</span> <span class="token operator">:</span>
UNION
    <span class="token punctuation">[</span>DEF<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
END_UNION
<span class="token keyword">END_TYPE</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>NAME</code> 联合体类型名</li><li><code>DEF</code> 联合体成员变量定义 (类似变量定义，仅有变量名与类型)</li></ul><h5 id="结构体" tabindex="-1"><a class="header-anchor" href="#结构体" aria-hidden="true">#</a> 结构体</h5><p>结构体为一系列变量的结合</p><div class="language-iecst line-numbers-mode" data-ext="iecst"><pre class="language-iecst"><code><span class="token keyword">TYPE</span> <span class="token punctuation">[</span>NAME<span class="token punctuation">]</span> <span class="token operator">:</span>
<span class="token keyword">STRUCT</span>
    <span class="token punctuation">[</span>DEF<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">END_STRUCT</span>
<span class="token keyword">END_TYPE</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>NAME</code> 结构体类型名</li><li><code>DEF</code> 结构体成员变量定义 (类似变量定义，仅有变量名与类型)</li></ul><p>使用 <code>var.member</code> 的方式访问成员<br> 结构体允许以其他结构体或<mark>数组作为成员类型</mark><br> 可用于包裹数组, 以使函数返回数组</p><h5 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举" aria-hidden="true">#</a> 枚举</h5><p>枚举使用助记词对应特定的数值<br> 使用 <code>name.def</code> 的方式表示特定助记词</p><div class="language-iecst line-numbers-mode" data-ext="iecst"><pre class="language-iecst"><code><span class="token keyword">TYPE</span> <span class="token punctuation">[</span>NAME<span class="token punctuation">]</span> <span class="token operator">:</span>
<span class="token punctuation">(</span>
    <span class="token punctuation">[</span>OPT<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token operator">:=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">END_TYPE</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>NAME</code> 枚举类型名</li><li><code>OPT</code> 助记词名称</li><li><code>:=...</code> 助记词取值，默认为按顺序确定</li></ul><h3 id="变量声明" tabindex="-1"><a class="header-anchor" href="#变量声明" aria-hidden="true">#</a> 变量声明</h3><p>变量声明代码需写在在程序区上方的变量声明区中</p><h4 id="单个变量" tabindex="-1"><a class="header-anchor" href="#单个变量" aria-hidden="true">#</a> 单个变量</h4><p><code>NAME ([AT%I/Q][*]) : TYPE [:= ...];</code></p><ul><li><code>NAME</code> 变量名称</li><li><code>AT%I/Q</code> 变脸使用方式，<code>I</code> 表示输入量，<code>Q</code> 表示输出量</li><li><code>*</code> 变量地址 <ul><li><code>*</code> 表示自动分配</li><li><code>[B/W/D][n.m]</code> <code>B, W, D</code> 表示长度, <code>n.m</code> 表示变量地址</li></ul></li><li><code>TYPE</code> 变量类型</li><li><code>:= ...</code> 变量初值</li></ul><h4 id="局部变量声明" tabindex="-1"><a class="header-anchor" href="#局部变量声明" aria-hidden="true">#</a> 局部变量声明</h4><div class="language-iecst line-numbers-mode" data-ext="iecst"><pre class="language-iecst"><code><span class="token punctuation">(</span><span class="token keyword">VAR</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>DEC<span class="token punctuation">]</span>

<span class="token keyword">END_VAR</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>VAR</code> 局部变量使用方式 <ul><li><code>VAR</code> 一般局部变量</li><li><code>VAR_IN</code> 函数输入量, 见<a href="#%E5%87%BD%E6%95%B0-function">函数介绍</a></li><li><code>VAR_OUT</code></li><li><code>VAR_IN_OUT</code></li></ul></li><li><code>DEC</code> 变量修饰 <ul><li>默认下为一般变量</li><li><code>CONSTANT</code> 常量 (定义是要赋初值)</li><li><code>PERSISTENT</code> 断电保存量 (需要配合 UPS 使用)</li></ul></li></ul><h4 id="全局变量" tabindex="-1"><a class="header-anchor" href="#全局变量" aria-hidden="true">#</a> 全局变量</h4><p>在 GVLs 上右击，然后点击 Add，选择 Global Variable List, 输入全局变量列表名<br> VAR_GLOBAL 中声明对应的全局变量<br> 不同的全局变量列表中允许有同名变量, 但不建议</p><p>通过 <code>[glv].[val]</code> 访问全局变量</p><ul><li><code>glv</code> 全局变量的列表名</li><li><code>val</code> 定义在类表中的全局变量</li></ul><h3 id="外部输入输出" tabindex="-1"><a class="header-anchor" href="#外部输入输出" aria-hidden="true">#</a> 外部输入输出</h3><h4 id="配置输入输出端口" tabindex="-1"><a class="header-anchor" href="#配置输入输出端口" aria-hidden="true">#</a> 配置输入输出端口</h4><ol><li>右键 TwinCAT 图标, 选择 System 菜单, 点击 <code>Config</code> 切换到 <code>Config</code> 模式</li><li>资源管理器中, 选择 I/O, 右键 <code>Devices - Scan</code>, 选择连接设备的网卡, 开始自动扫描</li><li>扫描完成后, 在 <code>Device - Term(...) - Term x - Channel - Output / Input</code> 下可以设置与查看各个设备下的输入输出端口地址, 类型, ADS 地址等</li></ol><h4 id="定义变量对应端口" tabindex="-1"><a class="header-anchor" href="#定义变量对应端口" aria-hidden="true">#</a> 定义变量对应端口</h4><ol><li>定义之前必须激活配置 (左上角第一个图标)</li><li>使用 <code>AT%I/Q*</code> 修饰声明变量 (<a href="#%E5%8D%95%E4%B8%AA%E5%8F%98%E9%87%8F">修饰方法</a>), 通常将全局变量作为输入输出量 <ul><li>对于数字量, 对应 BOOL 型变量 (数组)</li><li>对于模拟量, 通常对应 INT 型编码, 转换需要查相关手册 (数组)</li></ul></li><li>在设置端口界面, 点击 <code>Linked to</code>, 然后在界面内选择要绑定的变量 (变量需要有 <code>AT</code> 修饰)</li><li>也可以直接双击端口选择要绑定的变量</li><li>右键端口, 选择 Clear 则可以解除绑定</li></ol><h2 id="程序结构" tabindex="-1"><a class="header-anchor" href="#程序结构" aria-hidden="true">#</a> 程序结构</h2><h3 id="程序建立" tabindex="-1"><a class="header-anchor" href="#程序建立" aria-hidden="true">#</a> 程序建立</h3><h4 id="程序-prg" tabindex="-1"><a class="header-anchor" href="#程序-prg" aria-hidden="true">#</a> 程序 PRG</h4><p>在资源管理器中右击 POUs, 然后点击 Add, 然后选择 POU , 在对话框内选择程序</p><p>程序中分为变量声明区与代码区</p><h4 id="函数-function" tabindex="-1"><a class="header-anchor" href="#函数-function" aria-hidden="true">#</a> 函数 Function</h4><p>在资源管理器中右击 POUs, 使用菜单内的 Add 可以添加函数 (Function)</p><p>函数中分为变量声明区与代码区</p><p>函数的变量声明区首先要声明函数名以及返回类型<br><code>FUNCTION [NAME] : [TYPE]</code></p><ul><li><code>NAME</code> 既是函数名, 也是体现函数返回值的变量</li><li><code>TYPE</code> 函数返回值类型 其次要在 <code>VAR_INPUT</code> 内定义输入变量 , 输入变量将作为函数的出入参数<br> 最后在 <code>VAR</code> 定义局部变量</li></ul><p>通过 <code>[fun](...);</code> 可调用函数, <code>...</code> 内按 <code>VAR_INPUT</code> 的顺序传入参数</p><h4 id="功能块-fb" tabindex="-1"><a class="header-anchor" href="#功能块-fb" aria-hidden="true">#</a> 功能块 FB</h4><p>在资源管理器中右击 POUs, 使用菜单内的 Add 可以添加函数 (Function Block, FB)</p><p>功能块比起函数, 更接近一般语言的类<br> 其子方法相当于成员函数, 程序体相当于构造函数<br> 但功能块在 TwinCat2 中不支持</p><p>功能块中分为变量声明区与代码区</p><p>功能块的变量声明区首先要声明功能块名称, 但与函数不同, 功能块能返回多个值, 因此不需要在此处定义返回值<br><code>FUNCTION_BLOCK [DOMAIN] [NAME]</code></p><ul><li><code>NAME</code> 功能块名</li><li><code>DOMAIN</code> 访问限制符, 一般为 PUBLIC</li><li>在 <code>VAR</code> 定义功能块变量 <ul><li>可类比为私有变量, 无法通过外界修改</li></ul></li><li>在 <code>VAR_INPUT</code> 内定义输入变量 <ul><li>同为私有变量, 但初始化时需要赋值</li></ul></li><li>在 <code>VAR_OUTPUT</code> 内定义输出变量, 输出变量反映到外部变量上, 从而被读取 <ul><li>可类比为<mark>只读变量</mark>, 外界可以读取但不能修改</li></ul></li><li>在 <code>VAR_IN_OUT</code> 内定义输出变量, 输出变量反映到外部变量上, 从而被读取 <ul><li>可类比为<mark>共有变量</mark>, 外界可以读取与修改</li></ul></li></ul><p>首先在变量声明区定义功能块的实例 <code>[val] : [fb]</code><br> 然后通过 <code>[val]([in1] := [val_in1], ..., [out1] =&gt; [val_out1], ..., [in_out1] := [val_in1], ...);</code> 初始化功能块<br> 最后可使用 <code>[val].[met](...)</code> 的方式调用功能块的方法, 可使用 <code>[val].[in_out]/[val_out]</code> 的方式访问输出量或输入输出量</p><ul><li><code>val</code> 为功能块实例化的变量名称</li><li><code>inx</code> 为功能块内的输入变量</li><li><code>outx</code> 为功能块内的输出变量</li><li><code>val_inx</code> 为用于初始化功能块输入变量的值 (可以传入字面量, 当传入变量时, 变量将与对应输入变量绑定)</li><li><code>val_outx</code> 为接收功能块输出变量的变量 (当没有访问限制时, 可不指定)</li><li><code>in_out</code> 为用于初始化功能块输入输出变量的值 (同输入量)</li><li><code>met</code> 为功能块的成员方法</li></ul><h4 id="子程序-action" tabindex="-1"><a class="header-anchor" href="#子程序-action" aria-hidden="true">#</a> 子程序 Action</h4><p>右键程序 (PRG), 使用菜单内的 Add 可以添加子程序 (Action)</p><p>子程序隶属于程序 (PRG), 没有自己的变量, 只能使用来自程序的变量<br> 没有输入输出, 仅作为一段可以复用或表达一定含义的代码片段</p><p>通过 <code>[prg].[act]();</code> 可在程序中调用子程序</p><ul><li><code>prg</code> 为程序名</li><li><code>act</code> 为子程序名</li></ul><h4 id="方法-method" tabindex="-1"><a class="header-anchor" href="#方法-method" aria-hidden="true">#</a> 方法 Method</h4><p>右键程序 (PRG), 使用菜单内的 Add 可以添加子程序 (Action)</p><p>子程序隶属于程序 (PRG), 有自己的内部变量, 也可以使用来自程序的变量<br> 方法还可以有输入参数接收来自外部的值<br> 并且方法也可以返回值, 注意返回值保存在与方法名同名的变量中</p><p>通过 <code>[prg].[met](in1 := ..., ...);</code> 可在程序中调用子程序</p><ul><li><code>prg</code> 为程序名</li><li><code>met</code> 为方法名</li><li><code>inx</code> 为输入参数</li></ul><h3 id="编程技巧" tabindex="-1"><a class="header-anchor" href="#编程技巧" aria-hidden="true">#</a> 编程技巧</h3><h4 id="使用方法封装触发型命令功能块" tabindex="-1"><a class="header-anchor" href="#使用方法封装触发型命令功能块" aria-hidden="true">#</a> 使用方法封装触发型命令功能块</h4><div class="language-iecst line-numbers-mode" data-ext="iecst"><pre class="language-iecst"><code><span class="token keyword">METHOD</span> ExecuteXXX <span class="token operator">:</span> <span class="token class-name">BYTE</span>
<span class="token keyword">VAR_INPUT</span>
    INS_XXX <span class="token operator">:</span> FB_XXX<span class="token punctuation">;</span>
    PA1 <span class="token operator">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    TIMEOUT <span class="token operator">:</span> <span class="token class-name">TIME</span> <span class="token operator">:=</span> <span class="token number">T#50ms</span><span class="token punctuation">;</span>
VAR_END

<span class="token keyword">VAR</span>
    TRIG <span class="token operator">:</span> <span class="token class-name">BOOL</span> <span class="token operator">:=</span> <span class="token boolean">FALSE</span><span class="token punctuation">;</span>
    Timer <span class="token operator">:</span> TON<span class="token punctuation">;</span>
VAR_END

<span class="token keyword">VAR_OUTPUT</span>
    ERROR <span class="token operator">:</span> <span class="token class-name">UDINT</span><span class="token punctuation">;</span>
VAR_END

<span class="token comment">//////////////////////////</span>

<span class="token keyword">IF</span> <span class="token operator">NOT</span> TRIG <span class="token keyword">THEN</span>
    TRIG <span class="token operator">:=</span> <span class="token boolean">TRUE</span><span class="token punctuation">;</span>
    <span class="token comment">// 在方法中实例化化</span>
    <span class="token function">INS_XXX</span><span class="token punctuation">(</span>FB_PA1 <span class="token operator">:=</span> PA1<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 使用延时, 延长脉冲, 防止脉冲不被识别</span>
    <span class="token function">Timer</span><span class="token punctuation">(</span>IN<span class="token operator">:=</span> <span class="token boolean">TRUE</span><span class="token punctuation">,</span> PT<span class="token operator">:=</span> TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>

    INT_XXX<span class="token punctuation">.</span>bExecute <span class="token operator">:=</span> <span class="token boolean">TRUE</span><span class="token punctuation">;</span>
<span class="token keyword">ELSIF</span> Timer<span class="token punctuation">.</span>Q <span class="token keyword">THEN</span>
    INT_XXX<span class="token punctuation">.</span>bExecute <span class="token operator">:=</span> <span class="token boolean">FALSE</span><span class="token punctuation">;</span>
    <span class="token keyword">IF</span> INS_XXX<span class="token punctuation">.</span>bErr <span class="token keyword">THEN</span>
        <span class="token comment">// 命令错误, 返回 2</span>
        ExecuteXXX <span class="token operator">:=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        ERROR <span class="token operator">:=</span> INS_XXX<span class="token punctuation">.</span>nErrID<span class="token punctuation">;</span>
        TRIG <span class="token operator">:=</span> <span class="token boolean">FALSE</span><span class="token punctuation">;</span>

        <span class="token keyword">RETURN</span><span class="token punctuation">;</span>
    <span class="token keyword">ELSIF</span> <span class="token operator">NOT</span> INS_XXX<span class="token punctuation">.</span>bBUSY <span class="token keyword">THEN</span>
        <span class="token comment">// 命令发送, 返回 1 (注意命令发送完成, 不一定执行完成)</span>
        ExecuteXXX <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        ERROR <span class="token operator">:=</span> INS_XXX<span class="token punctuation">.</span>nErrID<span class="token punctuation">;</span>
        TRIG <span class="token operator">:=</span> <span class="token boolean">FALSE</span><span class="token punctuation">;</span>

        <span class="token keyword">RETURN</span><span class="token punctuation">;</span>
    <span class="token keyword">END_IF</span>
<span class="token keyword">END_IF</span>

<span class="token comment">// 命令运行中, 返回 0</span>
ExecuteXXX <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="程序控制语句" tabindex="-1"><a class="header-anchor" href="#程序控制语句" aria-hidden="true">#</a> 程序控制语句</h3><h4 id="if" tabindex="-1"><a class="header-anchor" href="#if" aria-hidden="true">#</a> IF</h4><div class="language-iecst line-numbers-mode" data-ext="iecst"><pre class="language-iecst"><code><span class="token keyword">IF</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>CASE1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">THEN</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">ELSIF</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>CASE2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">THEN</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">ELSE</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">END_IF</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>CASEn</code> 为 BOOL 表达式，或变量</li></ul><h4 id="case" tabindex="-1"><a class="header-anchor" href="#case" aria-hidden="true">#</a> CASE</h4><div class="language-iecst line-numbers-mode" data-ext="iecst"><pre class="language-iecst"><code><span class="token keyword">CASE</span> <span class="token punctuation">[</span>VAL<span class="token punctuation">]</span> <span class="token keyword">OF</span>
<span class="token punctuation">[</span>OPT<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">ELSE</span>
    DEFAULT
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">END_CASE</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>OPT</code> 为范围，有以下几种表示方法 <ul><li><code>n</code> 当 <code>VAL=n</code> 时运行</li><li><code>a,b,...</code> 当 <code>VAL</code> 等于任意一个待选值时运行</li><li><code>a..b</code> 当 <code>VAL</code> 在 a，b 内时运行</li></ul></li><li><code>VAL</code> 为判断变量, 可使用整数或枚举类型<br> 为了保证程序的稳定性, 每当进入分支状态后, 设置 <code>VAL := 0</code> (假定以 0 为默认状态)</li></ul><h4 id="for" tabindex="-1"><a class="header-anchor" href="#for" aria-hidden="true">#</a> FOR</h4><div class="language-iecst line-numbers-mode" data-ext="iecst"><pre class="language-iecst"><code><span class="token keyword">FOR</span> <span class="token punctuation">[</span>BE<span class="token punctuation">]</span> <span class="token keyword">TO</span> <span class="token punctuation">[</span>END<span class="token punctuation">]</span> <span class="token keyword">BY</span> <span class="token punctuation">[</span>ST<span class="token punctuation">]</span> <span class="token keyword">DO</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">END_FOR</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>BE</code> 为获取循环变量, 可在该语句对循环变量赋初值</li><li><code>END</code> 为结束值, 当循环变量大于结束值, 退出循环</li><li><code>ST</code> 为步长, 每次完成以此循环, 循环变量就加上步长, 默认为 1</li></ul><h4 id="while" tabindex="-1"><a class="header-anchor" href="#while" aria-hidden="true">#</a> WHILE</h4><div class="language-iecst line-numbers-mode" data-ext="iecst"><pre class="language-iecst"><code><span class="token keyword">WHILE</span> <span class="token punctuation">[</span>OPT<span class="token punctuation">]</span> <span class="token keyword">DO</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">END_WHILE</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>[OPT] 为判断条件语句, 当值为 <code>False</code> 时退出循环</li></ul><h4 id="其他控制语句" tabindex="-1"><a class="header-anchor" href="#其他控制语句" aria-hidden="true">#</a> 其他控制语句</h4><ul><li><code>:=</code> 赋值语句</li><li><code>RETURN;</code> 退出当前代码块</li><li><code>BREAK;</code> 退出循环</li></ul><h2 id="内置函数" tabindex="-1"><a class="header-anchor" href="#内置函数" aria-hidden="true">#</a> 内置函数</h2><h3 id="变量-1" tabindex="-1"><a class="header-anchor" href="#变量-1" aria-hidden="true">#</a> 变量</h3><h4 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h4><ul><li><code>REPLACE(str, ch, num, start)</code><ul><li>替换字符串中的字符</li><li><code>str</code> 被替换的字符串</li><li><code>ch</code> 用于替换的字符</li><li><code>num</code> 替换次数</li><li><code>start</code> 替换开始位置 (以 1 开始索引)</li><li>返回被替换的字符串</li><li>示例:</li></ul></li></ul><div class="language-iecst line-numbers-mode" data-ext="iecst"><pre class="language-iecst"><code>A <span class="token operator">:=</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">;</span>
A_r <span class="token operator">:=</span> <span class="token function">REPLACE</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> <span class="token string">&#39;X&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 运行后, A_r = &#39;HXllo&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>CONCAT(str1, str2)</code><ul><li>合并字符串</li><li><code>str1</code> 前字符串</li><li><code>str2</code> 后字符串</li><li>返回合并完的字符串</li><li>示例:</li></ul></li></ul><div class="language-iecst line-numbers-mode" data-ext="iecst"><pre class="language-iecst"><code>A <span class="token operator">:=</span> <span class="token string">&#39;Hello &#39;</span><span class="token punctuation">;</span>
B <span class="token operator">:=</span> <span class="token string">&#39;World&#39;</span>
S_add <span class="token operator">:=</span> <span class="token function">CONCAT</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 运行后, S_add = &#39;Hello World&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h4><p><code>[TYPE1]_TO_[TYPE2]([val])</code></p><ul><li><code>TYPE1</code> 输入类型</li><li><code>TYPE2</code> 转换输出类型</li><li><code>val</code> 被转换变量</li><li>返回转换后的值</li></ul><h3 id="内置功能块" tabindex="-1"><a class="header-anchor" href="#内置功能块" aria-hidden="true">#</a> 内置功能块</h3><h4 id="自动声明" tabindex="-1"><a class="header-anchor" href="#自动声明" aria-hidden="true">#</a> 自动声明</h4><ol><li>在声明区内右键 <code>自动声明 (AutoDeclear)</code></li><li>在对话框内输入变量名称 (Name)</li><li>类型 (Type) 则点击右侧 &gt; 按钮进入输入助手</li><li>选择 Input Assitant -&gt; Structed Type 即可寻找内置功能块</li><li>在上方选项卡中, 使用 Text search 可以通过文字搜索特定功能块</li></ol><h4 id="添加模块" tabindex="-1"><a class="header-anchor" href="#添加模块" aria-hidden="true">#</a> 添加模块</h4><p>资源管理器中右键 External Types -&gt; References, 选择 Add Library 可以向项目添加模块</p><h4 id="计时器-ton" tabindex="-1"><a class="header-anchor" href="#计时器-ton" aria-hidden="true">#</a> 计时器 TON</h4><p>位于 TC2_Standard -&gt; Timer -&gt; TON 中</p><ul><li><code>IN</code> 输入变量 BOOL<br> 功能块触发, 跳变为 True 时触发计时器, 跳变为 False 时复位计时器</li><li><code>PT</code> 输入变量 TIME 预设时间, 计时器计时时间</li><li><code>Q</code> 输出变量 BOOL<br> 当计时器触发, 经过预设时间后变为 True</li><li><code>ET</code> 输出变量 TIME<br> 计时器在触发后经过的时间</li></ul><h4 id="计数器-ctu" tabindex="-1"><a class="header-anchor" href="#计数器-ctu" aria-hidden="true">#</a> 计数器 CTU</h4><p>位于 TC2_Standard -&gt; Counter -&gt; CTU 中</p><ul><li><code>CU</code> 输入变量 BOOL<br> 计时器触发, 跳变为 True 时计数器加 1</li><li><code>RESET</code> 输入变量 BOOL<br> 计数器复位, 跳变为 True 时计数器复位 (<code>CU</code> 达到阈值 <code>PV</code> 也不会自动复位)</li><li><code>PV</code> 输入变量 INT<br> 计数器阈值</li><li><code>Q</code> 输出变量 BOOL<br> 当计数器到达阈值时 (<code>CV = PV</code>), <code>Q</code> 输出 True, 计数器不会自动复位</li><li><code>CV</code> 输出变量 INT<br> 计数器当前值</li></ul><h4 id="获取网络时间-nt-gettime" tabindex="-1"><a class="header-anchor" href="#获取网络时间-nt-gettime" aria-hidden="true">#</a> 获取网络时间 NT_GetTime</h4><p>默认没有添加, 需要先手动从 References 添加 System -&gt; Tc2_Utilities 模块<br> 位于 Tc2_Utilities -&gt; NT_GetTime</p><ul><li><code>NETID</code> 输入变量 字符串<br> 目标设备的 AMS NetId, 默认为本地</li><li><code>START</code> 输入变量 BOOL 跳变为 True 时, 开始获取时间</li><li><code>TMOUT</code> 输入变量 TIME<br> 获取时间的等待时长</li><li><code>BUSY</code> 输出变量 BOOL<br> 获取时间等待时为 True</li><li><code>ERR</code> 输出变量 BOOL<br> 出现错误时为 True</li><li><code>ERRID</code> 输出变量<br> 错误信息</li><li><code>TIMESTR</code> 输出变量 结构体<br> 目标设备的时间, 包含了年月日时分秒的时间</li></ul><h2 id="人机界面" tabindex="-1"><a class="header-anchor" href="#人机界面" aria-hidden="true">#</a> 人机界面</h2><p>在资源管理器中右击 VISUs, 使用菜单内的 Add 可以添加人机界面 (Visualization)</p><h3 id="编辑截面" tabindex="-1"><a class="header-anchor" href="#编辑截面" aria-hidden="true">#</a> 编辑截面</h3><h4 id="放置控件" tabindex="-1"><a class="header-anchor" href="#放置控件" aria-hidden="true">#</a> 放置控件</h4><p>在资源管理器下方的选项卡中, 点击工具箱即可进入控件界面<br> 将工具箱内的控件拖入人机界面即可</p><h4 id="编辑控件" tabindex="-1"><a class="header-anchor" href="#编辑控件" aria-hidden="true">#</a> 编辑控件</h4><p>点击控件, 将自动进入控件属性选项卡 (或在资源管理器下方的选项卡中)<br> 可在其中编辑控件属性<br> 当属性找不到时, 需要点击界面上方的 <code>高级</code> 按钮, 显示所有属性</p><h4 id="元素列表" tabindex="-1"><a class="header-anchor" href="#元素列表" aria-hidden="true">#</a> 元素列表</h4><p>通常隐藏在界面编辑器上方下拉条内</p><h3 id="控件通用属性" tabindex="-1"><a class="header-anchor" href="#控件通用属性" aria-hidden="true">#</a> 控件通用属性</h3><h4 id="文本内容-text" tabindex="-1"><a class="header-anchor" href="#文本内容-text" aria-hidden="true">#</a> 文本内容 Text</h4><p>即显示在控件上的文本<br> 文本内可以使用格式化字符, 常用于 TextField * <code>%d</code> 整形, 对应 INT * <code>%.nf</code> 浮点型, 对应 LREAL, n 为显示位数 * <code>%s</code> 字符串, 对应 STRING</p><ul><li>绑定变量 <code>Text variable</code><br> 可在此处输入格式化字符对应的变量名, 通常为全局变量或程序中<br> 通过 <code>[plc].[val]</code> 来访问, <code>plc</code> 为变量声明位置, <code>val</code> 为变量名称</li></ul><h4 id="输入配置" tabindex="-1"><a class="header-anchor" href="#输入配置" aria-hidden="true">#</a> 输入配置</h4><p>用于设置当鼠标在空间上按下 (OnMouseDown), 点击 (OnMouseClick) 等操作时执行的操作<br> 选择操作后将进入配置页面<br> 选择要添加的配置, 点击 <code>&gt;</code> 按钮添加, 最后在最右侧编辑器设置</p><ul><li>执行 ST 代码<br> 即执行一般的 IEC 61131-3 代码<br> 在右侧编辑器内直接输入要执行的代码</li><li>写变量 <ul><li>编辑变量<br> 通常选择<code>用另一个变量</code>, 即将写入值放入此变量中, 变量名确定方法与<a href="#%E6%96%87%E6%9C%AC%E5%86%85%E5%AE%B9-text">绑定变量</a>同</li><li>输入类型 <ul><li><code>Numpad</code> 即使用内置的数字输入器</li><li><code>文本输入</code> 即作为文本输入框使用 (TextField), 得到的是 STRING 类型的值, 数字还需要后续使用 <code>STRING_TO_LREAL</code> 等转换</li></ul></li></ul></li></ul><h4 id="变量绑定-variable" tabindex="-1"><a class="header-anchor" href="#变量绑定-variable" aria-hidden="true">#</a> 变量绑定 Variable</h4><p>常用于复选框 CheckBox<br> 输入变量名即可绑定, 绑定后变量与控件状态联动 ()</p><h3 id="常用控件" tabindex="-1"><a class="header-anchor" href="#常用控件" aria-hidden="true">#</a> 常用控件</h3><ul><li>组块 GroupBox<br> 组块内的控件将自动隶属于组块下<br> 移动组块时, 其下的控件也将一起移动</li><li>标签 Label</li><li>按钮 Button</li><li>文本 TextField</li><li>勾选框 Checkbox</li></ul>`,144),c=[d];function t(l,o){return n(),e("div",null,c)}const u=a(i,[["render",t],["__file","twincat_base.html.vue"]]);export{u as default};
