import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o as l,c as s,b as e,d as a,a as c,w as r,e as o}from"./app-8c5ce49e.js";const p={},u=o('<h1 id="cmake-笔记" tabindex="-1"><a class="header-anchor" href="#cmake-笔记" aria-hidden="true">#</a> CMake 笔记</h1><h2 id="流程控制" tabindex="-1"><a class="header-anchor" href="#流程控制" aria-hidden="true">#</a> 流程控制</h2><h3 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法" aria-hidden="true">#</a> 基本语法</h3><h4 id="基本语法-1" tabindex="-1"><a class="header-anchor" href="#基本语法-1" aria-hidden="true">#</a> 基本语法</h4><ol><li>CMake 中的所有语言结构均为命令, 并在命令后的 <code>()</code> 内填入参数, 多个参数使用空格分隔</li><li>命令必须以 <code>()</code> 结尾, 即使该命令没有参数</li><li>通常使用小写字母表示命令, 大写字母表示变量</li><li>使用 <code>#</code> 作为注释符号</li><li>将 <code>CMakeLists.txt</code> 作为执行主体, 其余 <code>.cmake</code> 文件需要通过 <code>CMakeLists.txt</code> 引用才能执行</li><li>执行 <code>CMakeLists.txt</code> 后仅能构建项目如 makefile 或 VisualStudio 项目, 而不会进行编译</li></ol><h4 id="执行构建" tabindex="-1"><a class="header-anchor" href="#执行构建" aria-hidden="true">#</a> 执行构建</h4><ol><li>打开存放构建文件的目录 <code>build</code></li><li>在该目录中运行命令 <code>cmake &lt;CMakeLists.txt 文件目录&gt;</code> 执行构建</li></ol><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h3>',8),h={href:"https://blog.csdn.net/jjjstephen/article/details/122415231",target:"_blank",rel:"noopener noreferrer"},k=o('<h4 id="变量定义" tabindex="-1"><a class="header-anchor" href="#变量定义" aria-hidden="true">#</a> 变量定义</h4><ul><li><p>使用命令 <code>set</code> 定义或修改字符串变量, 格式如下<br><code>set(&lt;变量名称&gt; &lt;字符串值&gt; [CACHE|PARENT_SCOPE])</code></p><ul><li><code>CACHE</code> 用于定义<a href="#%E7%BC%93%E5%AD%98%E5%8F%98%E9%87%8F">缓存变量</a></li><li><code>PARENT_SCOPE</code> 用于在父作用域上定义或修改变量, 一般用于<a href="#%E5%87%BD%E6%95%B0">函数</a></li></ul></li><li><p>使用命令 <code>unset</code> 删除已定义的字符串变量<br><code>unset(&lt;变量名称&gt; [CACHE])</code></p><ul><li><code>CACHE</code> 用于删除<a href="#%E7%BC%93%E5%AD%98%E5%8F%98%E9%87%8F">缓存变量</a></li><li><code>PARENT_SCOPE</code> 用于在父作用域上删除变量</li></ul></li></ul><h4 id="字符串表示" tabindex="-1"><a class="header-anchor" href="#字符串表示" aria-hidden="true">#</a> 字符串表示</h4><p>表示字符串时, 可以不需要 <code>&quot;&quot;</code> 包裹, 但此时空格与换行与 <code>;</code> 将被作为<a href="#%E5%88%97%E8%A1%A8">列表</a>分隔符<br> 当使用 <code>&quot;&quot;</code> 包裹时, 空格则能被读取到<br> 例如对于定义 <code>set(text a &quot;b c&quot;)</code>, 有 <code>${text}=&quot;a;b c&quot;</code></p><p>通过 <code>${val}</code> 的方式可以引用变量<br> 例如 <code>set(path ./src) set(cppFile ${path}/main.cpp)</code>, 有 <code>${cppFile}=&quot;./src/main.cpp&quot;</code></p><p>该语句的实质为从最近的作用域中, 寻找一个名称为 <code>val</code> 的变量, 因此可将任何字符串作为 <code>val</code>, 例如<br><code>${${val}}</code> 将寻找具有与 <code>${val}</code> 对应字符串相同名称的变量</p><p>字符串中可使用 <code>\\</code> 进行转义, 常用的转义有<br><code>\\n</code> 换行, <code>\\\\</code> 表示 <code>\\</code>, <code>\\&quot;</code> 表示 <code>&quot;</code>, <code>\\$</code> 表示 <code>$</code>, <code>\\{</code> 表示 <code>{</code>, <code>\\}</code> 表示 <code>}</code></p><h4 id="字符串操作" tabindex="-1"><a class="header-anchor" href="#字符串操作" aria-hidden="true">#</a> 字符串操作</h4><p>使用命令 <code>string</code> 操作字符串, 格式如下 <code>string(&lt;操作类型&gt; ...)</code></p><ul><li>寻找子字符串 <code>string(FIND &lt;input&gt; &lt;sub&gt; &lt;indVar&gt; [REVERSE])</code><ul><li><code>input</code> 输入字符串, 应传入字符串而不是变量名称</li><li><code>sub</code> 用于匹配的子字符串, 应传入字符串而不是变量名称</li><li><code>indVar</code> 保存第一个匹配位置的索引, 不存在时为 <code>-1</code>, 传入变量名称 (自动创建)</li><li><code>REVERSE</code> 启用此选项时, 将从后往前寻找</li><li>使用例子<br> 定义字符串 <code>set(text cabcbabc)</code> 寻找字符串 <code>string(FIND ${text} abc ind)</code><br> 运行后结果 <code>${ind}=&quot;1&quot;</code></li></ul></li><li>字符串替换 <code>string(REPLACE &lt;match&gt; &lt;replace&gt; &lt;outVar&gt; &lt;input&gt;)</code><ul><li><code>match</code> 用于匹配的字符串</li><li><code>replace</code> 匹配后替换的字符串</li><li><code>outVar</code> 替换结果保存变量, 传入变量名称 (自动创建)</li><li><code>input</code> 输入字符串</li><li>使用例子<br> 定义字符串 <code>set(text cabcbabc)</code> 替换字符串 <code>string(REPLACE abc xyz out ${text})</code><br> 运行后结果 <code>${out}=&quot;cxyzbxyz&quot;</code></li></ul></li><li>提取子字符串 <code>string(SUBSTRING &lt;input&gt; &lt;index&gt; &lt;len&gt; &lt;outVar&gt;)</code><ul><li><code>input</code> 输入字符串</li><li><code>index</code> 提取开始位置</li><li><code>len</code> 提取长度</li><li><code>outVar</code> 提取结果, 传入变量名称 (自动创建)</li><li>使用例子<br> 定义字符串 <code>set(text cabcbabc)</code> 提取字符串 <code>string(SUBSTRING ${text} 2 3 out)</code><br> 运行后结果 <code>${out}=&quot;bcb&quot;</code></li></ul></li><li>字符串长度 <code>string(LENGTH input outVar)</code><ul><li><code>input</code> 输入字符串</li><li><code>outVar</code> 提取结果, 传入变量名称 (自动创建)</li><li>使用例子<br> 定义字符串 <code>set(text cabcbabc)</code> 提取字符串 <code>string(LENGTH ${text} out)</code><br> 运行后结果 <code>${out}=&quot;8&quot;</code></li></ul></li><li>正则操作<br> 见有关文档的介绍</li></ul><h4 id="字符串打印" tabindex="-1"><a class="header-anchor" href="#字符串打印" aria-hidden="true">#</a> 字符串打印</h4><p>使用命令 <code>message</code> 操作字符串, 格式如下 <code>message([消息类型] &lt;str&gt;)</code></p><ul><li><code>消息类型</code> 常有消息类型如下 <ul><li><code>STATUS</code> 一般状态 (默认的类型)</li><li><code>WARNING</code> 警告, 不会中断处理</li><li><code>FATAL_ERROR</code> 严重错误, 打印后处理也将终端</li></ul></li><li><code>str</code> 用于打印的字符串 <ul><li>仅打印变量时注意, 当变量为空时将导致出错</li><li>对于列表, 其中的分隔符将被忽略</li></ul></li></ul><h3 id="其他变量类型" tabindex="-1"><a class="header-anchor" href="#其他变量类型" aria-hidden="true">#</a> 其他变量类型</h3><p>CMake 将所有变量视为字符串, 仅在特定的上下文中, 可将一些变量视为其他类型并操作</p><h4 id="条件-布尔型" tabindex="-1"><a class="header-anchor" href="#条件-布尔型" aria-hidden="true">#</a> 条件 (布尔型)</h4><p>使用 <code>ON/YES/TRUE/非零数</code> 表示真<br> 使用 <code>OFF/NO/FALSE/0</code> 表示假</p><p>具体使用见 <a href="#%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD">条件判断</a></p><h4 id="数字" tabindex="-1"><a class="header-anchor" href="#数字" aria-hidden="true">#</a> 数字</h4><p>使用命令 <code>math</code> 对数字字符串 (及支持整数) 进行运算<br><code>math(EXPR &lt;outVar&gt; &lt;expr&gt;)</code></p><ul><li><code>outVar</code> 保存计算结果的变量, 传入变量名称 (自动创建)</li><li><code>expr</code> 用于计算的字符出字符串, 可通过 <code>${}</code> 将变量值传入表达式, 运算符与规则同 c</li><li>使用例子<br> 定义值 <code>set(x 6)</code> 运算 <code>math(EXPR y &quot;(${x} - 2) / 3&quot;)</code><br> 运行后结果 <code>${y}=&quot;1&quot;</code></li></ul><h4 id="列表" tabindex="-1"><a class="header-anchor" href="#列表" aria-hidden="true">#</a> 列表</h4><p>CMake 将使用 <code>;</code>, <code></code> 或换行分隔的字符串视为列表 (末尾不需要 <code>;</code>)<br> 使用命令 <code>list</code> 操作列表, 格式如下<br><code>list(&lt;操作类型&gt; ...)</code></p><ul><li>列表长度 <code>list(LENGTH &lt;listVar&gt; &lt;outVar&gt;)</code><ul><li><code>listVar</code> 列表变量名称, 传入变量名称</li><li><code>outVar</code> 列表长度, 传入变量名称 (自动创建)</li><li>使用例子<br> 定义列表 <code>set(text a;b c;d&quot;\\n&quot;e)</code> 获取长度 <code>list(LENGTH text out)</code> (此处的 <code>&quot;\\n&quot;</code> 表示实际换行, 而非字面含义)<br> 运行后结果 <code>${out}=&quot;5&quot;</code></li></ul></li><li>获取元素 <code>list(GET &lt;listVar&gt; &lt;index&gt; &lt;outVar&gt;)</code><ul><li><code>listVar</code> 列表变量名称, 传入变量名称</li><li><code>index</code> 获取的索引值, 从 0 开始计</li><li><code>outVar</code> 元素值, 传入变量名称 (自动创建)</li><li>使用例子<br> 定义列表 <code>set(text a;b;c;d)</code> 获取元素 <code>list(GET text 2 out)</code><br> 运行后结果 <code>${out}=&quot;c&quot;</code></li></ul></li><li>插入元素 <code>list(APPEND &lt;listVar&gt; &lt;item&gt;)</code><ul><li><code>listVar</code> 列表变量名称, 传入变量名称, 插入后原列表修改</li><li><code>item</code> 插入元素, 传入变量名称 (自动创建)</li><li>使用例子<br> 定义列表 <code>set(text a;b;c;d)</code> 插入元素 <code>list(APPEND text e)</code><br> 运行后结果 <code>${text}=&quot;a;b;c;d;e&quot;</code></li></ul></li><li>删除元素 <code>list(REMOVE_AT &lt;listVar&gt; &lt;index&gt;)</code><ul><li><code>listVar</code> 列表变量名称, 传入变量名称</li><li><code>index</code> 被删除元素的索引值, 从 0 开始计</li><li>使用例子<br> 定义列表 <code>set(text a;b;c;d)</code> 删除元素 <code>list(REMOVE_AT text 2)</code><br> 运行后结果 <code>${text}=&quot;a;b;d&quot;</code></li></ul></li></ul><h4 id="路径" tabindex="-1"><a class="header-anchor" href="#路径" aria-hidden="true">#</a> 路径</h4>',25),E={href:"https://www.jianshu.com/p/be1024b6b6ed",target:"_blank",rel:"noopener noreferrer"},b=o('<p>注意在 CMAKE 中的路径操作时, 通常采用的是 CMAKE 风格, 主要为以 <code>/</code> 为分隔符<br> 可以此风格的路径作为参数进行配置, 仅在 <code>ADD_CUSTOM_COMMAND</code> 等执行命令时需要传入系统风格的路径</p><ul><li>定义路径 <code>cmake_path(SET &lt;pathVar&gt; [NORMALIZE] &lt;input&gt;)</code><ul><li><code>pathVar</code> 定义的路径变量名称</li><li><code>NORMALIZE</code> 是否规范化路径为 CMAKE 风格, 将替换分隔符, 删除重复的分隔符等</li><li><code>input</code> 输入的路径字符串</li><li>使用例子 命令 <code>cmake_path(SET path NORMALIZE &quot;home//build\\\\\\\\CMakeCache.txt&quot;)</code><br> 运行结果 <code>${path}=&quot;home/build/CMakeCache.txt&quot;</code></li></ul></li><li>连接路径 <code>cmake_path(APPEND &lt;res&gt; &lt;path1&gt; &lt;path2&gt;...)</code><ul><li><code>res</code> 保存拼接结果的变量, 拼接时会按需要添加分隔符并将分隔符转为 <code>/</code> (不删除多余分隔符)</li><li><code>path1/2</code> 用于拼接的路径字符串, 当 <code>path2</code> 为绝对路径时可能导致拼接失败</li><li>使用例子 命令 <code>cmake_path(APPEND path &quot;//include&quot; &quot;build\\\\\\\\CMakeCache.txt&quot;)</code><br> 运行结果 <code>${path}=&quot;//include/build//CMakeCache.txt&quot;</code></li></ul></li><li>获取路径信息 <code>cmake_path(GET &lt;pathVar&gt; &lt;获取属性&gt; &lt;outVar&gt;)</code><ul><li><code>pathVar</code> 用于解析的路径<mark>变量</mark> (不能直接传入字符串)</li><li><code>outVar</code> 解析结果保存变量</li><li><code>获取属性</code> 需要获取的属性, 常用有 <ul><li><code>FILENAME</code> 文件完整名称, 包含扩展名, 不会区分目录或文件</li><li><code>EXTENSION [LAST_ONLY]</code> 文件所有扩展名 (如 <code>a.ex1.ex2</code> 获取结果为 <code>.ex1.ex2</code>), 启用 <code>LAST_ONLY</code> 将仅保留最后一个扩展</li><li><code>STEM</code> 文件基本名称, 不包含扩展名</li><li><code>PARENT_PATH</code> 文件父目录的路径, 可处理多重分隔符</li><li><code>ROOT_NAME</code> 根目录名称, 用于 Windows 系统以获取盘符, 在 Linux 中以及相对路径中结果为空</li></ul></li><li>使用例子<br> 定义变量 <code>set(path &quot;\\\\dir\\\\\\\\a.exe&quot;)</code><br> 命令 <code>cmake_path(GET path PARENT_PATH res)</code><br> 运行结果 <code>${res}=&quot;\\dir&quot;</code></li></ul></li><li>转换路径规范 <code>cmake_path(CONVERT &lt;path&gt; &lt;目标规范&gt; &lt;outVar&gt; [NORMALIZE])</code><ul><li><code>path</code> 用于转换的路径<mark>字符串</mark>或<mark>路径字符串列表</mark>, 传入列表时还将按系统规范转换路径间的分隔符</li><li><code>outVar</code> 转换结果保存变量</li><li><code>NORMALIZE</code> 除转换为还进一步规范化路径</li><li><code>目标规范</code> 设置转换目标采用的规范 <ul><li><code>TO_cmake_path_LIST</code> 转换为 CMAKE 规范</li><li><code>TO_NATIVE_PATH_LIST</code> 转换为本地系统的规范</li></ul></li><li>使用例子<br> 命令 <code>cmake_path(CONVERT &quot;/dir\\\\\\\\a.exe&quot; TO_NATIVE_PATH_LIST res NORMALIZE)</code> 运行结果 <code>${res}=&quot;\\dir\\a.exe&quot;</code></li></ul></li></ul><h3 id="缓存变量" tabindex="-1"><a class="header-anchor" href="#缓存变量" aria-hidden="true">#</a> 缓存变量</h3><p>缓存变量是一类特殊变量, 在第一次运行时, 需用通过命令行或 GUI 确定变量的值, 并一直保存在 <code>build</code> 中的 <code>CMakeCache.txt</code> 文件</p><p>当使用 <code>set</code> 定义了一个与缓存变量同名的一般变量时, 一般变量优先</p><h4 id="定义缓存变量" tabindex="-1"><a class="header-anchor" href="#定义缓存变量" aria-hidden="true">#</a> 定义缓存变量</h4><p>使用命令 <code>set</code> 可用于定义缓存变量, 格式如下<br><code>set(&lt;varName&gt; &lt;init&gt; CACHE &lt;type&gt; &lt;helpStr&gt; [FORCE])</code></p><ul><li><code>varName</code> 变量名称</li><li><code>init</code> 变量初始值</li><li><code>type</code> 变量类型, 主要有以下常用类型 <ul><li><code>BOOL</code> 布尔型变量, GUI 为一个复选框</li><li><code>STRING</code> 字符串</li><li><code>PATH</code> 文件路径 (有专门的 GUI 用于选择路径)</li></ul></li><li><code>helpStr</code> 解释字符串, 注意不可省略</li><li><code>FORCE</code> 启用此选项后, 将强制刷新已有的缓存变量, 否则当缓存已存在与 <code>CMakeCache.txt</code> 时将无法修改值</li></ul><h4 id="定义缓存选项" tabindex="-1"><a class="header-anchor" href="#定义缓存选项" aria-hidden="true">#</a> 定义缓存选项</h4><p>使用命令 <code>option</code> 定义缓存选项, 格式如下<br><code>option(&lt;optName&gt; &lt;helpStr&gt; [valStr])</code></p><ul><li><code>optName</code> 条件变量名称</li><li><code>helpStr</code> 解释字符串, 不可省略</li><li><code>valStr</code> 条件变量的值, 开启为 <code>ON/YES/TRUE/非零数</code>, 默认或其他字符串表示 <code>OFF/NO/FALSE/0</code></li></ul><h4 id="修改缓存变量" tabindex="-1"><a class="header-anchor" href="#修改缓存变量" aria-hidden="true">#</a> 修改缓存变量</h4><ul><li>直接修改 <code>build</code> 下的 <code>CMakeCache.txt</code> 文件</li><li>通过 CMake-gui 选择项目目录与 <code>build</code> 目录修改, 将自动读取缓存变量并修改</li><li>使用 <code>CMake</code> 命令时添加选项 <code>-D&lt;缓存变量名称&gt;[:变量类型]=&lt;变量值&gt;</code></li></ul><h4 id="通过命令定义缓存变量" tabindex="-1"><a class="header-anchor" href="#通过命令定义缓存变量" aria-hidden="true">#</a> 通过命令定义缓存变量</h4><p>见<a href="#%E5%AE%9A%E4%B9%89%E7%BC%93%E5%AD%98%E5%8F%98%E9%87%8F">定义缓存变量</a></p><h3 id="条件判断" tabindex="-1"><a class="header-anchor" href="#条件判断" aria-hidden="true">#</a> 条件判断</h3>',16),g={href:"https://blog.csdn.net/fengbingchun/article/details/127946047",target:"_blank",rel:"noopener noreferrer"},_=o(`<h4 id="条件语句格式" tabindex="-1"><a class="header-anchor" href="#条件语句格式" aria-hidden="true">#</a> 条件语句格式</h4><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">if</span><span class="token punctuation">(</span>&lt;判断语句<span class="token punctuation">&gt;</span><span class="token punctuation">)</span>
&lt;命令<span class="token punctuation">&gt;</span>
<span class="token keyword">elseif</span><span class="token punctuation">(</span>&lt;判断语句<span class="token punctuation">&gt;</span><span class="token punctuation">)</span>
&lt;命令<span class="token punctuation">&gt;</span>
<span class="token keyword">else</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
&lt;命令<span class="token punctuation">&gt;</span>
<span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="常用判断语句" tabindex="-1"><a class="header-anchor" href="#常用判断语句" aria-hidden="true">#</a> 常用判断语句</h4><ul><li>值为真 <code>&lt;str&gt;</code><ul><li><code>str</code> 被判断的字符串 / 变量名</li><li>当 <code>str</code> 取 <code>ON/YES/TRUE/非零数</code> 时为真</li></ul></li><li>变量已定义 <code>DEFINE &lt;val&gt;</code><ul><li><code>val</code> 用于判断的变量名 (不是字符串)</li><li>当 <code>val</code> 已经定义时为真, 包括缓存变量</li></ul></li><li>文件存在 <code>EXISTS &lt;path&gt;</code><ul><li><code>path</code> 用于判断的路径字符串</li><li>当 <code>path</code> 指向的文件或文件夹存在时为真</li></ul></li><li>绝对路径判断 <code>IS_ABSOLUTE &lt;path&gt;</code></li><li>目录判断 <code>IS_DIRECTORY &lt;path&gt;</code></li><li>字符串比较 <code>&lt;str1&gt; STREQUAL &lt;str2&gt;</code><ul><li><code>str1/2</code> 用于比较的字符串 / 变量名</li><li>当两个字符串相同时为真</li></ul></li><li>正则匹配 <code>&lt;str&gt; MATCH &lt;regex&gt;</code><ul><li><code>str</code> 用于比较的字符串 / 变量名</li><li><code>regex</code> 正则表达式字符串 (似乎对 <code>\\\\w+</code> 支持有问题, 可使用 <code>[A-Z]+</code> 或 <code>\\\\w*</code> 或直接使用需要匹配的子字符串)</li><li>当字符串部分或全部匹配时为真</li></ul></li><li>数字比较 <code>&lt;val1&gt; EQUAL &lt;val2&gt;</code><ul><li><code>val1/2</code> 用于比较的数字, 可以是字符串 / 变量名</li><li>除 <code>EQUAL</code> 还有 <code>LESS</code>, <code>GREATER</code>, <code>LESS_EQUAL</code>, <code>GREATER_EQUAL</code> 等比较方式</li><li>满足比较条件时为真</li></ul></li><li>目标是否存在 <code>TARGET &lt;target&gt;</code><ul><li><code>target</code> 测试目标</li><li>可用于避免目标重复生成</li></ul></li></ul><h4 id="逻辑运算" tabindex="-1"><a class="header-anchor" href="#逻辑运算" aria-hidden="true">#</a> 逻辑运算</h4><p>逻辑语句之间可使用 <code>NOT</code>, <code>OR</code>, <code>AND</code> 进行连接<br> 可通过括号控制运算的优先级</p><h3 id="流程控制-1" tabindex="-1"><a class="header-anchor" href="#流程控制-1" aria-hidden="true">#</a> 流程控制</h3><h4 id="foreach-循环" tabindex="-1"><a class="header-anchor" href="#foreach-循环" aria-hidden="true">#</a> foreach 循环</h4><p><code>foreach</code> 循环有如下基本结构</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">foreach</span><span class="token punctuation">(</span>&lt;iter<span class="token punctuation">&gt;</span> ...<span class="token punctuation">)</span>
...
<span class="token keyword">endforeach</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>遍历列表 <code>foreach(&lt;iter&gt; &lt;listStr&gt;)</code><ul><li><code>iter</code> 迭代元素</li><li><code>listStr</code> 被迭代<mark>列表字符串</mark>, 不能传入变量</li></ul></li><li>遍历变量 <code>foreach(&lt;iter&gt; IN LISTS &lt;listVar&gt;)</code><ul><li><code>iter</code> 迭代元素</li><li><code>listStr</code> 被迭代<mark>列表变量</mark></li></ul></li><li>按次循环 <code>foreach(&lt;iter&gt; RANGE &lt;stop&gt;)</code><ul><li><code>iter</code> 迭代变量</li><li><code>stop</code> 停止值, 注意迭代将从 0 开始, 直到停止值, 因此循环此时为停止值 + 1</li></ul></li></ul><h4 id="while-循环" tabindex="-1"><a class="header-anchor" href="#while-循环" aria-hidden="true">#</a> while 循环</h4><p><code>while</code> 循环有如下基本结构</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">while</span><span class="token punctuation">(</span>&lt;条件语句<span class="token punctuation">&gt;</span><span class="token punctuation">)</span>
...
<span class="token keyword">endwhile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当条件语句为真时执行循环</p><p>可使用 <code>break()</code> 与 <code>continue()</code> 控制循环 (也可用于<a href="#foreach-%E5%BE%AA%E7%8E%AF">foreach</a>)</p><h4 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h4><p>函数的基本结构</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">function</span><span class="token punctuation">(</span>&lt;name<span class="token punctuation">&gt;</span> [arg1] [arg2]...<span class="token punctuation">)</span>
...
<span class="token keyword">endfunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>name</code> 函数名, 通过此函数名调用函数</li><li><code>arg</code> 函数参数</li></ul><p>由于函数中的作用域比调用函数的位置低一级, 因此函数可以访问外部的值, 但无法修改<br> 如果希望修改外部的值, 则需要启用 <code>set</code> 命令的 <code>PARENT_SCOPE</code> 选项, 例如</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">function</span><span class="token punctuation">(</span>fun opt<span class="token punctuation">)</span>
    <span class="token keyword">set</span><span class="token punctuation">(</span><span class="token punctuation">\${</span><span class="token variable">CMAKE_CXX_STANDARD</span><span class="token punctuation">}</span> <span class="token punctuation">\${</span>opt<span class="token punctuation">}</span> PARENT_SCOPE<span class="token punctuation">)</span>
<span class="token keyword">endfunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CMake 中的函数仅能传入字符串, 但可通过将变量作为名参数的方式传递值, 并使用 <code>set</code> 操作 (类似将变量名称字符串视为变量的指针)<br> 可以此实现类似引用的效果与返回值, 例如</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">function</span><span class="token punctuation">(</span>fun result_val<span class="token punctuation">)</span>
    <span class="token keyword">set</span><span class="token punctuation">(</span><span class="token punctuation">\${</span><span class="token punctuation">\${</span>result_val<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token string">&quot;Hello&quot;</span> PARENT_SCOPE<span class="token punctuation">)</span>
<span class="token keyword">endfunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过语句 <code>return()</code> 可以提前退出函数, 但不能返回值</p><h4 id="引用其他文件" tabindex="-1"><a class="header-anchor" href="#引用其他文件" aria-hidden="true">#</a> 引用其他文件</h4><p>使用命令 <code>include</code> 执行并引用其他 CMAKE 文件 (扩展名为 <code>.cmake</code>)</p><p>引用文件时将执行被引用文件, 且引用的文件中具有与引用位置相同的作用域<br> 可将部分操作作为封装为函数并写入单独的 <code>.cmake</code> 中, 在需要使用时引用</p><h3 id="文件操作" tabindex="-1"><a class="header-anchor" href="#文件操作" aria-hidden="true">#</a> 文件操作</h3><h4 id="文件查找" tabindex="-1"><a class="header-anchor" href="#文件查找" aria-hidden="true">#</a> 文件查找</h4><p>使用命令 <code>file(&lt;GLOB|GLOB_RECURSE&gt; &lt;res&gt; [LIST_DIRECTORIES true|false] [RELATIVE &lt;path&gt;] &lt;express1&gt; &lt;express2&gt; ...)</code> 可以查找文件, 如源文件</p><ul><li><code>res</code> 查找结果保存变量, 为一个列表, 保存了所有满足查找结果的文件路径 (绝对路径)</li><li><code>express</code> 查找文件的表达式字符串, 允许使用 <code>*</code> 与 <code>?</code> 等通配符, 可以此实现查找所有源文件的效果, 如 <code>src/*.cpp</code></li><li><code>LIST_DIRECTORIES</code> 用于递归查询, 是否将递归结果中的目录放在结果中, 默认关闭</li><li><code>RELATIVE &lt;path&gt;</code> 查找路径, 默认为当前的 <code>CMakeLists.txt</code> 所在路径</li><li><code>GLOB|GLOB_RECURSE</code> <code>GLOB</code> 表示仅查找当前目录, <code>GLOB_RECURSE</code> 则将进行递归查找</li><li>使用示例<br> 命令 <code>file(GLOB SOURCE_FILE &quot;\${PROJECT_SOURCE_DIR}/src/*.cpp&quot; &quot;\${PROJECT_SOURCE_DIR}/src/*.c&quot;)</code> 将寻找文件夹 <code>src</code> 下所有的 <code>.c</code> 与 <code>.cpp</code> 文件</li></ul><p>使用命令 <code>aux_source_directory(&lt;res&gt; &lt;dir&gt;)</code> 将寻找指定目录下所有源文件</p><ul><li><code>res</code> 保存查询结果的变量, 为一个列表</li><li><code>dir</code> 查询的文件夹</li></ul><h4 id="其他常用文件操作" tabindex="-1"><a class="header-anchor" href="#其他常用文件操作" aria-hidden="true">#</a> 其他常用文件操作</h4><ul><li>命令 <code>file([FILE_COPY|COPY] &lt;source&gt; &lt;dest&gt;)</code> 复制文件 <ul><li><code>FILE_COPY</code> 复制单个文件为指定文件</li><li><code>COPY</code> 复制多个文件与目录到指定目录下</li></ul></li><li>命令 <code>file(RENAME &lt;source&gt; &lt;dest&gt;)</code> 重命名 (移动) 文件</li><li>命令 <code>file([WRITE|APPEND] &lt;file&gt; &lt;content&gt;)</code> 创建文件并写入内容, 文件不存在时将创建 <ul><li><code>WRITE</code> 写入时将覆盖原有内容</li><li><code>APPEND</code> 写入时将在文件末尾添加内容</li></ul></li></ul><h2 id="项目配置" tabindex="-1"><a class="header-anchor" href="#项目配置" aria-hidden="true">#</a> 项目配置</h2>`,37),m={href:"https://blog.csdn.net/qq_43495002/article/details/134000654",target:"_blank",rel:"noopener noreferrer"},v=o('<h3 id="项目基本配置" tabindex="-1"><a class="header-anchor" href="#项目基本配置" aria-hidden="true">#</a> 项目基本配置</h3><p>对于任何 <code>CMakeLists.txt</code> 项目在配置前都应当设置 CMake 版本要求与项目信息</p><h4 id="cmake-版本要求" tabindex="-1"><a class="header-anchor" href="#cmake-版本要求" aria-hidden="true">#</a> CMake 版本要求</h4><p>通过命令 <code>cmake_minimum_required(VERSION &lt;version&gt;)</code> 设置 CMAKE 的最低版本要求</p><ul><li><code>version</code> 即需最低版本号的字符串, 通常版本 <code>3.10</code> 可满足大部分要求</li></ul><p>经过命令设置后, 可通过变量 <code>CMAKE_MINIMUM_REQUIRED_VERSION</code> 查询设置的版本要求</p><h4 id="项目信息" tabindex="-1"><a class="header-anchor" href="#项目信息" aria-hidden="true">#</a> 项目信息</h4><p>通过命令 <code>project(&lt;name&gt; [VERSION &lt;ver&gt;] [LANGUAGES &lt;lang&gt;])</code> 设置项目信息</p><ul><li><code>name</code> 项目名称字符串</li><li><code>ver</code> 项目版本号的字符串</li><li><code>lang</code> 项目需要的语言, 多个语言时输入字符串, 经过此设置后 CMake 将检查对应语言的编译器 <code>CMAKE_XXX_COMPILER</code> 是否存在<br> 主要语言的表示字符串有 <ul><li><code>C</code> C 语言 (默认)</li><li><code>CXX</code> C++ (默认)</li><li><code>ASM</code> 汇编语言</li></ul></li></ul><p>经过设置项目信息后, 可通过以下变量读取信息</p><ul><li><code>PROJECT_NAME</code> 当前项目名称</li><li><code>PROJECT_SOURCE_DIR</code> 当前项目源码目录 (通常即该项目的 <code>CMakeLists.txt</code> 文件所在目录)</li><li><code>PROJECT_BINARY_DIR</code> 生成文件存放目录 (通常即 <code>build</code> 目录)</li></ul><h4 id="其他项目信息" tabindex="-1"><a class="header-anchor" href="#其他项目信息" aria-hidden="true">#</a> 其他项目信息</h4><p>通过设置变量 <code>CMAKE_XXX_STANDARD</code> 查询与设置项目中语言 <code>XXX</code> 标准要求, 标准即一个数字 (不建议通过编译选项设置标准要求)</p><ul><li>对于 <code>CXX</code> (C++) 常用的有 <code>98</code>, <code>11</code>, <code>17</code> 等</li><li>对于 <code>C</code> 常用的有 <code>98</code>, <code>11</code></li></ul><p>之后还要设置变量 <code>CMAKE_CXX_STANDARD_REQUIRED</code> 为 <code>ON</code>, 开启要求</p><p>通过设置变量 <code>CMAKE_BUILD_TYPE</code> 查询与设置项目的构建类型, 通常有以下构建类型</p><ul><li><code>Debug</code> 调试版本, 启用编译选项 <code>-g</code>, 默认采用此设置</li><li><code>Release</code> 发行版本, 启用编译选项 <code>-O3 -DNDEBUG</code></li><li><code>RelWithDebugInfo</code> 保存调试信息的发行版本, 启用编译选项 <code>-O2 -g</code></li><li><code>MinSizeRel</code> 最小体积发行版本, 启用编译选项 <code>-Os -DNDEBUG</code></li><li>编译选项中 <ul><li><code>-DNDBUG</code> 将定义宏 <code>NDEBUG</code> 并屏蔽如 <code>assert</code> 等断言, 以使源代码可通过宏判断 <code>#if</code> 跳过调试代码</li><li><code>-Ox,-g</code> 见<a href="#%E7%BC%96%E8%AF%91%E5%99%A8%E9%85%8D%E7%BD%AE">编译器配置</a>中的介绍</li></ul></li></ul><h3 id="编译配置" tabindex="-1"><a class="header-anchor" href="#编译配置" aria-hidden="true">#</a> 编译配置</h3><p>通过查看 <code>build</code> 下的文件 <code>compile_commands.json</code> 可查看最终编译选项</p><h4 id="编译器配置" tabindex="-1"><a class="header-anchor" href="#编译器配置" aria-hidden="true">#</a> 编译器配置</h4><p>通过命令 <code>add_compile_definitions(&lt;def1&gt; &lt;def2&gt; ...)</code> 设置预定义宏</p><ul><li><code>def</code> 预定义的宏, 等价为 GCC 的 <code>-D</code> 命令</li><li>定义格式为 <code>-D&lt;宏名称&gt;[=[宏值]]</code>, 注意如果定义宏的值时, 则等号之间不能有空格, 默认值为 1</li><li>此命令将对之后所有生成的目标生效</li></ul><p>通过命令 <code>add_compile_options(&lt;options&gt;)</code> 设置编译时向编译器传递的编译选项, 如 gcc</p><ul><li><code>options</code> 用于传递的编译选项, 允许传入列表</li><li>注意, 使用此命令时, 将对所有编译器传入选项</li><li>仅当<a href="#%E7%94%9F%E6%88%90%E7%9B%AE%E6%A0%87">生成目标</a>前设置有效, 生成目标后配置不会生效</li></ul><p>通过设置变量 <code>CMAKE_XXX_FLAGS</code> 查询与设置项目语言 <code>XXX</code> 的全局编译选项</p><ul><li>此变量无法查询通过 <code>add_compile_options</code> 设置的选型</li><li>由于选项间不能有 <code>;</code>, 因此不能将选项作为列表, 添加选项时应在原有基础上添加, 如 <code>set(CMAKE_CXX_FLAGS &quot;${CMAKE_CXX_FLAGS} -Wall&quot;)</code> (注意选项间的空格)</li></ul><p>通过设置变量 <code>CMAKE_XXX_FLAGS_YYY</code> 查询与设置项目语言 <code>XXX</code> 在构建类型 <code>YYY</code> 下的编译选项</p><ul><li>此变量在赋值前已有<a href="#%E5%85%B6%E4%BB%96%E9%A1%B9%E7%9B%AE%E4%BF%A1%E6%81%AF">默认值</a>, 直接赋值将覆盖</li><li>最终编译选项将由 <code>add_compile_options</code>, <code>CMAKE_XXX_FLAGS</code>, 对应构建模式下的 <code>CMAKE_XXX_FLAGS_YYY</code> 共同决定</li></ul>',28),A={href:"https://gcc.gnu.org/onlinedocs/gcc/Invoking-GCC.html",target:"_blank",rel:"noopener noreferrer"},C=o('<ul><li><code>-Wall</code> 显示所有类型的错误</li><li><code>-Werror</code> 将所有警告视为错误处理</li><li><code>-Ox</code> 优化配置, 主要有 <ul><li><code>-Og</code> 在不影响调试的情况下, 优化编译速度, 运行速度与结果大小</li><li><code>-O1</code> 不影响编译速度的前提下, 提升代码速度</li><li><code>-O3</code> 降低编译速度, 极大提升代码运行速度, 但导致结果增大</li><li><code>-Os</code> 降低编译速度, 提升代码运行速度并降低结果大小</li></ul></li><li><code>-g</code> 保留调试信息, 仅当开启此选型时才能使用 gdb 等工具调试</li><li><code>-pipe</code> 不生成中间文件, 多线程编译, 可以提升编译速度, 但将增加内存消耗</li><li>注意, 对于控制标准, 编译文件等操作最好由 CMake 的其他选项完成, 而不是编译选项</li></ul><h4 id="链接器配置" tabindex="-1"><a class="header-anchor" href="#链接器配置" aria-hidden="true">#</a> 链接器配置</h4><p>通过命令 <code>add_link_options(&lt;options&gt;)</code> 设置编译时向链接器传递的编译选项, 如 ld</p><ul><li><code>options</code> 用于传递的编译选项, 允许传入列表</li><li>注意, 使用此命令时, 将对所有链接器传入选项</li></ul><p>通过设置变量 <code>CMAKE_EXE_LINKER_FLAGS</code> 查询与设置项目链接的全局链接选项</p><ul><li>添加选项时应在原有基础上添加</li></ul>',6),f={href:"https://gcc.gnu.org/onlinedocs/gcc/Link-Options.html",target:"_blank",rel:"noopener noreferrer"},x=o('<ul><li><code>-T&lt;path&gt;</code> 设置连接脚本 <code>path</code> 为脚本的路径</li><li><code>-s</code> 删除所有符号表, 以减少构建文件的大小</li><li><code>-lm -lstdc++</code> 启用对 C++ 的支持, 用于 C/C++ 混合编程</li></ul><h3 id="生成配置" tabindex="-1"><a class="header-anchor" href="#生成配置" aria-hidden="true">#</a> 生成配置</h3><h4 id="源文件查找" tabindex="-1"><a class="header-anchor" href="#源文件查找" aria-hidden="true">#</a> 源文件查找</h4><p>可参考<a href="#%E6%96%87%E4%BB%B6%E6%9F%A5%E6%89%BE">文件查找</a>命令, 搜索源文件目录下的 <code>.cpp</code>, <code>.c</code> 等源文件</p><h4 id="添加包含项" tabindex="-1"><a class="header-anchor" href="#添加包含项" aria-hidden="true">#</a> 添加包含项</h4><p>使用命令 <code>include_directories(&lt;dir1&gt; &lt;dir2&gt; ...)</code> 添加包含目录</p><ul><li>此命令将对之后所有目标生效, 但在该命令之前的目标不会生效</li><li>等价于 <code>GCC</code> 中的 <code>-I</code> 选项, 但推荐使用该命令添加包含目录</li></ul><p>使用命令 <code>link_libraries(&lt;path1&gt; &lt;path2&gt; ...)</code> 添加链接包含库文件</p><ul><li>此命令将对之后所有目标生效, 但在该命令之前的目标不会生效</li><li>等价于 <code>GCC</code> 中的 <code>-l</code> 选项, 但推荐使用该命令添加包含目录</li></ul><p>使用命令 <code>link_directories(&lt;dir1&gt; &lt;dir2&gt; ...)</code> 添加库目录</p><ul><li>注意, <code>link_libraries</code> 将从该命令定义的目录中寻找库文件</li><li>该命令不起链接效果, 仅是辅助 <code>link_libraries</code> 使用</li></ul><h4 id="生成目标" tabindex="-1"><a class="header-anchor" href="#生成目标" aria-hidden="true">#</a> 生成目标</h4><p>使用命令 <code>add_executable(&lt;target&gt; &lt;src&gt;)</code> 生成目标可执行文件</p><ul><li><code>target</code> 目标名称, 将生成目标名称的可执行文件 (同平台下不需要后缀)</li><li><code>src</code> 用于生成目标的源文件列表</li></ul><p>使用命令 <code>add_library(&lt;target&gt; &lt;生成类型&gt; &lt;src&gt;)</code> 生成目标动态 / 静态库</p><ul><li><code>target</code> 目标名称, 将生成目标名称的动态 / 静态库 (同平台下不需要后缀)</li><li><code>src</code> 用于生成目标的源文件列表</li><li><code>生成类型</code> 主要有 <code>SHARE</code> 动态库与 <code>STATIC</code> 静态库两种</li></ul><h3 id="目标配置" tabindex="-1"><a class="header-anchor" href="#目标配置" aria-hidden="true">#</a> 目标配置</h3><p>以上的命令均为在目标生成前, 对全局所有目标的配置<br> 对于多目标的项目, 更推荐使用以下命令对单个目标分别配置</p><h4 id="常用目标配置命令" tabindex="-1"><a class="header-anchor" href="#常用目标配置命令" aria-hidden="true">#</a> 常用目标配置命令</h4><p>目标配置命令只在在生成目标命令之后才会生效</p><ul><li>设置目标编译选项 <code>target_compile_options(&lt;target&gt; [domain1] &lt;opt1&gt; ...)</code>, 对应 <code>add_compile_options</code></li><li>设置目标预定义宏 <code>target_compile_definitions(&lt;target&gt; [domain1] &lt;def1&gt; ...)</code> 对应 <code>add_compile_definitions</code></li><li>设置目标链接选项 <code>target_link_options(&lt;target&gt; [domain1] &lt;opt1&gt; ...)</code> 对应 <code>add_link_options</code></li><li>设置目标包含目录 <code>target_include_directories(&lt;target&gt; [domain1] &lt;dir1&gt; ...)</code> 对应 <code>include_directories</code></li><li>设置目标引用库目录 <code>target_link_directories(&lt;target&gt; [domain1] &lt;path1&gt;)</code> (仅设置目录, 具体链接库还需要 <code>target_link_libraries</code>) 对应 <code>link_directories</code></li><li>设置目标引用库 <code>target_link_libraries(&lt;target&gt; [domain1] &lt;path1&gt;)</code> 对应 <code>link_libraries</code></li></ul><h4 id="依赖传递参数" tabindex="-1"><a class="header-anchor" href="#依赖传递参数" aria-hidden="true">#</a> 依赖传递参数</h4><p>其中的参数 <code>domain</code> 为依赖传递参数<br> 项目中存在类似引用关系 <code>A.so-&gt;B.so-&gt;C.so</code>, 其中 A, B, C 为项目中从外到内的三个层级</p><p>以下说明中, B 在情况符合时需要启用对应的设置, A 与 C 则按情况确定, 对于单层次项目, 使用 <code>PRIVATE</code> 即可</p><ul><li><code>PRIVATE</code><ul><li>表明 A 完全不会使用到来自 C 的任何源文件 (C.cpp) 或接口 (C.h)</li><li>此时要求 B 中的公开接口 (B.h) 不包含来自 C 的接口 (C.h)</li></ul></li><li><code>INTERFACE</code><ul><li>表明 A 完全使用到来自 C 的接口 (C.h), 但是 B 没有使用到 C 的源文件 (C.cpp), 仅通过其接口将 C 的暴露给 A</li><li>此时要求 B 中的公开接口 (B.h) 包含来自 C 的接口 (C.h), 但其源文件没有使用 C 提供的功能</li></ul></li><li><code>PUBLIC</code><ul><li>即一般情况, B 与 A 均同时在其源文件内使用了 C 的接口</li></ul></li></ul><p>在实际使用中</p><ul><li>单层次项目中, 使用 <code>PRIVATE</code> 即可</li><li><a href="#%E5%A4%9A%E5%B1%82%E7%BA%A7%E7%BB%93%E6%9E%84">多层级项目</a>中 <ul><li>子项目函数的包含目录应为 <code>PUBLIC</code>, 否则无法使用子项目, 没有意义</li><li>子项目使用模块的包含目录可根据主项目是否需要设置为 <code>PUBLIC</code> 或 <code>PRIVATE</code></li><li>子项目的静态库目录应当设置为 <code>PUBLIC</code>, 否则可能导致链接失败</li><li>子项目的静态库链接设置使用 <code>PRIVATE</code> 或 <code>PUBLIC</code> 均可 (区别未知)</li></ul></li></ul><h3 id="多层级结构" tabindex="-1"><a class="header-anchor" href="#多层级结构" aria-hidden="true">#</a> 多层级结构</h3><p>在有的情况下, 一个项目下包含了多个目标, 例如目标 <code>A, B</code> 生成静态库, 目标 <code>C</code> 生成可执行文件以测试 <code>A, B</code> 的静态库</p><p>如果使用单个 <code>CMakeLists.txt</code> 时, 将导致 CMake 命令过长与各个目标之间不独立的问题</p><p>为此可使用<a href="#%E6%B7%BB%E5%8A%A0%E5%AD%90%E9%A1%B9%E7%9B%AE">添加子项目</a>, 将每个目标视为一个子项目, 每个子项目都是一个独立的 CMake 项目并管理着唯一的目标</p><h4 id="添加子项目" tabindex="-1"><a class="header-anchor" href="#添加子项目" aria-hidden="true">#</a> 添加子项目</h4><p>命令 <code>add_subdirectory(&lt;source_dir&gt; [binary_dir])</code> 添加子项目</p><ul><li><code>source_dir</code> 子项目源文件路径, 要保证该路径下存在一个用于生成子项目的 <code>CMakeLists.txt</code> 文件</li><li><code>binary_dir</code> 生成文件存放目录, 一般仅两种情况需要 <ul><li><a href="#%E5%AD%90%E9%A1%B9%E7%9B%AE%E9%97%B4%E5%BC%95%E7%94%A8">子项目间引用</a>, 具体见笔记</li><li>引用外部项目, 此时需要给出该项目的<a href="#%E9%A1%B9%E7%9B%AE%E4%BF%A1%E6%81%AF">生成文件存放目录</a></li></ul></li><li>使用多层级结构时, 主项目中只需要使用此命令添加所有子项目即可, 通过生成不同目标以生成特定子项目</li></ul><p>对于子项目内部</p><ul><li>子项目依然需要 <a href="#%E9%A1%B9%E7%9B%AE%E4%BF%A1%E6%81%AF">project</a> 命令指定项目名称</li><li>子项目能继承主项目的有关设置, 同时具有独立的变量空间与<a href="#%E9%A1%B9%E7%9B%AE%E4%BF%A1%E6%81%AF">项目信息</a></li><li>虽然一个子项目管理一个目标, 但依然建议使用<a href="#%E7%9B%AE%E6%A0%87%E9%85%8D%E7%BD%AE">目标配置命令</a></li><li>因此一般每个子项目下都会有独立的源文件与头文件目录</li></ul><p>对于主项目</p><ul><li>主项目在添加子项目后, 将自动获取子项目中创建的目标</li><li>如果子项目为静态库, 将其目标中<a href="#%E4%BE%9D%E8%B5%96%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0">依赖传递参数</a>为 <code>PUBLIC</code> 的设置传递到主项目中, 不需要再次设置</li><li>此时如果子项目生成静态库, 其包含与链接目录将自动添加到主项目中目标配置, 但<mark>依然要设置<a href="#%E6%B7%BB%E5%8A%A0%E5%8C%85%E5%90%AB%E9%A1%B9">链接库</a></mark></li><li>生成时, 每个子项目都将生成到一个独立的目录中</li></ul><h4 id="子项目间引用" tabindex="-1"><a class="header-anchor" href="#子项目间引用" aria-hidden="true">#</a> 子项目间引用</h4>',39),R={href:"https://blog.csdn.net/lcmssd/article/details/64732528",target:"_blank",rel:"noopener noreferrer"},T=o('<p>除了主项目添加子项目, 也允许子项目间的引用, 例如<a href="#%E5%A4%9A%E5%B1%82%E7%BA%A7%E7%BB%93%E6%9E%84">此处场景</a>中的测试子项目, 此时需要注意 (假设所有子项目目录均为主项目的子目录)</p><ul><li>需要<a href="#%E5%B8%B8%E7%94%A8%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5">判断目标是否存在</a>如 <code>if (NOT TARGET &lt;target&gt;)</code>, 后再引用子项目, 因为主目录已经引入了一次子项目, 避免重复创建目标 ()</li><li>需要指定参数 <code>binary_dir</code>, 一般即 <code>../&lt;引用子项目名&gt;</code>, 指向了主目标生成该项目的存放目录, 避免重复生成</li><li>由<a href="#%E6%B7%BB%E5%8A%A0%E5%AD%90%E9%A1%B9%E7%9B%AE">添加子项目</a>效果可知 <ul><li>此时测试子项目不需要配置被引用的子项目的目录, 但依然需要设置链接库 (通常即子项目名)</li><li>经过以上设置, 在测试子项目构建前, 引用子项目也将自动构建</li></ul></li><li>子, 主项目使用<a href="#%E7%9B%AE%E6%A0%87%E9%85%8D%E7%BD%AE">目标配置命令</a>时, 注意<a href="#%E4%BE%9D%E8%B5%96%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0">依赖传递参数</a>的正确设置</li></ul><h3 id="自定义命令行" tabindex="-1"><a class="header-anchor" href="#自定义命令行" aria-hidden="true">#</a> 自定义命令行</h3><h4 id="目标生成过程执行命令" tabindex="-1"><a class="header-anchor" href="#目标生成过程执行命令" aria-hidden="true">#</a> 目标生成过程执行命令</h4><p>通过命令 <code>add_custom_command(TARGET &lt;target&gt; &lt;构建阶段&gt; COMMAND &lt;cmd1&gt; COMMAND &lt;cmd2&gt; ...)</code> 在目标构建的不同阶段执行自定义命令</p>',5),B=o("<li><code>target</code> 配置的目标名称</li><li><code>构建阶段</code> 有如下执行命令的构建阶段 <ul><li><code>PRE_BUILD</code> 编译前执行</li><li><code>PRE_LINK</code> 链接前执行</li><li><code>POST_BUILD</code> 生成后执行, 例如将生成的库移动到测试环境</li></ul></li>",2),O=e("code",null,"cmd",-1),I={href:"https://cmake.org/cmake/help/latest/manual/cmake.1.html#run-a-command-line-tool",target:"_blank",rel:"noopener noreferrer"},M=e("br",null,null,-1),L=e("br",null,null,-1),N=e("code",null,"COMMAND",-1),D=e("br",null,null,-1),q=e("code",null,"add_custom_command(TARGET xxx POST_BUILD echo Build done)",-1),P=e("code",null,"Build done",-1),S=o('<p>为了保证 CMake 项目的跨平台特性, 在执行命令时推荐</p><ul><li>通过变量引用具体的命令解释器, 而非执行命令, 如 <ul><li><code>${CMAKE_COMMAND}</code> 获取 CMake 解释器路径表达命令, 如 <code>${CMAKE_COMMAND} -E echo &quot;Post build command start&quot;</code></li><li><code>${PYBIND11_PYTHON_EXECUTABLE_LAST}</code> 获取 python 解释器 (pybind11 中)</li></ul></li><li>对于如复制, 重命名文件等操作, 推荐使用 cmake 的 -E 选项完成, 具体见<a href="#%E7%AE%80%E5%8D%95%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C">Cmake 完成简单命令行操作</a></li><li>注意此时的相对路径的根目录无法确定, 因此应当使用<a href="#%E9%A1%B9%E7%9B%AE%E4%BF%A1%E6%81%AF">项目信息</a>中的变量如 <code>${PROJECT_SOURCE/BINARY_DIR}</code> 获取源文件 / build 文件的根目录</li></ul><h4 id="自定义目标" tabindex="-1"><a class="header-anchor" href="#自定义目标" aria-hidden="true">#</a> 自定义目标</h4><p>通过命令 <code>add_custom_target(&lt;target&gt; COMMAND &lt;cmd1&gt; COMMAND &lt;cmd2&gt; ...)</code> 创建自定义目标</p><ul><li><code>target</code> 自定义目标名称</li><li><code>cmd</code> 执行的 CMake 命令, 与<a href="#%E7%9B%AE%E6%A0%87%E7%94%9F%E6%88%90%E8%BF%87%E7%A8%8B%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4">目标生成过程执行命令</a>中的相同</li></ul><p>通过自定义目标, 可将 CMake 用于构建其他语言的项目, 或将一些常用操作封装为伪目标, 并在需要时执行</p><h3 id="cmake-命令" tabindex="-1"><a class="header-anchor" href="#cmake-命令" aria-hidden="true">#</a> CMake 命令</h3>',7),y={href:"https://blog.csdn.net/u014183456/article/details/124512715",target:"_blank",rel:"noopener noreferrer"},V=o('<p>完成配置后, 还需要通过 cmake 命令完成项目的构建<br><code>cmake &lt;CMakeLists.txt 目录&gt; [-B...] [-D...] [-G...]</code></p><p>目标的生成也可通过 cmake 命令完成 <code>cmake --build &lt;build 目录&gt; --target &lt;生成目标&gt;</code></p><h4 id="指定-build-目录" tabindex="-1"><a class="header-anchor" href="#指定-build-目录" aria-hidden="true">#</a> 指定 Build 目录</h4><p>使用选项 <code>-B</code> 指定 CMake 构建过程中的 Build 目录, 一般即 <code>CMakeLists.txt</code> 所在目录下的 <code>build</code> 文件夹</p><h4 id="定义缓存变量-1" tabindex="-1"><a class="header-anchor" href="#定义缓存变量-1" aria-hidden="true">#</a> 定义缓存变量</h4><p>使用选项 <code>-D</code> 定义缓存变量, 基本格式为<br><code>cmake -D&lt;变量名&gt;:&lt;变量类型&gt;=&lt;变量值&gt; -D...</code></p><p>变量类型见<a href="#%E5%AE%9A%E4%B9%89%E7%BC%93%E5%AD%98%E5%8F%98%E9%87%8F">定义缓存变量</a>处的说明</p><p>注意, 使用该方法定义缓存变量具有比一般变量更高的优先级, 且部分选项仅有通过 <code>-D</code> 选项设置才能生效, 如 <code>CMAKE_TOOLCHAIN_FILE</code><br> 对于 <code>CMAKE_BUILD_TYPE</code> 等选项也建议使用该方法在构建时指定</p><h4 id="指定生成器" tabindex="-1"><a class="header-anchor" href="#指定生成器" aria-hidden="true">#</a> 指定生成器</h4><p>CMake 仅有构建项目的能力, 而无法生成目标, 因此生成目标时还需要具体指定生成器<br> 常用有</p><ul><li><code>Ninja</code> 速度最快, 需要安装 (Linux 下通过 <code>apt</code> 安装, Windows 下通过 <code>pip</code> 或 <code>conda</code> 安装)</li><li><code>Visual Studio 17 2022</code> 生成 Visual Studio 2022 项目</li><li><code>MinGW Makefiles</code> 用于 Windows 下的 MinGW</li></ul>',11),w={href:"https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html#manual:cmake-generators(7)",target:"_blank",rel:"noopener noreferrer"},F=o('<h4 id="简单命令行操作" tabindex="-1"><a class="header-anchor" href="#简单命令行操作" aria-hidden="true">#</a> 简单命令行操作</h4><p>使用选项 <code>-E</code> 可通过 CMake 执行简单的命令行操作<br> 基本格式为 <code>cmake -E &lt;命令内容&gt;</code>, 通常配合<a href="#%E7%9B%AE%E6%A0%87%E7%94%9F%E6%88%90%E8%BF%87%E7%A8%8B%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4">目标生成过程执行命令</a>使用<br> 常用的命令有</p><ul><li><code>copy &lt;file1&gt; [file2 ...] &lt;dest&gt;</code> 将文件 <code>file</code> 复制到目录 <code>dest</code> 下</li><li><code>renome &lt;old&gt; &lt;new&gt;</code> 重命名 / 移动文件</li><li><code>chdir &lt;dir&gt;</code> 修改所作目录即相对路径的根目录</li><li><code>echo &lt;string&gt;</code> 像控制台输出内容</li></ul>',3),G={href:"https://cmake.org/cmake/help/latest/manual/cmake.1.html#run-a-command-line-tool",target:"_blank",rel:"noopener noreferrer"},U=o(`<h2 id="vcpkg-包管理" tabindex="-1"><a class="header-anchor" href="#vcpkg-包管理" aria-hidden="true">#</a> vcpkg 包管理</h2><h3 id="vcpkg-安装" tabindex="-1"><a class="header-anchor" href="#vcpkg-安装" aria-hidden="true">#</a> vcpkg 安装</h3><ol><li>克隆 vcpkg 仓库到本地文件夹, 推荐安装位置为 <code>C:\\dev\\vcpkg</code><br><code>git clone https://github.com/microsoft/vcpkg</code></li><li>运行安装程序 <code>.\\vcpkg\\bootstrap-vcpkg.bat</code></li><li>将安装目录添加 <code>PATH</code> 环境变量</li><li>Vscode 安装插件 CMake Tools, 并对插件的选项 <code>configureSettings</code> 进行如下设置</li></ol><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;cmake.configureSettings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;CMAKE_TOOLCHAIN_FILE&quot;</span><span class="token operator">:</span> <span class="token string">&quot;[vcpkg 安装目录]\\\\scripts\\\\buildsystems\\\\vcpkg.cmake&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),X={href:"https://blog.csdn.net/qq_35914805/article/details/135532395",target:"_blank",rel:"noopener noreferrer"},$={href:"https://github.com/microsoft/vcpkg/blob/master/README_zh_CN.md",target:"_blank",rel:"noopener noreferrer"},Y=o(`<h3 id="基本流程" tabindex="-1"><a class="header-anchor" href="#基本流程" aria-hidden="true">#</a> 基本流程</h3><h4 id="创建项目" tabindex="-1"><a class="header-anchor" href="#创建项目" aria-hidden="true">#</a> 创建项目</h4><p>在项目的根目录下运行命令<br><code>vcpkg --application new</code><br> 创建一个 vcpkg 项目</p><h4 id="添加包" tabindex="-1"><a class="header-anchor" href="#添加包" aria-hidden="true">#</a> 添加包</h4><p>在生成的 <code>vcpkg.json</code> 中添加配置模板 <code>&quot;$schema&quot;:</code>, 并采用来自以下地址的模板<br><code>&quot;https://raw.githubusercontent.com/microsoft/vcpkg-tool/main/docs/vcpkg.schema.json&quot;</code></p><p>在 <code>vcpkg.json</code> 中添加属性 <code>dependencies</code>, 该属性的值为一个数组, 通过其中的元素确定采用的包<br> 通常元素的结构为 (其中 <code>feature</code> 属性不是必须的)</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;name&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;使用的包名称&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;feature&quot;</span> <span class="token punctuation">[</span><span class="token string">&quot;特性1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;特性2&quot;</span><span class="token punctuation">,</span> ...<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在包添加完成后, 可使用命令 <code>vcpkg install</code> 安装包 (非必须, 也可在 CMake 中自动完成)</p><h4 id="cmake-设置" tabindex="-1"><a class="header-anchor" href="#cmake-设置" aria-hidden="true">#</a> CMake 设置</h4><p>在 <code>CMakeLists.txt</code> 中具体设置目标使用的 Triple (目标环境配置)<br><code>set(VCPKG_TARGET_TRIPLET &quot;环境配置名&quot; CACHE STRING &quot;Modified Triplet&quot; FORCE)</code><br> 当设置失败时, 可在 <code>CMakeCache.txt</code> 中查看该缓存变脸是否修改成功 (注意 vscode 下大概率需要手动修改或在初次构建后再构建一次)</p><p>常用的 Triple 有 (注意 Triplet 必须与实际匹配)</p><ul><li><code>x64-mingw-static</code> x64 位 Windows 下使用 mingw 编译, 采用内部链接</li><li><code>x64-mingw-dynamic</code> x64 位 Windows 下使用 mingw 编译, 采用外部链接 (将自动移动 dll 文件到输出下)</li><li><code>x64-windows</code> x64 位 Windows 下使用 MCVS 编译, 采用外部链接 (默认的配置)</li></ul><p>运行 <code>cmake</code>, 进行项目构建, 并以此查看启用包所需的 CMake 命令</p><h4 id="使用-vcpkg" tabindex="-1"><a class="header-anchor" href="#使用-vcpkg" aria-hidden="true">#</a> 使用 vcpkg</h4><p>对于已通过插件设置</p><p>对于命令行下的 CMake 项目构建需要添加以下选项</p><ul><li><code>-DCMAKE_TOOLCHAIN_FILE=[vcpkg 路径]/scripts/buildsystems/vcpkg.cmake</code></li><li><code>-DVCPKG_TARGET_TRIPLET=项目使用的 Triplet</code></li></ul><h3 id="基本命令" tabindex="-1"><a class="header-anchor" href="#基本命令" aria-hidden="true">#</a> 基本命令</h3><h4 id="查看包" tabindex="-1"><a class="header-anchor" href="#查看包" aria-hidden="true">#</a> 查看包</h4><p>使用以下命令查看 Vcpkg 中可安装的包与特性<br><code>vcpkg search &lt;搜索内容&gt;</code><br> 可搜索包名, 所需功能等</p><h4 id="查看-triplet" tabindex="-1"><a class="header-anchor" href="#查看-triplet" aria-hidden="true">#</a> 查看 Triplet</h4>`,21),H=e("br",null,null,-1),K=e("code",null,"vcpkg help triplet",-1),j=e("br",null,null,-1),W=o('<h4 id="更新-vcpkg" tabindex="-1"><a class="header-anchor" href="#更新-vcpkg" aria-hidden="true">#</a> 更新 Vcpkg</h4><p>打开 Vcpkg 所在文件夹, 运行命令 <code>git pull</code></p><h3 id="模块安装说明" tabindex="-1"><a class="header-anchor" href="#模块安装说明" aria-hidden="true">#</a> 模块安装说明</h3><h4 id="opencv" tabindex="-1"><a class="header-anchor" href="#opencv" aria-hidden="true">#</a> OpenCV</h4><ol><li>推荐中要求设定变量 <code>OpenCV_DIR</code> 的值, 实际可不进行设置</li><li>链接 <code>OpenCV</code> 时应使用变量 <code>${OpenCV_LIBS}</code>, 或打印此变量, 查看可用的库</li></ol><h4 id="boost" tabindex="-1"><a class="header-anchor" href="#boost" aria-hidden="true">#</a> Boost</h4>',6),J={href:"https://www.boost.org/doc/libs/1_79_0/more/getting_started/windows.html#header-only-libraries",target:"_blank",rel:"noopener noreferrer"},Q=e("code",null,"find_package(Boost REQUIRED)",-1),Z=e("code",null,"target_link_libraries(${PROJECT_NAME} PRIVATE Boost::boost)",-1),z=e("li",null,[a("对于 Boost::asio, 在 Windows 下还需要额外链接库 "),e("code",null,"target_link_libraries(${PROJECT_NAME} PRIVATE ws2_32.lib PRIVATE mswsock.lib)")],-1),ee=e("h4",{id:"pybind11",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#pybind11","aria-hidden":"true"},"#"),a(" pybind11")],-1),ae=e("p",null,"对于 Python 与 C++ 的混合编程, 推荐使用 pybind11 而不使用 Boost::python",-1),oe=e("code",null,"Python_ROOT_DIR",-1),ce=e("code",null,"print(sys.executable)",-1),de=e("code",null,"Python_ROOT_DIR",-1),ne={href:"https://cmake.org/cmake/help/latest/module/FindPython.html#hints",target:"_blank",rel:"noopener noreferrer"},te=o('<li>确定变量后, 需要通过<a href="#%E6%96%87%E4%BB%B6%E5%A4%8D%E5%88%B6">文件复制</a>命令将 <code>Python_ROOT_DIR</code> 下的 <code>pythonXXX.dll</code> 复制到生成目录 (<code>PROJECT_BINARY_DIR</code>) 下</li><li>注意, DEBUG 模式下, 需要使用 <code>pythonXXX_d.dll</code> 版本的动态链接库, 若没有则推荐设置构建类型 (CMAKE_BUILD_TYPE) 为 RelWithDebugInfo</li><li>通过 <code>find_package(Python COMPONENTS Interpreter Development)</code> 寻找 python 与 <code>find_package(pybind11 CONFIG REQUIRED)</code> 导入 pybind11</li><li>对于不同的混合方式需要采用以下目标 <ul><li>通过 C++ 调用 Python 时, 除了生成可执行文件 <code>target_link_libraries(&lt;可执行文件目标名&gt; PRIVATE pybind11::embed)</code></li><li>生成供 Python 调用的 C++ 库时, 则使用命令 <code>pybind11_add_module(&lt;模块名&gt; MODULE &lt;源文件&gt;)</code> 生成 python 模块文件 <code>模块名.调用信息.pyd</code> (自动生成, 注意模块名)</li></ul></li>',4),ie=o(`<p>自动化项目时, 可能会用到以下实用变量</p><ul><li><code>PYBIND11_PYTHON_EXECUTABLE_LAST</code> 项目所用环境对应的 python 解释器, 可用此解释器执行脚本保证环境匹配</li><li><code>PYTHON_MODULE_EXTENSION</code> 对应平台的 python 模块后缀, 可用此获取生成的模块文件</li></ul><p>对于 C++ 调用 Python 的配置示例如下</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.10</span><span class="token punctuation">)</span>
<span class="token keyword">project</span><span class="token punctuation">(</span>pybind_test<span class="token punctuation">)</span>

<span class="token comment"># 需要手动确认的变量</span>
<span class="token comment"># 解释器程序根目录</span>
<span class="token keyword">set</span><span class="token punctuation">(</span>Python_ROOT_DIR <span class="token string">&quot;D:/miniconda3/envs/playground&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># python 版本</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">PYTHON_DLL_VERSION</span> <span class="token string">&quot;312&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 生成三个重要的变量</span>
<span class="token keyword">set</span><span class="token punctuation">(</span>PYTHON_DLL <span class="token string">&quot;python<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">PYTHON_DLL_VERSION</span><span class="token punctuation">}</span></span>.dll&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">file</span><span class="token punctuation">(</span>COPY_FILE <span class="token string">&quot;<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">Python_ROOT_DIR</span><span class="token punctuation">}</span></span>/python<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">PYTHON_DLL_VERSION</span><span class="token punctuation">}</span></span>.dll&quot;</span> <span class="token string">&quot;<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">PROJECT_BINARY_DIR</span><span class="token punctuation">}</span></span>/python<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">PYTHON_DLL_VERSION</span><span class="token punctuation">}</span></span>.dll&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">find_package</span><span class="token punctuation">(</span>Python COMPONENTS Interpreter Development<span class="token punctuation">)</span>
<span class="token keyword">find_package</span><span class="token punctuation">(</span>pybind11 CONFIG REQUIRED<span class="token punctuation">)</span>

<span class="token keyword">file</span><span class="token punctuation">(</span>GLOB SOURCE_FILE ./src/*.cpp<span class="token punctuation">)</span>
<span class="token keyword">add_executable</span><span class="token punctuation">(</span><span class="token punctuation">\${</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">}</span> <span class="token punctuation">\${</span>SOURCE_FILE<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span><span class="token punctuation">\${</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">}</span> <span class="token namespace">PRIVATE</span> <span class="token inserted class-name">pybind11::embed</span><span class="token punctuation">)</span>
<span class="token comment"># 生成供 C++ 代码调用的宏</span>
<span class="token keyword">target_compile_definitions</span><span class="token punctuation">(</span><span class="token punctuation">\${</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">}</span>
    <span class="token namespace">PRIVATE</span> -DPYTHON_HOME_PUTENV_STR=<span class="token string">&quot;PYTHONHOME=<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">Python_ROOT_DIR</span><span class="token punctuation">}</span></span>&quot;</span>
    <span class="token comment"># 用于调用 python 时, 引用的动态链接库文件夹</span>
    <span class="token namespace">PRIVATE</span> -DPYTHON_ADD_DLL_DIR=<span class="token string">&quot;<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">Python_ROOT_DIR</span><span class="token punctuation">}</span></span>/Library/bin&quot;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="错误排查" tabindex="-1"><a class="header-anchor" href="#错误排查" aria-hidden="true">#</a> 错误排查</h4><ol><li>模块安装失败时, 注意检查 Triplet 是否正确</li><li>复制模块提供的引用方法时, 注意将其中的目标 <code>main</code> 修改为项目的实际目标</li></ol><h2 id="实际应用示例" tabindex="-1"><a class="header-anchor" href="#实际应用示例" aria-hidden="true">#</a> 实际应用示例</h2><h3 id="基本模板" tabindex="-1"><a class="header-anchor" href="#基本模板" aria-hidden="true">#</a> 基本模板</h3><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.10</span><span class="token punctuation">)</span>
<span class="token function">PROJECT</span><span class="token punctuation">(</span>项目名 CXX<span class="token punctuation">)</span>

<span class="token comment"># 获取所有 .cpp 源文件</span>
<span class="token function">FILE</span><span class="token punctuation">(</span>GLOB SRC_FILES <span class="token string">&quot;<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">}</span></span>/src/*.cpp&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 创建目标</span>
<span class="token keyword">add_executable</span><span class="token punctuation">(</span>目标名 <span class="token punctuation">\${</span>SRC_FILES<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment"># 添加包含文件夹</span>
<span class="token keyword">target_include_directories</span><span class="token punctuation">(</span>目标名 <span class="token namespace">PRIVATE</span> <span class="token string">&quot;<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">}</span></span>/include&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="命令行" tabindex="-1"><a class="header-anchor" href="#命令行" aria-hidden="true">#</a> 命令行</h3><p>使用以下命令, 构建以 Ninja 为生成器, 采用 <code>x64-mingw-dynamic</code> 为 Triplet 的 Release 项目</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>cmake <span class="token parameter variable">-D</span> <span class="token assign-left variable">CMAKE_BUILD_TYPE</span><span class="token operator">=</span>Release <span class="token parameter variable">-D</span> CMAKE_TOOLCHAIN_FILE:STRING<span class="token operator">=</span><span class="token string">&quot;[vcpkg 路径]<span class="token entity" title="\\v">\\v</span>cpkg\\scripts<span class="token entity" title="\\b">\\b</span>uildsystems<span class="token entity" title="\\v">\\v</span>cpkg.cmake&quot;</span> <span class="token parameter variable">-D</span> <span class="token assign-left variable">VCPKG_TARGET_TRIPLET</span><span class="token operator">=</span>x64-mingw-dynamic  <span class="token parameter variable">-B</span> build <span class="token parameter variable">-G</span> <span class="token string">&quot;Ninja&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对生成的项目使用以下命令生成目标</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>cmake <span class="token parameter variable">--build</span> <span class="token string">&quot;build&quot;</span> <span class="token parameter variable">--target</span> <span class="token string">&quot;[项目名]&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="vscode" tabindex="-1"><a class="header-anchor" href="#vscode" aria-hidden="true">#</a> vscode</h3><h4 id="前置配置" tabindex="-1"><a class="header-anchor" href="#前置配置" aria-hidden="true">#</a> 前置配置</h4><ol><li>完成 <a href="#vcpkg-%E5%AE%89%E8%A3%85">vcpkg 安装</a>中要求的插件配置</li><li>设置插件的生成器为 Ninja (如果有安装)</li></ol><h4 id="项目基本配置-1" tabindex="-1"><a class="header-anchor" href="#项目基本配置-1" aria-hidden="true">#</a> 项目基本配置</h4><p>首先根据上述模板创建一个基本的 CMake 项目后, 选择侧边栏的 <code>CMake</code> 选项</p><p>在 <code>配置</code> 选项中选择使用的编译器与生成类型</p><p>每次保存 <code>CMakeLists.txt</code> 后将自动构建项目</p><h4 id="生成目标-1" tabindex="-1"><a class="header-anchor" href="#生成目标-1" aria-hidden="true">#</a> 生成目标</h4><p>安装插件后, 点击下方的三个按钮, 将分别完成目标生成, 目标调试与运行目标 (运行与调试的目标为 <code>CMake</code> 选项中的主目标)</p><p>通过打开项目大纲, 还可选择不同的目标进行生成, 如<a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%AE%E6%A0%87">自定义目标</a></p><h4 id="vcpkg-集成" tabindex="-1"><a class="header-anchor" href="#vcpkg-集成" aria-hidden="true">#</a> vcpkg 集成</h4><p>使用 mingw 时, 必须先构建一次项目, 然后再修改 <code>CMakeCache.txt</code> 中的 <code>VCPKG_TARGET_TRIPLET</code> 为 <code>x64-mingw-dynamic/static/dynamic</code></p><p>更推荐通过修改 CMake Tools 插件的 <code>configureSettings</code> 选项, 在工作区添加 <code>&quot;VCPKG_TARGET_TRIPLET&quot; : &quot;x64-mingw-dynamic&quot;</code> 实现</p><h3 id="visual-studio" tabindex="-1"><a class="header-anchor" href="#visual-studio" aria-hidden="true">#</a> visual studio</h3><h4 id="前置配置-1" tabindex="-1"><a class="header-anchor" href="#前置配置-1" aria-hidden="true">#</a> 前置配置</h4><ol><li>使用 Visual Studio Installer 至少安装 <code>使用 C++ 的桌面开发</code> 下的 <code>CMake 工具</code> 与 <code>vcpkg 包管理工具</code></li><li>运行命令 <code>vcpkg integrate install</code> 完成集成</li></ol><h4 id="打开-cmake-项目" tabindex="-1"><a class="header-anchor" href="#打开-cmake-项目" aria-hidden="true">#</a> 打开 cmake 项目</h4><p>首先根据上述模板创建一个基本的 CMake 项目后, 选择打开本地文件夹, 打开 <code>CMakeLists.txt</code> 所在的目录即可自动识别</p><p>打开项目后, 点击资源管理器下, 从左往右第四个按钮 <code>在解决方案和可用视图之间切换</code> 打开 CMake 视图<br> 需要回到原始视图也可通过点击此按钮实现</p><h4 id="设置-cmake-项目" tabindex="-1"><a class="header-anchor" href="#设置-cmake-项目" aria-hidden="true">#</a> 设置 cmake 项目</h4><p>选择 <code>项目 -&gt; XXX的 cmake 设置</code> 即可打开项目设置</p><p>常用的配置有</p><ul><li><p>设置 Cmake Build Type<br> 通过设置中的 <code>配置类型</code> 选项, 即可修改构建类型</p></li><li><p>设置构建器<br> 选择显示高级配置, 通过高级设置中的 <code>CMake 生成器</code> 选项, 即可修改构建器 (默认为 ninja)</p></li><li><p>新建配置<br> 建议通过克隆选定配置的方法新建配置</p></li></ul><h4 id="生成目标-2" tabindex="-1"><a class="header-anchor" href="#生成目标-2" aria-hidden="true">#</a> 生成目标</h4><p>在 <code>选择启动项</code> 按钮的下拉菜单中, 选择需要生成的目标<br> 需要构建或调试目标时, 点击该按钮即可</p><h4 id="vcpkg-集成-1" tabindex="-1"><a class="header-anchor" href="#vcpkg-集成-1" aria-hidden="true">#</a> vcpkg 集成</h4><p>使用 <kbd>Ctrl</kbd> + <kbd>\`</kbd> 快捷键可以打开终端<br> 在终端中使用相同的方法在 <code>CMakeLists.txt</code> 所在目录下创建 vcpkg 项目即可</p><p>修改 <code>vcpkg.json</code> 时, 可退出 CMake 视图</p><h3 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h3><h4 id="通用错误解决" tabindex="-1"><a class="header-anchor" href="#通用错误解决" aria-hidden="true">#</a> 通用错误解决</h4><p>对于一般错误, 可首先尝试以下方法解决</p><ol><li>删除 <code>build</code> 下的 <code>CMakeCache.txt</code> 文件, 并重新构建项目</li><li>如果构建失败, 可再尝试删除整个 <code>build</code> 文件夹, 并重新构建项目</li></ol><h4 id="生成-vs-项目" tabindex="-1"><a class="header-anchor" href="#生成-vs-项目" aria-hidden="true">#</a> 生成 vs 项目</h4><p>对于生成的 vs 项目, 如果需要分发到其他电脑上配置, 则可以删除项目中的伪目标 <code>BUILD ALL TARGET</code> 与 <code>ZERO CHECK</code>, 并正确配置主要目标</p>`,48);function le(se,re){const d=n("ExternalLinkIcon"),t=n("RouterLink");return l(),s("div",null,[u,e("p",null,[a("参考文章 "),e("a",h,[a("https://blog.csdn.net/jjjstephen/article/details/122415231"),c(d)])]),k,e("p",null,[a("参考文章 "),e("a",E,[a("https://www.jianshu.com/p/be1024b6b6ed"),c(d)])]),b,e("p",null,[a("参考文章 "),e("a",g,[a("https://blog.csdn.net/fengbingchun/article/details/127946047"),c(d)])]),_,e("p",null,[a("参考文章 "),e("a",m,[a("https://blog.csdn.net/qq_43495002/article/details/134000654"),c(d)])]),v,e("p",null,[a("对于 GCC 编译器, 详见"),e("a",A,[a("官方文档"),c(d)]),a(", 常用的编译选项如下")]),C,e("p",null,[a("对于 GCC 的链接器, 详见"),e("a",f,[a("官方文档"),c(d)]),a(", 常用的编译选项如下")]),x,e("p",null,[a("参考 "),e("a",R,[a("https://blog.csdn.net/lcmssd/article/details/64732528"),c(d)])]),T,e("ul",null,[B,e("li",null,[O,a(" 执行的 "),e("a",I,[a("CMake 命令"),c(d)]),a(" (与 bash 基本相同, 可直接运行可执行文件)"),M,a(" 对于命令中的参数直接用空格分割, 引号仅由于包裹参数"),L,a(" 多条命令通过 "),N,a(" 分隔"),D,a(" 例如命令 "),q,a(" 将在构建完成时输出 "),P])]),S,e("p",null,[a("参考文章 "),e("a",y,[a("https://blog.csdn.net/u014183456/article/details/124512715"),c(d)])]),V,e("p",null,[a("关于支持的所有生成器见 "),e("a",w,[a("https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html#manual:cmake-generators(7)"),c(d)])]),F,e("p",null,[a("其他操作见"),e("a",G,[a("官方文档"),c(d)])]),U,e("ol",null,[e("li",null,[a("另外推荐关闭 cmake tool 插件的自动配置功能, 防止频繁进行配置, 具体参考 "),e("a",X,[a("https://blog.csdn.net/qq_35914805/article/details/135532395"),c(d)])])]),e("p",null,[a("其他平台安装参考文档 "),e("a",$,[a("https://github.com/microsoft/vcpkg/blob/master/README_zh_CN.md"),c(d)])]),Y,e("p",null,[a("使用以下命令查看 Vcpkg 中提供的可用 triple"),H,K,j,a(" 对于需要自定义环境的情况如嵌入式, 可参考 "),c(t,{to:"/electronic/embedded/config/cmake.html"},{default:r(()=>[a("STM32 Vcpkg 配置")]),_:1})]),W,e("ol",null,[e("li",null,[a("仅在"),e("a",J,[a("此列表"),c(d)]),a("中的库需要按推荐的方式设置, 一般的库使用 "),Q,a(" 与 "),Z,a(" 即可")]),z]),ee,ae,e("ol",null,[e("li",null,[a("首先要定义变量 "),oe,a(", 变量值为要求的 python 环境中的解释器程序所在的根目录 (可通过在要求的 python 环境中执行 "),ce,a(" 具体确定 "),de,a(", 该变量的本质为辅助 CMake 找到 python, 其他寻找方法见"),e("a",ne,[a("官方文档"),c(d)]),a(")")]),te]),ie])}const he=i(p,[["render",le],["__file","cmake.html.vue"]]);export{he as default};
