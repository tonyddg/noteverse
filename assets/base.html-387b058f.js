import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,b as n,d as a,a as e,e as p}from"./app-8c5ce49e.js";const i={},d=p('<h1 id="c-学习笔记" tabindex="-1"><a class="header-anchor" href="#c-学习笔记" aria-hidden="true">#</a> C++ 学习笔记</h1><blockquote><p>主要参考书籍 <em><strong>C++PrimerPlus</strong></em></p></blockquote><h2 id="拾遗" tabindex="-1"><a class="header-anchor" href="#拾遗" aria-hidden="true">#</a> 拾遗</h2><h3 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h3><h4 id="特殊运算符" tabindex="-1"><a class="header-anchor" href="#特殊运算符" aria-hidden="true">#</a> 特殊运算符</h4><table><thead><tr><th>符号</th><th>功能</th><th>优先级</th><th>示例</th></tr></thead><tbody><tr><td><code>sizeof()</code></td><td>获取值所占用的 (栈) 空间, 单位为字节</td><td>与逻辑非, 正负号等一元运算符同为第二高优先级</td><td><code>sizeof((int)1)</code> = 4</td></tr><tr><td><code>A ? B : C</code> 条件运算符</td><td>表达式 A 为真时运行 B 否则运行 C, 表达式 B, C 的结果类型必须相同</td><td>优先级倒数第三 (低于 <code>&lt;&lt;</code>, 因此在 <code>cout</code> 中最好加括号)</td><td><code>1?2:3</code> = 2</td></tr><tr><td><code>A ,B</code> 逗号运算符</td><td>将多个表达式用逗号隔开, 总的结果为最后一个表达式的结果</td><td>优先级最低</td><td><code>1,2</code> = 2</td></tr><tr><td><code>a = B</code>, <code>+=</code>, <code>*= </code>, ... 等赋值运算符</td><td>返回被赋值变量的引用</td><td>优先级倒数第二</td><td><code>(a = 1) += 5</code> = 6 (&amp;a)</td></tr><tr><td><code>a++</code>, <code>++a</code> 自增运算符</td><td>均产生使 a 加一的副作用, 其中 <code>a++</code> 返回 <code>&amp;a</code>, 而 <code>++a</code> 返回值为 <code>a + 1</code> 的常量, 将 <code>+</code> 替换为 <code>-</code> 同理</td><td><code>a++</code> 为最高优先级, <code>++a</code> 为第二高优先级</td><td><code>a++ + a++</code> = a * 2 + 1, 注意同级别的表达式将会分别计算 (顺序不确定, 因此最好避免此类用法)</td></tr></tbody></table><h4 id="特殊知识" tabindex="-1"><a class="header-anchor" href="#特殊知识" aria-hidden="true">#</a> 特殊知识</h4>',7),r=n("ul",null,[n("li",null,[a("不同类型的变量运算之间存在隐式转换, 满足以下规则"),n("br"),n("code",null,"char,short -> int -> unsigned -> long -> double <- float"),n("br"),a(" 其中可由 "),n("code",null,"->"),a(" 的左到右转换, 无法反向隐式转换")]),n("li",null,[a("逻辑运算中存在短路求值, 即如果第一个表达式即可确定结果, 将不会运行第二个表达式, 当表达式存在副作用时注意 "),n("ul",null,[n("li",null,[n("code",null,"A || B"),a(" 中若A为真将不会计算B")]),n("li",null,[n("code",null,"A && B"),a(" 中若A为假将不会计算B")])])]),n("li",null,[a("求余运算遵循原则 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"a"),n("mi",{mathvariant:"normal"},"%"),n("mi",null,"b"),n("mo",null,"="),n("mi",null,"a"),n("mo",null,"−"),n("mo",{stretchy:"false"},"("),n("mi",null,"a"),n("mi",{mathvariant:"normal"},"/"),n("mi",null,"b"),n("mo",{stretchy:"false"},")"),n("mo",null,"∗"),n("mi",null,"b")]),n("annotation",{encoding:"application/x-tex"},"a \\% b = a - (a / b) * b")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8056em","vertical-align":"-0.0556em"}}),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mord"},"%"),n("span",{class:"mord mathnormal"},"b"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mord"},"/"),n("span",{class:"mord mathnormal"},"b"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"∗"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6944em"}}),n("span",{class:"mord mathnormal"},"b")])])]),n("br"),a(" 因此将得到一个与a同符号, 绝对值比a小的值, 求余运算结果符号与被除数 a 有关（可能为正负）")]),n("li",null,[a("对于 条件运算符 "),n("code",null,"?:"),a(", 赋值运算符 "),n("code",null,"="),a(" 与逗号运算符 "),n("code",null,","),a(", 其优先级均低于 "),n("code",null,"<<"),a(", 因此在 "),n("code",null,"cout"),a(" 等使用重载左移运算符的情况中, 最后通过括号 "),n("code",null,"()"),a(" 认为规定运算顺序防止出错")])],-1),u=p('<h3 id="标准输入输出" tabindex="-1"><a class="header-anchor" href="#标准输入输出" aria-hidden="true">#</a> 标准输入输出</h3><h4 id="cout-输出格式控制" tabindex="-1"><a class="header-anchor" href="#cout-输出格式控制" aria-hidden="true">#</a> cout 输出格式控制</h4><ul><li><code>cout.width()</code> 设置输出宽度，不会截断，只对下一次输出有效</li><li><code>cout.fill(char)</code> 设置填充字符，始终有效</li><li><code>cout.precision(int)</code> 设置小数精度，默认模式下为总位数</li><li><code>cout.setf(fmtflags)</code> 设置输出选项 <ul><li><code>ios_base::showpoint</code> 显示小数点, 精度仍然为总位数, 精度为2时输出20.87将显示20.</li><li><code>ios_base::boolalpha</code> 以true/false输出bool</li><li><code>ios_base::showbase</code> 显示进制</li><li><code>ios_base::uppercase</code> 大写显示十六进制</li><li><code>ios_base::showpos</code> 显示正数的+</li></ul></li><li><code>cout.setf(fmtflags, fmtflags)</code> 设置输出选项, 双参数并且第二个参数为类型选择, 第一个参数为具体设置 <ul><li><code>ios_base::basefield</code> 设置输出进制 <ul><li><code>ios_base::dec</code> 十进制</li><li><code>ios_base::oct</code> 八进制</li><li><code>ios_base::hex</code> 十六进制</li></ul></li><li><code>ios_base::floatfield</code> 设置输出表示方法 <ul><li><code>ios_base::fixed</code> 定点计数法</li><li><code>ios_base::scientific</code> 科学计数法</li></ul></li><li><code>ios_base::adjustfield</code> 设置对齐方式 <ul><li><code>ios_base::left</code> 左对齐</li><li><code>ios_base::right</code> 右对齐</li><li><code>ios_base::internal</code> 符号左对齐数字右对齐</li></ul></li></ul></li></ul><h4 id="cin-读取控制" tabindex="-1"><a class="header-anchor" href="#cin-读取控制" aria-hidden="true">#</a> cin 读取控制</h4><ul><li><code>get(char&amp;)</code> 读一个字符(get独有)</li><li><code>read(char*, int)</code> 不会再结尾补充 <code>\\0</code> 且不会在 <code>\\n</code> 处停下</li><li><code>get(char*, int)</code> 会补充 <code>\\0</code> 且会在 <code>\\n</code> 处停下 读取二进制文件时要加上 <code>ios::binary</code> ,当读取字节超过文件字节时才不会出错</li></ul><h3 id="可变参数" tabindex="-1"><a class="header-anchor" href="#可变参数" aria-hidden="true">#</a> 可变参数</h3><p>使用可变参数实现传入任意长度的参数</p>',7),k={href:"https://www.runoob.com/cprogramming/c-variable-arguments.html",target:"_blank",rel:"noopener noreferrer"},m=n("li",null,"通过 vsprintf 函数, 实现通过可变参数, 对 sprintf 再封装 eg.",-1),h=p(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>va_list p<span class="token punctuation">;</span>
<span class="token function">va_start</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> format<span class="token punctuation">)</span><span class="token punctuation">;</span>
_offset <span class="token operator">+=</span> <span class="token function">vsprintf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_buf <span class="token operator">+</span> _offset<span class="token punctuation">)</span><span class="token punctuation">,</span> format<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">va_end</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组合变量类型" tabindex="-1"><a class="header-anchor" href="#组合变量类型" aria-hidden="true">#</a> 组合变量类型</h3><h4 id="常量指针" tabindex="-1"><a class="header-anchor" href="#常量指针" aria-hidden="true">#</a> 常量指针</h4><p><code>const char*</code> / <code>char const*</code> (等价)<br> 表明指针指向一个常量, 因此指针所指向的值不能更改, 但指针变量储存的地址可以改变(<mark>也可进行 <code>+</code> 等操作</mark>)</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token string">&quot;ABC&quot;</span><span class="token punctuation">;</span>
p <span class="token operator">=</span> <span class="token string">&quot;CDF&quot;</span><span class="token punctuation">;</span><span class="token comment">//正确</span>
p<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//正确</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="指针常量" tabindex="-1"><a class="header-anchor" href="#指针常量" aria-hidden="true">#</a> 指针常量</h4><p><code>char *const</code> 指针为一个常量, 即指针变量储存的地址不能改变</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token string">&quot;ABC&quot;</span><span class="token punctuation">;</span><span class="token comment">//不正确, 不能将const char*赋给char*</span>
<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;ABC&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> p <span class="token operator">=</span> str<span class="token punctuation">;</span><span class="token comment">//正确</span>
p<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//不正确</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="常量指针常量" tabindex="-1"><a class="header-anchor" href="#常量指针常量" aria-hidden="true">#</a> 常量指针常量</h5><p>两种类型的组合, 即 <code>const char* const</code></p><h4 id="常量引用" tabindex="-1"><a class="header-anchor" href="#常量引用" aria-hidden="true">#</a> 常量引用</h4><p><code>const int&amp;</code> 引用关系一旦建立后无法修改, 因此不存在引用常量<br> 常量引用表示对于常量的引用, 无法修改引用指向的值</p><h5 id="常量常量指针引用" tabindex="-1"><a class="header-anchor" href="#常量常量指针引用" aria-hidden="true">#</a> 常量常量指针引用</h5><ul><li>由于 <code>const char*</code> 表示常量指针, 与一般的常量 <code>const int</code> 结构相同, 含义不同</li><li>因此 <code>char*&amp;</code> 表示 <code>char*</code> 指针的引用, 但 <code>const char*&amp;</code> 不具有 <code>const int</code> 相类似的含义(即 <code>char*</code> 储存的地址不能修改), 而是表示对常量指针 <code>const char*</code> 的引用, 类型 <code>const char*</code> 储存的地址可以更改</li><li>要达到相同的效果 (同一类型) 需要使用 <code>char const*&amp;</code></li></ul><h3 id="定义宏" tabindex="-1"><a class="header-anchor" href="#定义宏" aria-hidden="true">#</a> 定义宏</h3><p>通过 <code>#define [名称] [表达式]</code> 或 <code>#define [名称]([参数, ...]) [表达式]</code> 创建宏<br> 在使用宏的时候, 为了避免由运算顺序导致的错误, 最好对宏中的各个要素加上 <code>()</code></p><h4 id="调试宏" tabindex="-1"><a class="header-anchor" href="#调试宏" aria-hidden="true">#</a> 调试宏</h4><ul><li><code>__DATE__</code> 编译日期</li><li><code>__TIME__</code> 编译时间</li><li><code>__FILE__</code> 所在文件名</li><li><code>__LINE__</code> 代码所在行号</li></ul><h4 id="宏运算符" tabindex="-1"><a class="header-anchor" href="#宏运算符" aria-hidden="true">#</a> 宏运算符</h4>`,19),v=n("li",null,[n("code",null,"\\"),a(" 表示宏定义的延续, 用于宏定义的行末")],-1),b=n("li",null,[n("code",null,"#"),a(' 可将参数直接转化为字符串常量 (不是读取值), 并且能与周围的 " 合并')],-1),g=n("li",null,[n("code",null,"##"),a(" 将参数直接与相连的表达式连接")],-1),y={href:"https://www.runoob.com/cprogramming/c-preprocessors.html",target:"_blank",rel:"noopener noreferrer"},f=p(`<h3 id="杂项知识" tabindex="-1"><a class="header-anchor" href="#杂项知识" aria-hidden="true">#</a> 杂项知识</h3><h4 id="输入输出流" tabindex="-1"><a class="header-anchor" href="#输入输出流" aria-hidden="true">#</a> 输入输出流</h4><p><code>stdout</code>, <code>stdin</code>, <code>stderr</code> 分别表示是标准输出，标准输入和标准错误, 并对应 <code>cout</code>, <code>cin</code>, <code>cerr</code><br><code>stdout</code> 是行缓冲的(换行时缓冲), <code>stderr</code> 是无缓冲的.<br> 以此对于以下代码</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span><span class="token string">&quot;Hello &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span><span class="token string">&quot;World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),w=n("br",null,null,-1),x={href:"https://blog.csdn.net/mycwq/article/details/46554805",target:"_blank",rel:"noopener noreferrer"},_=p('<h4 id="程序控制" tabindex="-1"><a class="header-anchor" href="#程序控制" aria-hidden="true">#</a> 程序控制</h4><ul><li><code>switch</code> 语句 <ul><li><code>switch(A)</code> 中, 表达式 <code>A</code> 的结果可以是整数 <code>int</code>, 字符 <code>char</code> 或枚举类型, 不可以是浮点 <code>float</code> 或 <code>long</code></li><li>要求 <code>case B:</code> 中的表达式 <code>B</code> 与 <code>A</code> 的结果类型相同</li><li>如果 <code>case</code> 中没有 <code>break</code>, 将会向下运行, 直到遇到第一个 <code>break</code></li></ul></li><li><code>for</code> 语句 <ul><li>对于语句 <code>for(A;B;C)</code> 会先运行 <code>A</code>, 然后运行 <code>B</code> 对其结果进行判断, 在一个循环结束后运行 <code>C</code>, 并重新判断 <code>B</code> 开始新的循环</li><li>可使用 <code>for(type n : array)</code> 用于简化循环 (要求标准为 C++11 以上)</li></ul></li></ul><h4 id="格式化字符串" tabindex="-1"><a class="header-anchor" href="#格式化字符串" aria-hidden="true">#</a> 格式化字符串</h4><h5 id="输出格式化字符串" tabindex="-1"><a class="header-anchor" href="#输出格式化字符串" aria-hidden="true">#</a> 输出格式化字符串</h5><ul><li>格式化符号的通用格式为 <code>%(标志)(输出最小宽度)(.精度)[格式字符]</code></li><li>对于字符串类型则为 <code>%(.字符串长度)s</code><ul><li>标志常用有 <code>-</code>, 结果左对齐; <code>+</code> 正数结果带 + 号</li><li>输出最小宽度为任意位数字, 最小宽度包含符号</li><li>精度通过 <code>.[精度]</code> 表示, 对于数字将会对最最小位四舍五入, 或补 0</li><li>常用符号有 <code>f</code> 浮点数, <code>d</code> 有符号整数, <code>u</code> 无符号整数, <code>X</code> 十六进制, <code>e</code> 科学计数法表示浮点数, <code>p</code> 指针 (十六进制表示)</li></ul></li></ul><h5 id="其他参考" tabindex="-1"><a class="header-anchor" href="#其他参考" aria-hidden="true">#</a> 其他参考</h5>',6),T={href:"https://blog.csdn.net/weixin_45525272/article/details/120820628",target:"_blank",rel:"noopener noreferrer"},A={href:"https://learn.microsoft.com/zh-cn/cpp/c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l?view=msvc-170",target:"_blank",rel:"noopener noreferrer"},q={href:"https://learn.microsoft.com/zh-cn/cpp/c-runtime-library/reference/vsprintf-vsprintf-l-vswprintf-vswprintf-l-vswprintf-l?view=msvc-170",target:"_blank",rel:"noopener noreferrer"},B=p(`<h2 id="第九章" tabindex="-1"><a class="header-anchor" href="#第九章" aria-hidden="true">#</a> 第九章</h2><h3 id="头文件-p247" tabindex="-1"><a class="header-anchor" href="#头文件-p247" aria-hidden="true">#</a> 头文件 P247</h3><h4 id="头文件包含的内容" tabindex="-1"><a class="header-anchor" href="#头文件包含的内容" aria-hidden="true">#</a> 头文件包含的内容</h4><ol><li>函数原型</li><li><code>#define</code> 与 <code>const</code> 定义的常量</li><li>结构, 类, 模板声明</li><li>内联函数</li></ol><h4 id="include" tabindex="-1"><a class="header-anchor" href="#include" aria-hidden="true">#</a> include</h4><ol><li>包含头文件使用双引号</li><li>头文件中使用 <code>#ifndef</code> (注意中间的n) <code>#define</code> 来避免多次包含同一个头文件 <mark>不能忽视, 特别是hpp文件中</mark></li></ol><h3 id="变量作用域-p250" tabindex="-1"><a class="header-anchor" href="#变量作用域-p250" aria-hidden="true">#</a> 变量作用域 P250</h3><h4 id="自动存储持续性" tabindex="-1"><a class="header-anchor" href="#自动存储持续性" aria-hidden="true">#</a> 自动存储持续性</h4><ul><li>默认情况</li><li>代码块中声明的变量将在代码块结束后释放</li><li>同名时, 局部变量将隐藏外部变量</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>

		cout <span class="token operator">&lt;&lt;</span><span class="token string">&quot;In Block&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span><span class="token string">&quot;a: &quot;</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
		cout <span class="token operator">&lt;&lt;</span><span class="token string">&quot;b: &quot;</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
		cout <span class="token operator">&lt;&lt;</span><span class="token string">&quot;c: &quot;</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	cout <span class="token operator">&lt;&lt;</span><span class="token string">&quot;Out of Block&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	cout <span class="token operator">&lt;&lt;</span><span class="token string">&quot;a: &quot;</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	cout <span class="token operator">&lt;&lt;</span><span class="token string">&quot;b: &quot;</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	<span class="token comment">// cout &lt;&lt;&quot;c: &quot; &lt;&lt; c &lt;&lt; endl;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="静态变量" tabindex="-1"><a class="header-anchor" href="#静态变量" aria-hidden="true">#</a> 静态变量</h4><ol><li>在代码块外定义(外部链接性) 能够被所有代码访问(跨CPP)</li><li>在代码块外定义 加上 <code>static</code> 关键字(内部链接性) 只能在定义该变量的文件中使用 3, 在函数内定义 加上 <code>static</code> 关键字(无连接性) 只能在定义该变量的代码块中使用</li></ol><h5 id="跨文件说明" tabindex="-1"><a class="header-anchor" href="#跨文件说明" aria-hidden="true">#</a> 跨文件说明</h5><p>在编译时, 各个头文件的内容会被扩展到源文件内, 此处跨文件指多个同时编译的源文件</p><h4 id="静态变量初始化" tabindex="-1"><a class="header-anchor" href="#静态变量初始化" aria-hidden="true">#</a> 静态变量初始化</h4><p>默认为 0</p><h4 id="引用声明-p255" tabindex="-1"><a class="header-anchor" href="#引用声明-p255" aria-hidden="true">#</a> 引用声明 P255</h4><p>引用来自其他源文件的全局变量时, 需要使用 <code>extern [变量定义]</code>, 或者使用 <code>::[全局变量]</code> 表示使用全局版本的变量</p><h5 id="extern-的说明" tabindex="-1"><a class="header-anchor" href="#extern-的说明" aria-hidden="true">#</a> extern 的说明</h5><ul><li>通常情况下, 定义一个变量将会为其分配空间</li><li>加上extern关键字后, 不会分配空间, 仅表明有此变量, 称为声明定义, 简称声明</li><li>对于函数, 函数定义中必有函数体, 因此不需要extern关键字说明函数是定义函数声明</li><li>声明可以多次, 定义只能有一次</li></ul><h5 id="不使用-extern-的后果" tabindex="-1"><a class="header-anchor" href="#不使用-extern-的后果" aria-hidden="true">#</a> 不使用 extern 的后果</h5><ol><li>直接使用其他文件的全局变量 由于变量未声明直接使用, 将出错</li><li>不使用 <code>extern</code> 编译器认为要定义一个新的全局变量, 由于变量名重复, 将出错</li></ol><h4 id="隐藏外部全局变量-p258" tabindex="-1"><a class="header-anchor" href="#隐藏外部全局变量-p258" aria-hidden="true">#</a> 隐藏外部全局变量 P258</h4><p>不使用外部的全局变量时, 可以用 <code>static</code> 声明作用域更小的全局变量<br> 此时将优先使用作用域更小的全局变量 (隐藏其他源文件的全局变量, 防止变量重复)</p><h4 id="无连接性的静态变量" tabindex="-1"><a class="header-anchor" href="#无连接性的静态变量" aria-hidden="true">#</a> 无连接性的静态变量</h4><p>在程序启动时进行一次初始化, 之后保持不变</p><h4 id="其他说明符-限定符-p260" tabindex="-1"><a class="header-anchor" href="#其他说明符-限定符-p260" aria-hidden="true">#</a> 其他说明符/限定符 P260</h4><p>同一个声明不能使用多个说明符(<code>thread_local</code> 除外)</p><ol><li><code>volatile</code> 表明内存单元没有程序修改也可能发生改变<br> 用于指向硬件位置的指针</li><li><code>mutable</code> 指出类变量为 <code>const</code> 时, 有 <code>mutable</code> 的成员依然可变 (可用于类中记录调用次数的成员等)</li></ol><h4 id="const-说明符" tabindex="-1"><a class="header-anchor" href="#const-说明符" aria-hidden="true">#</a> const 说明符</h4><p>全局 <code>const</code> 的连接性为内部(同 <code>static</code>)</p><h5 id="使用内部链接的意义" tabindex="-1"><a class="header-anchor" href="#使用内部链接的意义" aria-hidden="true">#</a> 使用内部链接的意义</h5><ul><li>由于头文件的内容会被扩展到源文件内, 在头文件中定义全局变量必然导致变量名冲突, 使用 <code>static</code> 则可以避免冲突</li><li><code>const</code> 的连接性为内部保证 <code>const</code> 可以定义在头文件中</li></ul><h4 id="函数的连接性" tabindex="-1"><a class="header-anchor" href="#函数的连接性" aria-hidden="true">#</a> 函数的连接性</h4><p>默认情况下函数为外部链接性</p><ol><li>这意味着两个源文件中, 不能有同名函数</li><li>可以使用 <code>extern</code> 访问其他源文件中的函数 (<code>extern</code> 可省略, 没有函数体的函数即声明)</li><li>可以使用 <code>static</code> 使函数的连接性为内部</li></ol><h5 id="内联函数" tabindex="-1"><a class="header-anchor" href="#内联函数" aria-hidden="true">#</a> 内联函数</h5><p>内联函数不受此规则限制, 这表明内联函数可以定义在头文件内</p><h3 id="动态存储变量-p262" tabindex="-1"><a class="header-anchor" href="#动态存储变量-p262" aria-hidden="true">#</a> 动态存储变量 P262</h3><h4 id="new初始化" tabindex="-1"><a class="header-anchor" href="#new初始化" aria-hidden="true">#</a> new初始化</h4><ol><li>构造函数 <code>int *p = new int (6);</code></li><li>初始化结构/数组 <code>int *p = new int [4] {1, 2, 3, 4};</code></li></ol><h4 id="定位new运算符" tabindex="-1"><a class="header-anchor" href="#定位new运算符" aria-hidden="true">#</a> 定位new运算符</h4><p>在 <code>#include&lt;new&gt;</code> 后, 可以指定 <code>new</code> 的位置<br> eg.</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;new&gt;</span></span>
<span class="token keyword">int</span> buffer<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时将从 <code>buffer</code> 中分配空间给 <code>p</code>, 由于空间为静态, 不需要 <code>delete</code></p><h4 id="delete" tabindex="-1"><a class="header-anchor" href="#delete" aria-hidden="true">#</a> delete</h4><ol><li>使用 <code>new</code> 初始化的指针必须使用 <code>delete</code> 释放空间</li><li>使用 <code>new[]</code> 初始化的指针必须使用 <code>delete[]</code> 释放空间</li></ol><h3 id="名称空间-p266" tabindex="-1"><a class="header-anchor" href="#名称空间-p266" aria-hidden="true">#</a> 名称空间 P266</h3><h4 id="名称空间中的定义与声明" tabindex="-1"><a class="header-anchor" href="#名称空间中的定义与声明" aria-hidden="true">#</a> 名称空间中的定义与声明</h4><p>使用 <code>namespace [名称空间] {}</code> 表示内部的代码使用指定的名称空间 由于名称空间不能在代码块中, 因此名称空间中的变量通常为外连接性 允许多个使用相同名称空间的 <code>namespace</code> 存在<br> eg</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">namespace</span> test
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">namespace</span> test
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="全局名称空间" tabindex="-1"><a class="header-anchor" href="#全局名称空间" aria-hidden="true">#</a> 全局名称空间</h4><p>一般的全局变量在全局名称空间中 因此除了使用 <code>extern</code> 声明全局变量, 也可以使用 <code>::[全局变量]</code>, 直接访问全局变量</p><h4 id="using声明" tabindex="-1"><a class="header-anchor" href="#using声明" aria-hidden="true">#</a> using声明</h4><ul><li>语法 <code>using [带有名称空间的变量/函数]</code></li><li>作用 把声明的变量加入全局/局部(代码块)区域中 eg</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">namespace</span> test
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">using</span> test<span class="token double-colon punctuation">::</span>a<span class="token punctuation">;</span> <span class="token comment">// 将a导入局部区域(不是全局)</span>
	<span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token comment">// 由于a已在局部区域存在, 将出错</span>
	<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="using编译指令" tabindex="-1"><a class="header-anchor" href="#using编译指令" aria-hidden="true">#</a> using编译指令</h4><ul><li>语法 <code>using namespace [名称空间]</code></li><li>将指定的名称空间包含到全局名称空间中</li><li>与 <code>using</code> 声明的区别: 由于只是包含名称空间, 名称空间中的变量连接性不变 eg</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">namespace</span> test
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">using</span> <span class="token keyword">namespace</span> test<span class="token punctuation">;</span> <span class="token comment">// 将a导入全局区域(不是全局)</span>
	<span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token comment">// test::a被局部的a覆盖, 不会出错</span>
	<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="名称空间其他特性" tabindex="-1"><a class="header-anchor" href="#名称空间其他特性" aria-hidden="true">#</a> 名称空间其他特性</h4><ul><li>可以对名称空间嵌套</li><li>可以在名称空间中使用 <code>using</code><br> eg</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">namespace</span> a
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">namespace</span> b
<span class="token punctuation">{</span>
	<span class="token keyword">using</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时 <code>a::i</code> 与 <code>b::i</code> 等价</p><ul><li>可以使用 <code>namespace a = b</code> 给命名空间起别名</li><li>匿名命名空间 通过省略命名空间名称创造隐藏命名空间<br> 此时会将此命名空间添加到当前文件的全局空间中, 但在其他文件无法访问<br> 相当于 <code>static</code> 的内部链接性</li><li>老式标准库头文件(如 <code>iostream.h</code>)没有名称空间</li></ul><h2 id="第十章-p279" tabindex="-1"><a class="header-anchor" href="#第十章-p279" aria-hidden="true">#</a> 第十章 P279</h2><h3 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h3><h4 id="class与struct" tabindex="-1"><a class="header-anchor" href="#class与struct" aria-hidden="true">#</a> class与struct</h4><ul><li><code>class</code> 中默认访问控制为 <code>private</code></li><li><code>struct</code> 中默认访问控制为 <code>public</code></li></ul><h4 id="内联方法" tabindex="-1"><a class="header-anchor" href="#内联方法" aria-hidden="true">#</a> 内联方法</h4><p>除了 inline, 在函数声明内定义的成员函数默认为内联函数</p><h4 id="构造函数中防止参数冲突" tabindex="-1"><a class="header-anchor" href="#构造函数中防止参数冲突" aria-hidden="true">#</a> 构造函数中防止参数冲突</h4><p>构造函数的参数不能与类的成员变量相同, 可以使用在成员变量前加上 <code>m_</code> 前缀或 <code>_</code> 后缀, 区分成员变量</p><h4 id="使用构造函数" tabindex="-1"><a class="header-anchor" href="#使用构造函数" aria-hidden="true">#</a> 使用构造函数</h4><ul><li><code>[class] a = [class](参数);</code></li><li><code>[class] a(参数);</code></li><li><code>[class] a* = new [class](参数);</code></li></ul><h4 id="构析函数" tabindex="-1"><a class="header-anchor" href="#构析函数" aria-hidden="true">#</a> 构析函数</h4><ol><li><mark>如果类使用了 <code>new</code>, 则必须定义对应的构析函数</mark></li><li>构析函数没有参数</li></ol><h4 id="局部构析函数的调用" tabindex="-1"><a class="header-anchor" href="#局部构析函数的调用" aria-hidden="true">#</a> 局部构析函数的调用</h4><p>构析函数将在代码块结束后调用</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">a</span>
<span class="token punctuation">{</span>
	string name_<span class="token punctuation">;</span>
	<span class="token function">a</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		name_<span class="token operator">=</span>name<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token operator">~</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		cout <span class="token operator">&lt;&lt;</span> name_ <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	a <span class="token function">t1</span><span class="token punctuation">(</span><span class="token string">&quot;t1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">{</span>
		a <span class="token function">t2</span><span class="token punctuation">(</span><span class="token string">&quot;t2&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>窗口环境中, 将输出 t2 , 因为 t1 的构析函数在窗口关闭后调用</p><h4 id="列表初始化" tabindex="-1"><a class="header-anchor" href="#列表初始化" aria-hidden="true">#</a> 列表初始化</h4><ul><li><code>[class] a = {参数};</code></li><li><code>[class] a{参数};</code></li></ul><h4 id="const成员函数" tabindex="-1"><a class="header-anchor" href="#const成员函数" aria-hidden="true">#</a> const成员函数</h4><p>在成员函数的定义与声明后加上关键字 <code>const</code>, 可以保证 <code>const</code> 修饰的类变量可以调用此类成员函数 只要函数不修改成员, 尽量使用 const 成员函数</p><h4 id="this指针" tabindex="-1"><a class="header-anchor" href="#this指针" aria-hidden="true">#</a> this指针</h4><p>当需要获取类本身时, 可以使用 <code>this</code> 或 <code>(*this)</code></p><h4 id="类数组" tabindex="-1"><a class="header-anchor" href="#类数组" aria-hidden="true">#</a> 类数组</h4><ul><li>类有默认/无参数的构造函数 同一般数组的定义</li><li>类没有默认/无参数的构造函数, 必须为每个元素调用构造函数</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token punctuation">[</span><span class="token keyword">class</span><span class="token punctuation">]</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token punctuation">[</span><span class="token keyword">class</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>参数<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>允许各个元素调用不同的构造函数</p><h4 id="类作用域" tabindex="-1"><a class="header-anchor" href="#类作用域" aria-hidden="true">#</a> 类作用域</h4><p>在类中定义的成员函数/变量, 均在类作用域中, 需要通过 <code>::</code> 访问</p><h4 id="类中的常量" tabindex="-1"><a class="header-anchor" href="#类中的常量" aria-hidden="true">#</a> 类中的常量</h4><p>不能在类声明中定义值(类声明不使用空间), 因此不能再类中直接使用const成员 可以使用static const定义类中的常量</p><h4 id="类作用域中的枚举" tabindex="-1"><a class="header-anchor" href="#类作用域中的枚举" aria-hidden="true">#</a> 类作用域中的枚举</h4><p>通常情况下的枚举</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">enum</span> <span class="token class-name">a</span><span class="token punctuation">{</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> s3<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">enum</span> <span class="token class-name">b</span><span class="token punctuation">{</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> s3<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>两种枚举类型的枚举量冲突(同一个域中不能有两个相同的枚举量) 在类作用域中的枚举</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">a</span><span class="token punctuation">{</span>s1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> s2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> s3 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">b</span><span class="token punctuation">{</span>s1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> s2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> s3 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">c</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token keyword">enum</span> <span class="token class-name">pub_sign</span><span class="token punctuation">{</span>s1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> s2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> s3 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//可以作为一种实现类常量/标识的方法</span>
	<span class="token keyword">enum</span> <span class="token punctuation">{</span>s7 <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span> s8 <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span> s1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//匿名枚举量, 此处s1=1错误, 枚举量重复</span>
<span class="token keyword">private</span><span class="token operator">:</span>
	<span class="token keyword">enum</span> <span class="token class-name">pri_sign</span><span class="token punctuation">{</span>s4 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> s5 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> s6 <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//外部不可使用这些枚举量</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>将不会发生冲突/不会自动转换为int</li><li>使用枚举量时需要加上类名与作用域运算符</li><li>定义枚举类型时使用枚举量的名称 <code>a i = a::s1;</code></li><li>定义在类中的枚举类型 <code>c::pub_sign i = c::s1</code> (枚举量);</li></ul><h2 id="第十一章" tabindex="-1"><a class="header-anchor" href="#第十一章" aria-hidden="true">#</a> 第十一章</h2><h3 id="重载运算符" tabindex="-1"><a class="header-anchor" href="#重载运算符" aria-hidden="true">#</a> 重载运算符</h3><ol><li><code>[返回值] operator[运算符](参数)</code> 注:运算符为类型名时为类型转换重载</li><li>重载运算符中必须有自定义的类型</li><li>不是所有运算符都可以重载</li><li><code>()</code>, <code>[]</code>, <code>-&gt;</code>, <code>=</code> 只能作为成员函数重载</li><li>重载运算符有多个值时, 参数位置不同, 对应的函数不同<br> eg. 已经定义 <code>A</code>, <code>A::operator+(int)</code>, 即 <code>A+int</code>, 但 <code>int+A</code> 未定义, 将会出错<br> 如果要反转操作数顺序, 可以定义友元函数或 <code>A operator+(int i, A j){return j+i}</code></li></ol><h4 id="友元函数" tabindex="-1"><a class="header-anchor" href="#友元函数" aria-hidden="true">#</a> 友元函数</h4><p>在类定义中声明, 加上前缀 <code>friend</code>, 则具有此名的函数可以访问类的 <code>private</code> 成员</p><h4 id="重载ostream的-运算符" tabindex="-1"><a class="header-anchor" href="#重载ostream的-运算符" aria-hidden="true">#</a> 重载ostream的 &lt;&lt; 运算符</h4><ol><li>将 <code>ostream</code> 作为第一个参数, 使用非成员函数定义</li><li>要返回 <code>&amp;ostream</code> (使 <code>cout&lt;&lt;a&lt;&lt;b</code> 可以连续)</li></ol><h3 id="类的类型转换" tabindex="-1"><a class="header-anchor" href="#类的类型转换" aria-hidden="true">#</a> 类的类型转换</h3><h4 id="隐式类型转换" tabindex="-1"><a class="header-anchor" href="#隐式类型转换" aria-hidden="true">#</a> 隐式类型转换</h4><ul><li>当类有当值的构造函数时, 将作为隐式转换的函数<br> eg</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//假设A有无参数与参数为int的构造函数</span>
A a<span class="token punctuation">;</span><span class="token comment">//使用无参数的构造函数</span>
a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//使用10参数为int的构造函数建立临时变量, 再复制给a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可在构造函数前使用 <code>explicit</code> 关闭此特性</p><ul><li>隐式转换的情况(需要类A, 但提供可转换的其他类型) <ol><li>初始化类</li><li>赋值</li><li>传参</li><li>返回值</li></ol></li><li>如果只定义了 <code>A(double)</code> 使用 <code>A=100;</code> 时, 会先隐式转换100为double</li></ul><h4 id="转换函数" tabindex="-1"><a class="header-anchor" href="#转换函数" aria-hidden="true">#</a> 转换函数</h4><p><code>operator [目标转换类型]()</code></p><ol><li>必须是类方法</li><li>不能指定返回类型(即目标类型)</li><li>不能有参数</li><li>当定义了多个转换函数时, 且有多种转换可能, 将会出错<br> eg. 如果 <code>A</code> 定义了 <code>operator int()</code> 与 <code>operator double()</code>, <code>A a; cout &lt;&lt; a;</code>将出错, <code>long b = a</code>;也将出错(double与int均可赋给long)</li><li>通过在声明中添加关键字 <code>explicit</code>, 可以禁止隐式转换</li></ol><h4 id="类型转换与运算符重载" tabindex="-1"><a class="header-anchor" href="#类型转换与运算符重载" aria-hidden="true">#</a> 类型转换与运算符重载</h4><p>重载类A的加法有两种方式</p><ol><li><code>A A::operator+(const A &amp;b) const;</code></li><li><code>friend A operator+(const A &amp;a, const A &amp;b);</code></li></ol><p>现在要实现 <code>A</code> 与 <code>double</code> 的加法, 且可交换次序</p><ul><li>当 <code>A</code> 不存在转换为 <code>double</code> 的方法时, 可以定义</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>A A<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
<span class="token keyword">friend</span> A A<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">double</span> b<span class="token punctuation">,</span> <span class="token keyword">const</span> A <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>a <span class="token operator">+</span> b<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当 <code>A</code> 存在转换为 <code>double</code> 的方法时</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>A<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
<span class="token keyword">friend</span> A <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> A <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> A <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当参数为double时, 编译器将自动转换, 达到相同的效果</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第十二章" tabindex="-1"><a class="header-anchor" href="#第十二章" aria-hidden="true">#</a> 第十二章</h2><h3 id="复制构造函数" tabindex="-1"><a class="header-anchor" href="#复制构造函数" aria-hidden="true">#</a> 复制构造函数</h3><p>以指向对象的常量引用为参数的构造函数为复制构造函数 在没有定义时, 将使用默认的复制构造函数</p><h4 id="调用复制构造函数" tabindex="-1"><a class="header-anchor" href="#调用复制构造函数" aria-hidden="true">#</a> 调用复制构造函数</h4><ol><li>类之间赋值</li><li>使用其他类变量初始化类(包括 <code>new</code>)</li><li>函数按值传参与返回对象</li></ol><h4 id="默认的复制构造函数" tabindex="-1"><a class="header-anchor" href="#默认的复制构造函数" aria-hidden="true">#</a> 默认的复制构造函数</h4><ul><li>默认构造函数将逐个赋值成员, 当成员中有指针指向动态内存时, 将直接复制指针(浅拷贝)</li><li>当类作为零时变量时, 当退出程序块时将调用构析函数, 此时极可能提前释放动态内存</li></ul><h4 id="默认的赋值运算符" tabindex="-1"><a class="header-anchor" href="#默认的赋值运算符" aria-hidden="true">#</a> 默认的赋值运算符</h4><ul><li>默认赋值运算符 <code>A&amp; A::operator=(const A&amp;)</code>(与默认复制构造函数不同)</li><li>赋值运算符通常用在两个已经定义的类变量, 让后将其中一个赋给另一个</li><li>同样是浅拷贝, 将导致与默认复制构造函数相同的问题</li><li>与浅拷贝的不同 <ul><li>需要返回引用(通常即赋值被赋值变量的引用*this)</li><li>通常被赋值后, 被赋值变量的值将被舍弃, 需要delete, 不能直接覆盖</li><li>在使用2后, 应避免将自身赋值给自身, 因为赋值前自身的值已被删除(可在赋值时建立临时变量解决)</li><li>自我赋值的处理</li></ul></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//自我赋值处理</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> <span class="token operator">&amp;</span>animal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="类使用动态内存时注意" tabindex="-1"><a class="header-anchor" href="#类使用动态内存时注意" aria-hidden="true">#</a> 类使用动态内存时注意</h4><ol><li>当类使用动态内存时, 必须定义一个显式复制构造函数, 为新类分配新空间并复制动态内存的内容(深拷贝)</li><li>统一使用 <code>new</code> / <code>delete</code> 与 <code>new[]</code> / <code>delete[]</code> 由于只有一个构析函数, 一般只能用一种 <code>delete</code>, 因此最好也只是用一种 <code>new</code>, 保证配对</li><li>默认构造函数中, 指针一定要置空(<code>NULL</code> 与 <code>nullptr</code> 均可), 保证正常 <code>delete</code></li><li>当类使用动态内存时, 必须显式重载 <code>=</code></li></ol><h4 id="静态成员函数" tabindex="-1"><a class="header-anchor" href="#静态成员函数" aria-hidden="true">#</a> 静态成员函数</h4><ol><li>静态成员函数不能使用类变量调用</li><li>不能使用 <code>this</code></li><li>只能访问静态成员</li></ol><h3 id="返回值设计" tabindex="-1"><a class="header-anchor" href="#返回值设计" aria-hidden="true">#</a> 返回值设计</h3><h4 id="const-引用" tabindex="-1"><a class="header-anchor" href="#const-引用" aria-hidden="true">#</a> const 引用</h4><ol><li>效率最高</li><li>不能返回函数内的局部变量的引用</li></ol><h4 id="引用" tabindex="-1"><a class="header-anchor" href="#引用" aria-hidden="true">#</a> 引用</h4><ol><li><code>&lt;&lt;</code> 与 <code>&gt;&gt;</code>, 配合 <code>cout</code> 等, 使效率最高</li><li><code>=</code>, 实现连续赋值</li><li><code>[]</code>, 模拟数组</li></ol><h4 id="对象" tabindex="-1"><a class="header-anchor" href="#对象" aria-hidden="true">#</a> 对象</h4><p>需要返回局部变量时使用, 例如 <code>+</code> 运算符等</p><h4 id="const-对象" tabindex="-1"><a class="header-anchor" href="#const-对象" aria-hidden="true">#</a> const 对象</h4><p>如果重载 <code>+</code> 运算符仅返回对象时, 以下语法将通过</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span><span class="token punctuation">(</span>A1 <span class="token operator">+</span> A2 <span class="token operator">=</span> A3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将A3赋给加法运算返回的临时变量中</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="初始化列表" tabindex="-1"><a class="header-anchor" href="#初始化列表" aria-hidden="true">#</a> 初始化列表</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token class-name">Classy</span><span class="token double-colon punctuation">::</span><span class="token function">Classy</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">men1</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">men2</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">{</span>n<span class="token punctuation">,</span> m<span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>只能用于构造函数</li><li>必须使用初始化列表初始化 const 成员</li><li>必须使用初始化列表初始化引用成员</li><li>初始化顺序与类中声明的顺序相同</li><li>必须使用初始化列表初始化没有默认构造函数的类成员</li><li>允许在初始化列表中使用花括号 <code>{}</code> 初始化数组</li></ol><h2 id="第十三章" tabindex="-1"><a class="header-anchor" href="#第十三章" aria-hidden="true">#</a> 第十三章</h2><h3 id="派生类" tabindex="-1"><a class="header-anchor" href="#派生类" aria-hidden="true">#</a> 派生类</h3><h4 id="特性" tabindex="-1"><a class="header-anchor" href="#特性" aria-hidden="true">#</a> 特性</h4><p><code>Class Child : public Base{};</code> 派生类具有特征</p><ol><li>储存基类的成员</li><li>可以使用基类的方法</li></ol><h4 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数" aria-hidden="true">#</a> 构造函数</h4><p>派生类不能访问基类的私有成员, 只能通过基类的方法访问<br> 因此派生类必须使用基类的构造函数<br> 当使用基类的非默认构造函数时, 需要在初始化列表中调用<br><code>Child::Child(int i, int j): Base(i), men(j){};</code></p><h4 id="构造与构析顺序" tabindex="-1"><a class="header-anchor" href="#构造与构析顺序" aria-hidden="true">#</a> 构造与构析顺序</h4><p>先构造基类, 最后构析基类</p><h4 id="基类与派生类的关系" tabindex="-1"><a class="header-anchor" href="#基类与派生类的关系" aria-hidden="true">#</a> 基类与派生类的关系</h4><ol><li>将派生类的地址赋给基类指针, 可以使用此指针调用基类函数</li><li>以基类引用 / 指针为参数的函数, 可以使用派生类</li><li>可以使用派生类初始化基类变量(隐式调用复制构造函数 <code>const&amp;</code>)</li><li>可以将派生类的变量赋给基类变量</li></ol><h4 id="公有继承的使用" tabindex="-1"><a class="header-anchor" href="#公有继承的使用" aria-hidden="true">#</a> 公有继承的使用</h4><p>用于 is-a 关系</p><h4 id="不能被继承的成员" tabindex="-1"><a class="header-anchor" href="#不能被继承的成员" aria-hidden="true">#</a> 不能被继承的成员</h4><p>构造函数, 构析函数, <code>operator=</code>, 不会被派生类继承, 需要重新定义</p><h3 id="多态继承" tabindex="-1"><a class="header-anchor" href="#多态继承" aria-hidden="true">#</a> 多态继承</h3><h4 id="虚函数" tabindex="-1"><a class="header-anchor" href="#虚函数" aria-hidden="true">#</a> 虚函数</h4><p>在基类与派生类(不一定)的有关函数声明前加上 <code>virtual</code> 关键字, 表明函数为虚函数 使用指针 / 引用调用成员函数时, 程序将根据指向的类的类型选择调用的函数</p><h4 id="调用基类的方法" tabindex="-1"><a class="header-anchor" href="#调用基类的方法" aria-hidden="true">#</a> 调用基类的方法</h4><ol><li>在派生类的函数定义中 由于虚函数的特性, 直接调用虚成员函数, 不能明确是基类或派生类的 如果要在派生类中调用基类的方法, 可以使用在方法前加上基类的域解析运算符 eg.<code>Base::function()</code> 调用基类的重载运算符需要显式使用 <code>Base::operator=(..)</code> 在为派生类定义新的 <code>operator=</code> 与复制构造函数等时, 不要忘记先调用基类的对应函数(不会自动调用)</li><li>派生类的友元函数 在派生类中调用基类的方法只可通过强制类型转换, 且不可访问基类的private成员 eg. <code>(Base &amp;) A.baseFun();</code></li></ol><h4 id="虚函数注意" tabindex="-1"><a class="header-anchor" href="#虚函数注意" aria-hidden="true">#</a> 虚函数注意</h4><ol><li>基类的构析函数必须为虚函数 当基类的指针指向派生类时, 如果构析函数不是虚函数, 将导致不能调用相应的构析函数, 导致内存泄漏</li><li>构造函数没有虚函数, 没意义</li><li>定义一个与基类相同的函数不是重载, 而是重新定义, 将隐藏基类的函数(包括虚函数)(即直接使用派生类无法调用这些函数, 只能使用派生类的指针/引用调用) <ol><li>定义的虚函数应与基类参数应相同, 返回值也要相同, (不用于参数)例外 如果返回基类函数返回基类引用/指针, 则派生类函数可返回派生类(可以被转换)</li><li>如果基类被重载, 派生类应重新定义基类所有的版本</li></ol></li><li>虚函数未定义则使用最新版本的函数(多重继承中)</li></ol><h4 id="protected成员" tabindex="-1"><a class="header-anchor" href="#protected成员" aria-hidden="true">#</a> protected成员</h4><p>在公有继承后, 派生类不能访问基类的 private 成员, 但可以访问 protected 成员<br> 可通过 protect 方法来为派生类提供操作基类的 private 成员的方法, 并保证不被直接修改</p><h4 id="纯虚函数" tabindex="-1"><a class="header-anchor" href="#纯虚函数" aria-hidden="true">#</a> 纯虚函数</h4><ul><li>基类作为高度抽象的共性, 可能无法表明对特定函数的功能, 只能说明有着一种共性</li><li>此时可以通过定义纯虚函数, 表明基类为抽象基类, 此时基类不可以被直接创建</li><li>在虚函数声明末尾加上 = 0, 表明函数为纯虚函数, 类为抽象基类(ABC Abstract Base Class)</li><li>纯虚函数也强制要求派生类必须提供纯虚函数的定义, 保证派生类的多态性</li></ul><h4 id="异形赋值" tabindex="-1"><a class="header-anchor" href="#异形赋值" aria-hidden="true">#</a> 异形赋值</h4><ul><li>当有多个派生类, 在使用指向派生类的指针时, 应避免使用 <code>*A(childA) = *B(childB)</code> 赋值</li><li>如果 <code>childA</code> 有重载的 <code>operator=(base)</code>, 将会先把 <code>B</code> 转化为 <code>base</code> 再赋值, 导致 <code>B</code> 的数据丢失</li><li>可通过在 ABC 中, 将 <code>operator=</code> 设为 protected 禁止此行为</li></ul><h4 id="类设计要求-p427" tabindex="-1"><a class="header-anchor" href="#类设计要求-p427" aria-hidden="true">#</a> 类设计要求 P427</h4><h2 id="代码重用" tabindex="-1"><a class="header-anchor" href="#代码重用" aria-hidden="true">#</a> 代码重用</h2><h3 id="私有继承" tabindex="-1"><a class="header-anchor" href="#私有继承" aria-hidden="true">#</a> 私有继承</h3><p>默认的继承方式<br> 基类的公有与保护成员变为派生类的私有成员, 可以将基类作为派生类的私有成员达到同样的效果(has-a 关系)</p><h4 id="访问基类" tabindex="-1"><a class="header-anchor" href="#访问基类" aria-hidden="true">#</a> 访问基类</h4><ol><li>派生类内访问基类的公有函数 (同共有继承)<br> 使用域解析运算符访问基类 <code>Base::fun();</code></li><li>访问基类本身(基类共有成员同共有派生, 可直接访问)<br> 强制转换 <code>*this</code>, 使其变为基类的引用 <code>(const Base&amp;) *this</code></li><li>访问基类的友元函数 / 使用基类为参数的函数 / 派生类外访问基类的公有成员<br> 私有继承时, 派生类将不会自动转换为基类, 需要强制类型转换为基类的引用/指针</li></ol><h4 id="使用私有继承的情况" tabindex="-1"><a class="header-anchor" href="#使用私有继承的情况" aria-hidden="true">#</a> 使用私有继承的情况</h4><p>大多数时候可将基类作为一个成员以达到相同效果 使用以下特性时则要使用私有继承</p><ol><li>访问 protected 成员<br> 私有继承下, 派生类可以访问基类的 protected 成员</li><li>使用虚函数<br> 私有继承中可以重新定义虚函数, 但只能在类内使用(或强制转换为基类)</li></ol><h4 id="保护继承" tabindex="-1"><a class="header-anchor" href="#保护继承" aria-hidden="true">#</a> 保护继承</h4><p>同私有继承, 但基类的公有与保护成员变为派生类的保护成员, 使其可以在第三代派生类中继续访问基类的公有与保护成员</p><h3 id="多重继承" tabindex="-1"><a class="header-anchor" href="#多重继承" aria-hidden="true">#</a> 多重继承</h3><p>对于继承结构</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Worker</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Singer</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Worker</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Waiter</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Worker</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">SingWaiter</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Waiter</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">Singer</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 Singer 与 Waiter 均有一个 Worker 组件, SingWaiter 将包含两个 Worker 组件</p><h4 id="防止多态的二义性" tabindex="-1"><a class="header-anchor" href="#防止多态的二义性" aria-hidden="true">#</a> 防止多态的二义性</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>SingWaiter sw<span class="token punctuation">;</span>
Worker<span class="token operator">*</span> w1 <span class="token operator">=</span> <span class="token operator">&amp;</span>sw<span class="token punctuation">;</span><span class="token comment">//错误, 无法明确使用哪一个的Worker组件</span>
Worker<span class="token operator">*</span> w2 <span class="token operator">=</span> <span class="token punctuation">(</span>Singer<span class="token operator">*</span><span class="token punctuation">)</span>sw<span class="token punctuation">;</span><span class="token comment">//指针</span>
Worker<span class="token operator">*</span> w3 <span class="token operator">=</span> <span class="token punctuation">(</span>Waiter<span class="token operator">*</span><span class="token punctuation">)</span>sw<span class="token punctuation">;</span><span class="token comment">//指针</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="虚基类" tabindex="-1"><a class="header-anchor" href="#虚基类" aria-hidden="true">#</a> 虚基类</h4><p>实际上, SingWaiter 不应该有多个 Worker 组件, 需要使用虚基类解决</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">SingerV</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">Worker</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">WaiterV</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">Worker</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">SingWaiterV</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Waiter</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">Singer</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时 SingWaiter 中的 Singer 与 Waiter 将共享同一个 Worker 组件</p><h4 id="构造函数新规则" tabindex="-1"><a class="header-anchor" href="#构造函数新规则" aria-hidden="true">#</a> 构造函数新规则</h4><h5 id="使用-singerwaiter" tabindex="-1"><a class="header-anchor" href="#使用-singerwaiter" aria-hidden="true">#</a> 使用 SingerWaiter</h5><p>对于非虚继承, 只能调用上一级基类的构造函数.<br> 因此 SingerWaiter 只能调用 Waiter 与 Singer 的构造函数以初始化基类.</p><h5 id="使用-singerwaiterv" tabindex="-1"><a class="header-anchor" href="#使用-singerwaiterv" aria-hidden="true">#</a> 使用 SingerWaiterV</h5><p>对于虚基类, 可以调用调用虚基类的构造函数与上级基类的构造函数.<br> 且调用虚基类构造函数将覆盖上级基类的构造函数中使用虚基类的部分.<br> 当虚基类有默认构造函数且类中没有调用虚基类的构造函数, 将自动调用默认构造函数并覆盖上一级基类中使用虚基类的部分.</p><h4 id="指明继承自基类的方法" tabindex="-1"><a class="header-anchor" href="#指明继承自基类的方法" aria-hidden="true">#</a> 指明继承自基类的方法</h4><p>在多重继承的两个基类中, 如果有同名函数, 将导致二义性</p><ol><li>通过域运算符指定 <code>C c; c.A::fun(); c.B::fun();</code></li><li>重新定义 <code>C::fun(){A::fun();B::fun();}</code></li></ol><h4 id="混合使用虚继承与继承" tabindex="-1"><a class="header-anchor" href="#混合使用虚继承与继承" aria-hidden="true">#</a> 混合使用虚继承与继承</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">example</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">C</span><span class="token punctuation">,</span> <span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">D</span></span>
<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当A, B, C, D均来自同一个基类 base 时, A 与 B 将有一个独立的 base, C 与 D 将共享一个 base</p><h3 id="函数模板" tabindex="-1"><a class="header-anchor" href="#函数模板" aria-hidden="true">#</a> 函数模板</h3><h4 id="定义模板" tabindex="-1"><a class="header-anchor" href="#定义模板" aria-hidden="true">#</a> 定义模板</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//模板函数的定义</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Type</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">fun3</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="显式具体化" tabindex="-1"><a class="header-anchor" href="#显式具体化" aria-hidden="true">#</a> 显式具体化</h4><p>默认情况下, 编译器会根据提供的类型替换模板, 生成具体的函数.<br> 但可能部分类型下函数不能很好的运行需要专门定义, 即显示具体化.<br> eg.</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">bool</span> <span class="token function">fun</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> T<span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> a <span class="token operator">&gt;</span> b<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对于char*类型可能不适用 因此需要显式具体化</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span> <span class="token keyword">bool</span> <span class="token generic-function"><span class="token function">fun</span><span class="token generic class-name"><span class="token operator">&lt;</span>type<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>type a<span class="token punctuation">,</span> type b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>type 为具体化的类型, <code>template&lt;&gt;</code> 为具体化的必要前缀.<br> fun 后的 <code>&lt;type&gt;</code> 可以省略, 编译器将自动识别.<br> 具体化的函数参数必须与模板一致.</p><p>函数模板是没有部分具体化的</p><h4 id="具体化规则" tabindex="-1"><a class="header-anchor" href="#具体化规则" aria-hidden="true">#</a> 具体化规则</h4><p>允许函数同时存在 非模板版本, 具体化版本, 模板版本.<br> 编译器调用优先级 非模板版本(同名的普通函数)(未指定模板类型时) &gt; 具体化版本 &gt; 模板版本.</p><h4 id="显式实例化" tabindex="-1"><a class="header-anchor" href="#显式实例化" aria-hidden="true">#</a> 显式实例化</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token keyword">bool</span> <span class="token generic-function"><span class="token function">fun</span><span class="token generic class-name"><span class="token operator">&lt;</span>type<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>type a<span class="token punctuation">,</span> type b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认情况下编译器会自动实例化, 也可手动显示实例化, 此时不可省略 <code>&lt;type&gt;</code>.<br> 且同一个文件中(源文件以及引用)不能同时有同一个函数的实例化与具体化.</p><h4 id="重载解析策略" tabindex="-1"><a class="header-anchor" href="#重载解析策略" aria-hidden="true">#</a> 重载解析策略</h4><ol><li>匹配参数 <ol><li>完全匹配(函数参数完全一致)</li><li>提升转换(short-&gt;int, float-&gt;double)</li><li>标准转换(long-&gt;double, int-&gt;char)</li><li>用户自定义转换</li></ol></li><li>最具体 非模板版本(未指定模板类型时) &gt; 具体化版本 &gt; 模板版本</li><li>指定使用模板版本 当函数有非模板版本时, 在函数调用前加上 <code>&lt;&gt;</code> 或 <code>&lt;type&gt;</code> 将强制使用模板版本</li></ol><h4 id="inline函数模板" tabindex="-1"><a class="header-anchor" href="#inline函数模板" aria-hidden="true">#</a> inline函数模板</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//正确写法</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token keyword">inline</span> T <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span><span class="token punctuation">,</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span><span class="token punctuation">)</span>
 
<span class="token comment">//错误写法</span>
<span class="token keyword">inline</span> <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>T <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span><span class="token punctuation">,</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类模板" tabindex="-1"><a class="header-anchor" href="#类模板" aria-hidden="true">#</a> 类模板</h3><h4 id="定义模板-1" tabindex="-1"><a class="header-anchor" href="#定义模板-1" aria-hidden="true">#</a> 定义模板</h4><p>在将要定义为模板的函数或类的定义/声明前加上</p><p><code>template&lt;typename(模板参数类型 此处指类型) Type(参数名, 不同于变量)&gt;</code></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//类声明 example.h</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Type</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">example</span>
<span class="token punctuation">{</span>
	<span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">void</span> <span class="token function">fun2</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//类内定义不需要而额外 template&lt;typename Type&gt;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//成员函数定义</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Type</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token class-name">example</span><span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">fun1</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">//模板函数的定义</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Type</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">fun3</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于模板不能被编译, 因此模板不能单独编译, 必须与实例化请求一起使用(即模板类与成员函数需要放在同一个头文件中)</p><h4 id="使用模板" tabindex="-1"><a class="header-anchor" href="#使用模板" aria-hidden="true">#</a> 使用模板</h4><ol><li>实例化使用模板的类时必须使用 <code>&lt;Type&gt;</code> 指定所需的类型</li><li>实例化使用模板的函数时不需要指定所需的类型, 编译器将根据函数参数的类型自动识别</li><li>可以设置模板参数的默认值</li></ol><p>eg. <code>template&lt;typename a = int&gt;</code></p><h4 id="非类型参数" tabindex="-1"><a class="header-anchor" href="#非类型参数" aria-hidden="true">#</a> 非类型参数</h4><p>除了 <code>typename</code>, 模板中也可使用 <code>int</code> 等作为参数类型, 称为表达式参数.<br> 规定表达式参数可以是整形, 指针, 枚举或引用, 不可以是 <code>double</code>.<br> 在 <code>template&lt;int a&gt;</code> 中, <code>a</code> 不属于变量, 不能修改参数的值, 也不能使用参数的地址.</p><h4 id="模板实例化" tabindex="-1"><a class="header-anchor" href="#模板实例化" aria-hidden="true">#</a> 模板实例化</h4><p>编译器将自动实例化使用到的模板.<br> 也可显式实例化.</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token keyword">class</span> <span class="token class-name">example</span><span class="token operator">&lt;</span>type<span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="模板具体化" tabindex="-1"><a class="header-anchor" href="#模板具体化" aria-hidden="true">#</a> 模板具体化</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">example</span><span class="token operator">&lt;</span>type<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">void</span> <span class="token class-name">example</span><span class="token operator">&lt;</span>type<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//类外定义成员函数不需要template&lt;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="部分具体化" tabindex="-1"><a class="header-anchor" href="#部分具体化" aria-hidden="true">#</a> 部分具体化</h4><p>当类有多个模板参数时, 可以只针对其中几个参数具体化</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">targ1</span><span class="token punctuation">,</span> <span class="token keyword">int</span> targ2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">example</span><span class="token operator">&lt;</span>targ1<span class="token punctuation">,</span> targ2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>template&lt;&gt;</code> 内为没有被具体化的参数, 需要包含类型, 当 <code>template&lt;&gt;</code> 内为空即具体化整个模板</li><li><code>example&lt;&gt;</code> 内为具体参数(模板中的所有参数), 可以是 <code>template</code> 中的未具体化的参数 eg</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">example</span><span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">,</span> T2<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此类具体化未 T2 与 T3 相同时的具体化</p><ul><li>当有多个模板可选时, 将选择具体化程度最高的模板</li></ul><h4 id="成员函数具体化" tabindex="-1"><a class="header-anchor" href="#成员函数具体化" aria-hidden="true">#</a> 成员函数具体化</h4><p>可以单独具体化成员</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token class-name">example</span><span class="token operator">&lt;</span>type<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当具体化成员函数时, 允许分离具体化函数的声明与定义(不同于一般的模板 )</p><h4 id="关于具体化常量引用类型参数的模板" tabindex="-1"><a class="header-anchor" href="#关于具体化常量引用类型参数的模板" aria-hidden="true">#</a> 关于具体化常量引用类型参数的模板</h4><p>前提见 <a href="#%E5%B8%B8%E9%87%8F%E5%BC%95%E7%94%A8">常量指针引用</a></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token comment">//const T&amp; obj要求obj所引用的值不能修改</span>
<span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>

<span class="token comment">//指针指向const char*, 但指针本身是可以被修改的</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token generic-function"><span class="token function">fun</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> <span class="token operator">&amp;</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment">//错误</span>
<span class="token comment">//指针指向char*, 可以修改指针指向的内容, 但指针本身不能被修改的</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token generic-function"><span class="token function">fun</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token operator">&amp;</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment">//正确</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token generic-function"><span class="token function">fun</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token operator">&amp;</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment">//正确</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="类内模板" tabindex="-1"><a class="header-anchor" href="#类内模板" aria-hidden="true">#</a> 类内模板</h4><p>C++允许成员函数或嵌套类为模板</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">base</span>
<span class="token punctuation">{</span>
	<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">U</span><span class="token operator">&gt;</span>
	<span class="token keyword">class</span> <span class="token class-name">hold</span>
	<span class="token punctuation">{</span>U member<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

	hold<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> a<span class="token punctuation">;</span>

	<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">V</span><span class="token operator">&gt;</span>
	V <span class="token function">fun</span><span class="token punctuation">(</span>V obj<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类外定义时注意</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
	<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">U</span><span class="token operator">&gt;</span><span class="token comment">//嵌套类的模板需要独立</span>
	<span class="token keyword">class</span> <span class="token class-name">base</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>hold<span class="token comment">//使用带模板参数的类名与域解析运算符</span>
	<span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
	<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">V</span><span class="token operator">&gt;</span>
	V <span class="token class-name">base</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">fun</span><span class="token punctuation">(</span>V obj<span class="token punctuation">)</span>
	<span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="以模板类型为参数" tabindex="-1"><a class="header-anchor" href="#以模板类型为参数" aria-hidden="true">#</a> 以模板类型为参数</h4><p>对于定义</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token keyword">typename</span> <span class="token class-name">TT</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">U</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">V</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">exam</span>
<span class="token punctuation">{</span>
	TT<span class="token operator">&lt;</span>U<span class="token operator">&gt;</span> a<span class="token punctuation">;</span>
	TT<span class="token operator">&lt;</span>V<span class="token operator">&gt;</span> b<span class="token punctuation">;</span>
	TT<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时要求类型 <code>TT</code> 需要是一个参数为 <code>typename</code> 的模板类型 且可以在 <code>exam</code> 内指定 <code>TT</code> 的模板参数</p><h4 id="模板类的友元" tabindex="-1"><a class="header-anchor" href="#模板类的友元" aria-hidden="true">#</a> 模板类的友元</h4><p>设模板类</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">exam</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>非模板友元 <ul><li>可以直接使用 <code>friend void fun();</code></li><li>也可以指定特定的重载函数 <code>friend void fun(example&lt;T&gt;&amp;);</code> 注意此处 <code>fun</code> 不是模板函数, 需要有对应参数的重载的 <code>fun</code> 才能为友元</li></ul></li><li>约束模板友元 当友元为模板时, 友元模板的参数与类的模板参数有关<br> eg.<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">exam</span>
<span class="token punctuation">{</span>
	<span class="token comment">//将模板参数传递到友元的模板中</span>
	<span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token generic-function"><span class="token function">fun1</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//将模板参数传递到友元的函数参数中</span>
	<span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token generic-function"><span class="token function">fun2</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>exam<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//fun2的等价写法</span>
	<span class="token comment">//编译器能够自动识别模板参数</span>
	<span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token generic-function"><span class="token function">fun2</span><span class="token generic class-name"><span class="token operator">&lt;</span>exam<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>exam<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>非约束模板友元 当友元为模板时, 友元模板的参数与类的模板参数无关 eg.<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">exam</span>
<span class="token punctuation">{</span>
	<span class="token comment">// 所有fun1&lt;U&gt; 均为 exam&lt;T&gt; 的友元</span>
	<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">U</span><span class="token operator">&gt;</span> <span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token generic-function"><span class="token function">fun1</span><span class="token generic class-name"><span class="token operator">&lt;</span>U<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="模板别名" tabindex="-1"><a class="header-anchor" href="#模板别名" aria-hidden="true">#</a> 模板别名</h4><h5 id="using" tabindex="-1"><a class="header-anchor" href="#using" aria-hidden="true">#</a> using =</h5><p>C++11 特性, 添加 <code>using = </code>语法, 实现模板别名 eg.</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//模板别名</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
	<span class="token keyword">using</span> arr12 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> <span class="token number">12</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">//通常的 using= 等价于typedef</span>
<span class="token keyword">using</span> strp <span class="token operator">=</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="typedef-嵌套类型" tabindex="-1"><a class="header-anchor" href="#typedef-嵌套类型" aria-hidden="true">#</a> typedef 嵌套类型</h5><p>结合模板类与嵌套类型的特性实现模板别名</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">root</span>
<span class="token punctuation">{</span>
	<span class="token keyword">class</span> <span class="token class-name">leaf</span><span class="token punctuation">;</span><span class="token comment">//仅声明</span>

	<span class="token comment">//部分编译器需要关键则typename, 明确后面的部分为类型</span>
	<span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">std</span><span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span>leaf<span class="token punctuation">,</span> T<span class="token operator">&gt;</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">root</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>leaf
<span class="token punctuation">{</span>
	arr a_<span class="token punctuation">;</span><span class="token comment">//可以直接使用别名不需要再指定类型</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="特性-1" tabindex="-1"><a class="header-anchor" href="#特性-1" aria-hidden="true">#</a> 特性</h2><h3 id="友元" tabindex="-1"><a class="header-anchor" href="#友元" aria-hidden="true">#</a> 友元</h3><h4 id="定义友元" tabindex="-1"><a class="header-anchor" href="#定义友元" aria-hidden="true">#</a> 定义友元</h4><p>定义一个友元时, 只要在类内使用 <code>friend [友元定义];</code> 可以在任何位置使用</p><h4 id="前向声明" tabindex="-1"><a class="header-anchor" href="#前向声明" aria-hidden="true">#</a> 前向声明</h4><p>由于定义友元时, 类 / 函数可能未定义 / 循环定义, 需要前向声明<br> eg.</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//前向声明</span>
<span class="token keyword">class</span> <span class="token class-name">exam</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">HasFrined</span>
<span class="token punctuation">{</span>
	<span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">exam</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">exam</span>
<span class="token punctuation">{</span>
	<span class="token comment">//exam中使用了HasFriend, 不能定义在HasFriend之前</span>
	<span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span>HasFriend<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="友元成员函数" tabindex="-1"><a class="header-anchor" href="#友元成员函数" aria-hidden="true">#</a> 友元成员函数</h4><p>有的时候不需要整个类均为友元, 仅需要部分成员函数作为友元.<br> 可以使用友元成员函数.</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">friend</span> <span class="token keyword">void</span> exam<span class="token double-colon punctuation">::</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="嵌套类" tabindex="-1"><a class="header-anchor" href="#嵌套类" aria-hidden="true">#</a> 嵌套类</h3><p>定义在类内的类为嵌套类.<br> 只有声明在 public 中的嵌套类才能包含类外使用.<br> 使用嵌套类需要使用域解析运算符.</p><h4 id="嵌套类的作用域" tabindex="-1"><a class="header-anchor" href="#嵌套类的作用域" aria-hidden="true">#</a> 嵌套类的作用域</h4><p>对于在私有部分声明的嵌套类, 在类的外部是不知道这个类的存在的, 及类外不能使用嵌套类及其指针</p><h4 id="嵌套类的访问控制" tabindex="-1"><a class="header-anchor" href="#嵌套类的访问控制" aria-hidden="true">#</a> 嵌套类的访问控制</h4><p>包含类不能访问嵌套类的私有元素, 但是嵌套类可以访问包含类的私有元素</p><h3 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理" aria-hidden="true">#</a> 异常处理</h3><h4 id="提前结束程序" tabindex="-1"><a class="header-anchor" href="#提前结束程序" aria-hidden="true">#</a> 提前结束程序</h4><ol><li><code>abort()</code> 位于 <code>cstdlib</code> 中, 调用后将向 <code>cerr</code> 输出错误信息</li><li><code>exit()</code> 仅提前结束程序</li></ol><h4 id="捕获异常" tabindex="-1"><a class="header-anchor" href="#捕获异常" aria-hidden="true">#</a> 捕获异常</h4><ul><li><code>try</code>:<br><code>try</code> 块中的代码标识将被激活的特定异常, 它后面通常跟着一个或多个 <code>catch</code> 块</li><li><code>catch</code>:<br> 在您想要处理问题的地方，通过异常处理程序捕获异常. <code>catch</code> 关键字用于捕获异常.<br> 如果 <code>try</code> 块在不同的情境下会抛出不同的异常, 这个时候可以尝试罗列多个 <code>catch</code> 语句, 用于捕获不同类型的异常.</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">try</span>
<span class="token punctuation">{</span>
   <span class="token comment">// 保护代码</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span> <span class="token punctuation">[</span>异常类型<span class="token punctuation">]</span> <span class="token punctuation">[</span>变量名称<span class="token punctuation">]</span> <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token comment">// catch 块</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token comment">//表示任何异常</span>
<span class="token punctuation">{</span>
   <span class="token comment">// catch 块</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>也允许捕获异常类型的引用</li><li><code>catch(...){}</code> 表示任意类型的异常均会被捕获</li></ul><h4 id="抛出异常" tabindex="-1"><a class="header-anchor" href="#抛出异常" aria-hidden="true">#</a> 抛出异常</h4><p>通过关键字 <code>throw</code> 抛出异常, 抛出的异常允许是任何类型.<br> 当使用 <code>throw</code> 抛出异常后, 将会立即停止程序/函数(仍会执行<mark>异常所在代码块中的构析函数</mark>).<br> 并开始进行栈解退(不断退出调用序列, 找到第一个能捕捉对应异常的 <code>try</code> 模块), 在栈解退的过程中, 会逐个释放中间函数所创建的临时变量并调用相应的析构函数.<br> 如果没有 <code>try</code> 捕捉异常, 或对应类型的 <code>catch</code>, 将导致程序终止.<br> 否则将执行对应 <code>catch</code> 内的程序.</p><h4 id="实例" tabindex="-1"><a class="header-anchor" href="#实例" aria-hidden="true">#</a> 实例</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">double</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">throw</span> <span class="token string">&quot;Can not div by 0&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> a<span class="token operator">/</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">try</span>
	<span class="token punctuation">{</span>
		<span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		cout <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="异常规格说明" tabindex="-1"><a class="header-anchor" href="#异常规格说明" aria-hidden="true">#</a> 异常规格说明</h4><p>(几乎弃用的特性)</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">double</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span> <span class="token keyword">throw</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">throw</span> <span class="token string">&quot;Can not div by 0&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> a<span class="token operator">/</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>throw(const char*)</code> 表明抛出的异常类型为 <code>const char*</code> 异常规格说明中允许有多种类型 不使用异常规格说明则表明可能为任意类型的异常 使用 <code>throw()</code> 表示不抛出异常 使用 <code>noexcept</code> 表示不抛出异常, 一旦使用 <code>throw</code> 将终止程序</p><h4 id="捕获异常类的引用" tabindex="-1"><a class="header-anchor" href="#捕获异常类的引用" aria-hidden="true">#</a> 捕获异常类的引用</h4><p>通常会对异常进行派生, 从而表现出不同种类与大类的异常.<br> 利用基类引用可以指向派生类的特点, 捕获基类引用也可达到同时捕获派生类引用的效果.</p><h4 id="c-标准的异常" tabindex="-1"><a class="header-anchor" href="#c-标准的异常" aria-hidden="true">#</a> C++ 标准的异常</h4><p>一种继承自 <code>std::exception</code> 的类.<br> 定义于头文件 <code>stdexcept</code> 中.<br> 包含一个虚成员函数.</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">what</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">throw</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>实例</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdexcept&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">MyException</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">exception</span></span>
<span class="token punctuation">{</span>
	<span class="token function">MyException</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">what</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">throw</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&quot;C++ Exception&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">try</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">throw</span> <span class="token function">MyException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">catch</span><span class="token punctuation">(</span>MyException<span class="token operator">&amp;</span> e<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;MyException caught&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> e<span class="token punctuation">.</span><span class="token function">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">catch</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>exception<span class="token operator">&amp;</span> e<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">//其他的错误</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,318),C={href:"https://www.runoob.com/cplusplus/cpp-exceptions-handling.html",target:"_blank",rel:"noopener noreferrer"},W=p(`<h4 id="设计异常" tabindex="-1"><a class="header-anchor" href="#设计异常" aria-hidden="true">#</a> 设计异常</h4><ol><li>一个接收错误原因的构造函数</li><li>构造函数为 <code>explicit</code></li><li>一个输出错误原因的成员函数 <code>what()</code></li><li>从对应类型的标准异常派生</li><li>作为有关类的嵌套类(可以自动成为友元)</li></ol><h4 id="管理异常" tabindex="-1"><a class="header-anchor" href="#管理异常" aria-hidden="true">#</a> 管理异常</h4><p>当一个异常没有被捕获时, 将会调用函数 <code>terminate()</code> 通常 <code>terminate()</code> 将直接调用 <code>abort()</code> 可以使用 <code>set_terminate(f)</code> 设置 <code>terminate</code> 的行为 <code>f</code> 为一个没有参数, 返回值为 <code>void</code> 的函数</p><h4 id="抛出异常导致的内存泄漏" tabindex="-1"><a class="header-anchor" href="#抛出异常导致的内存泄漏" aria-hidden="true">#</a> 抛出异常导致的内存泄漏</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">double</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">throw</span> <span class="token string">&quot;err&quot;</span><span class="token punctuation">;</span><span class="token comment">//此时 delete 不会执行, 将导致内存泄漏</span>
	<span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>析构函数中更要特别注意 通过使用智能指针管理内存以避免此问题 或见 effect C++ 有关章节</p><h3 id="rtti" tabindex="-1"><a class="header-anchor" href="#rtti" aria-hidden="true">#</a> RTTI</h3><p>运行阶段类型识别</p><h4 id="dynamic-cast" tabindex="-1"><a class="header-anchor" href="#dynamic-cast" aria-hidden="true">#</a> dynamic_cast</h4><p>用于含虚函数的, 有派生关系的类 检查是否可以安全的将对象地址赋给特定类型的指针</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">child</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">base</span></span>
<span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">grand</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">child</span></span>
<span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
grand <span class="token operator">*</span>gr <span class="token operator">=</span> <span class="token keyword">new</span> grand<span class="token punctuation">;</span>
base <span class="token operator">*</span>ba <span class="token operator">=</span> <span class="token keyword">new</span> base<span class="token punctuation">;</span>
<span class="token comment">//直接使用强制类型转换时, 编译器将不会检查问题</span>
grand<span class="token operator">*</span> p1 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>grand<span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>ba<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//不安全, 使用 dynamic_cast 将返回空指针</span>
grand<span class="token operator">*</span> p2 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>grand<span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>gr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//安全, 返回 gr</span>
base<span class="token operator">*</span> p3 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>base<span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>gr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//安全, 返回 gr</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="实例应用" tabindex="-1"><a class="header-anchor" href="#实例应用" aria-hidden="true">#</a> 实例应用</h5><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>child<span class="token operator">*</span> p4 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
base<span class="token operator">*</span> parr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token comment">// 假设 parr 随机指向 base, child 与 grand</span>
<span class="token comment">// 在一个循环中运行 child 中的成员函数 inChild</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">//通过此方法, 在将指针正确赋值的同时, 判断是否能够运行 inChild</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>p4 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>child<span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>parr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		p4<span class="token operator">-&gt;</span><span class="token function">inChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="对引用使用" tabindex="-1"><a class="header-anchor" href="#对引用使用" aria-hidden="true">#</a> 对引用使用</h5><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//注意赋值时的类型</span>
<span class="token keyword">try</span>
<span class="token punctuation">{</span>
	child<span class="token operator">&amp;</span> cr <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>base<span class="token operator">&amp;</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>ba<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span><span class="token punctuation">(</span>bad_cast<span class="token operator">&amp;</span> err<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对引用使用 <code>dynamic_cast</code> 时, 将不会返回特殊值, 而是抛出异常 <code>bad_cast</code>, 需要使用 <code>try</code> 捕捉</p><h4 id="typeid-与-type-info-类" tabindex="-1"><a class="header-anchor" href="#typeid-与-type-info-类" aria-hidden="true">#</a> typeid 与 type_info 类</h4><p><code>typeid</code> 用于判断变量的类型, 调用返回一个 <code>type_info</code> 的引用</p><h5 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法" aria-hidden="true">#</a> 使用方法</h5><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeid</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">=</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>type_info</code> 类, 需要引用头文件 <code>typeinfo</code>.<br> 有成员函数 <code>name()</code>, 通常是类型名称, 但不一定, 不应直接与类型名比较.</p><p>大部分情况下, <code>dynamic_cast</code> 可以完全取代 <code>typeid</code>.<br><code>typeid</code> 最好仅用于调试.</p><h4 id="类型转换运算符" tabindex="-1"><a class="header-anchor" href="#类型转换运算符" aria-hidden="true">#</a> 类型转换运算符</h4><p><code>cast</code> 即丢弃, 即告诉编译器丢弃某些特性检查</p><h5 id="const-cast" tabindex="-1"><a class="header-anchor" href="#const-cast" aria-hidden="true">#</a> const_cast</h5><p>用于将一个常量指针转化为普通指针</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span> cpi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">double</span><span class="token operator">*</span> cpd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span><span class="token operator">*</span> pi <span class="token operator">=</span> <span class="token generic-function"><span class="token function">const_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>cpi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 允许, pi 可以修改 cpi 指向的值</span>
<span class="token keyword">int</span><span class="token operator">*</span> pi2 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">const_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>cpd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不允许, const_cast 不能改变类型 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="static-cast" tabindex="-1"><a class="header-anchor" href="#static-cast" aria-hidden="true">#</a> static_cast</h5><p>即存在对应操作符重载函数的转换运算</p><p>该运算符也可用于明确重载函数的函数指针具体指向那个函数, 如</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">float</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">float</span> i<span class="token punctuation">,</span> <span class="token keyword">float</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于以上的重载函数</p><ul><li><code>static_cast&lt;int(*)(int, int)&gt;(&amp;add)</code> 运算将其转换为 <code>int(*)(int, int)</code> 类型, 表示函数的第一个版本</li><li><code>static_cast&lt;float(*)(float, float)&gt;(&amp;add)</code> 运算将其转换为 <code>float(*)(float, float)</code> 类型, 表示函数的第二个版本</li></ul><h5 id="reinterpret-cast" tabindex="-1"><a class="header-anchor" href="#reinterpret-cast" aria-hidden="true">#</a> reinterpret_cast</h5><p>直接读取内存的强制类型转换</p><h3 id="右值引用" tabindex="-1"><a class="header-anchor" href="#右值引用" aria-hidden="true">#</a> 右值引用</h3><h4 id="左值与右值" tabindex="-1"><a class="header-anchor" href="#左值与右值" aria-hidden="true">#</a> 左值与右值</h4><p>对于赋值运算</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="左值" tabindex="-1"><a class="header-anchor" href="#左值" aria-hidden="true">#</a> 左值</h5><ul><li>即赋值运算符左侧的值</li><li>在 C++ 中表示在表达式之后依然需要的变量</li><li>左值有地址</li></ul><h5 id="右值" tabindex="-1"><a class="header-anchor" href="#右值" aria-hidden="true">#</a> 右值</h5><ul><li>即赋值运算符右侧的值</li><li>在 C++ 中表示在表达式结束时就不再存在的临时对象</li><li>右值没有地址, 编译器以临时量处理</li></ul><h4 id="右值引用-1" tabindex="-1"><a class="header-anchor" href="#右值引用-1" aria-hidden="true">#</a> 右值引用</h4><ul><li>使用两个 <code>&amp;</code> 表示右值引用</li><li>常量可以直接转变为右值, 但变量需要使用函数 <code>std::move</code> 说明其为一个右值 (变为右值后, 变量不能再使用)</li><li>将右值引用作为函数参数时, 说明 <ol><li>你可以将 <code>std::move</code> 后的变量或常量作为参数传入 (类似常量引用)</li><li>你可以直接修改这个函数参数 (与常量引用不同)</li></ol></li><li>类型为右值引用的变量属于左值, 如果要将其向下传递, 需要再次使用 <code>std::move</code></li></ul><h4 id="右值引用应用" tabindex="-1"><a class="header-anchor" href="#右值引用应用" aria-hidden="true">#</a> 右值引用应用</h4><h5 id="浅拷贝构造函数" tabindex="-1"><a class="header-anchor" href="#浅拷贝构造函数" aria-hidden="true">#</a> 浅拷贝构造函数</h5><p>基于右值引用的特性, 可以定义出一套严格的浅拷贝函数, 保证程序的高效</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">example</span>
<span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
res<span class="token operator">*</span> ptr<span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
<span class="token function">example</span><span class="token punctuation">(</span>example<span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">)</span><span class="token operator">:</span>
<span class="token function">ptr</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>ptr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">// 提前置空, 防止 obj 构析导致 ptr 销毁</span>
	obj<span class="token punctuation">.</span>ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

example<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>example<span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	ptr <span class="token operator">=</span> obj<span class="token punctuation">.</span>ptr<span class="token punctuation">;</span>
	obj<span class="token punctuation">.</span>ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="数据结构赋值" tabindex="-1"><a class="header-anchor" href="#数据结构赋值" aria-hidden="true">#</a> 数据结构赋值</h5><p>向数据结构插入值时, 可能插入后原值就不再需要, 因此可以以右值引用为参数</p><h3 id="智能指针" tabindex="-1"><a class="header-anchor" href="#智能指针" aria-hidden="true">#</a> 智能指针</h3>`,53),j={href:"https://learn.microsoft.com/zh-cn/cpp/cpp/smart-pointers-modern-cpp?source=recommendations&view=msvc-170",target:"_blank",rel:"noopener noreferrer"},S=p(`<ul><li>智能指针是一系列来自头文件 <code>&lt;memory&gt;</code> 的对象</li></ul><h4 id="智能指针特性" tabindex="-1"><a class="header-anchor" href="#智能指针特性" aria-hidden="true">#</a> 智能指针特性</h4><ul><li>智能指针可以用于管理指针, 防止指针忘记释放与裸指针造成危害</li><li>智能指针以其封装的指针指向的资源类型为模板</li><li>可以像普通指针使用 <code>-&gt;</code> 运算符访问指针资源</li><li>可以使用 <code>*</code> 运算符直接访问资源</li><li>当智能指针生命周期结束将会被自动销毁 (利用构析函数, 保证指针即使销毁)</li><li>智能指针使用 <code>delete</code> 销毁资源, 因此最好使用 <code>new</code> 创建资源 (不创建数组或采用 <code>make_unique</code>)</li><li>智能指针以指针为参数的构造函数为 <code>explict</code> 型, 表明不会在函数传参 / 赋值操作中隐式转换, 需要显示调用构造函数</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span><span class="token operator">*</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 允许</span>
std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">ptr</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// 不允许</span>
std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> ptr <span class="token operator">=</span> a<span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="独占智能指针" tabindex="-1"><a class="header-anchor" href="#独占智能指针" aria-hidden="true">#</a> 独占智能指针</h4><p><code>unique_ptr</code> 独享指针的资源, 不可复制 / 直接赋值</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token function">ptr</span><span class="token punctuation">(</span>T<span class="token operator">*</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>unique_ptr</code> 可以将指针地址作为构造函数, 也可以使用 <code>make_unique</code> 创建 (用法类似 new)</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">nums</span>
<span class="token punctuation">{</span>
<span class="token keyword">int</span> _a<span class="token punctuation">,</span> _b<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token function">nums</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token operator">:</span>
	<span class="token function">_a</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_b</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	unique_ptr<span class="token operator">&lt;</span>nums<span class="token operator">&gt;</span> ptr <span class="token operator">=</span> <span class="token generic-function"><span class="token function">make_unique</span><span class="token generic class-name"><span class="token operator">&lt;</span>nums<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应使用 <code>std::move()</code> 方法转移控制权</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>unique_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
unique_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> p2 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当遍历以 <code>unique_ptr</code> 为对象的数据结构时, 应当使用引用的方式 (没有复制构造函数)</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>vector<span class="token operator">&lt;</span>unique_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> arr<span class="token punctuation">;</span>

arr<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">make_unique</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
arr<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">make_unique</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
arr<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">make_unique</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
arr<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">make_unique</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用引用迭代变量</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> iter <span class="token operator">:</span> arr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>iter <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用 <code>make_unique</code> 创建数组, 但无法为创建的数组指定初始值</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">auto</span> p <span class="token operator">=</span> <span class="token generic-function"><span class="token function">make_unique</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他有关操作</p><ul><li>使用成员函数 <code>release()</code> 可以释放 <code>unique_ptr</code> 对指针的控制权, 返回保存的原始指针</li><li>使用成员函数 <code>reset(pointer)</code> 可以修改 <code>unique_ptr</code> 管理的指针, 并且原先的指针将被删除</li><li><code>bool</code> 类型转换中, 如果 <code>unique_ptr</code> 管理指针则返回 <code>true</code>, 否则返回 <code>false</code> (管理的指针为 <code>nullptr</code>)</li></ul><h4 id="共享智能指针" tabindex="-1"><a class="header-anchor" href="#共享智能指针" aria-hidden="true">#</a> 共享智能指针</h4><ul><li><code>share_ptr</code> 采用引用计数法, 当指针的管理对象被全部销毁时, 才会销毁指针</li><li>当资源的使用者只是临时调用, 则需要引用传递 (一般函数)</li><li>当资源的使用者需要保存资源, 长期使用, 则需要按值传递 (构造函数 / 提取数据并保存)</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>share_ptr<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token function">ptr</span><span class="token punctuation">(</span>T<span class="token operator">*</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>share_ptr</code> 允许相互赋值, 或将指针作为参数构造对象, 但最好使用 <code>make_share</code> 构建智能指针, 减少构造开销</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">auto</span> sp1 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">sp2</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">auto</span> sp3 <span class="token operator">=</span> sp1<span class="token punctuation">;</span>
<span class="token keyword">auto</span> <span class="token function">sp4</span><span class="token punctuation">(</span>sp1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>share_ptr</code> 重载了 <code>==</code> 运算符, 当其引用同一个指针时, 返回 <code>true</code></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">auto</span> sp1 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">sp2</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> sp3 <span class="token operator">=</span> sp1<span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span>sp1 <span class="token operator">==</span> sp3<span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span> <span class="token comment">// 返回 true, 来自同一个资源</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>sp1 <span class="token operator">==</span> sp2<span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span> <span class="token comment">// 返回 false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果两个类可以相互管理, 则 <code>share_ptr</code> 可能导致循环引用. 示例中, <code>father</code> 与 <code>son</code> 在函数结束时仅删除了一次引用, 没有释放资源.</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">Father</span>
<span class="token punctuation">{</span>
    shared_ptr<span class="token operator">&lt;</span>Son<span class="token operator">&gt;</span> son_<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">Son</span>
<span class="token punctuation">{</span>
    shared_ptr<span class="token operator">&lt;</span>Father<span class="token operator">&gt;</span> father_<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">auto</span> father <span class="token operator">=</span> <span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>Father<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> son <span class="token operator">=</span> <span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>Son<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    father<span class="token operator">-&gt;</span>son_ <span class="token operator">=</span> son<span class="token punctuation">;</span>
    son<span class="token operator">-&gt;</span>father_ <span class="token operator">=</span> father<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了解决问题, 需要引入 <code>weak_ptr</code>, 作用与 <code>share_ptr</code> 相同, 但不会添加引用计数</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">Son</span>
<span class="token punctuation">{</span>
    weak_ptr<span class="token operator">&lt;</span>Father<span class="token operator">&gt;</span> father_<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他有关操作</p><ul><li>使用成员函数 <code>reset(pointer)</code> 可以修改 <code>share_ptr</code> 管理的指针, 并且原先的指针将被删除, 并置为 <code>nullptr</code></li><li>使用成员函数 <code>use_count</code> 可以获取有多少个 <code>share_ptr</code> 共享资源</li><li>使用成员函数 <code>get</code> 可以获取资源的原始指针</li><li><code>bool</code> 类型转换中, 如果 <code>share_ptr</code> 管理指针则返回 <code>true</code>, 否则返回 <code>false</code> (管理的指针为 <code>nullptr</code>)</li></ul><h4 id="使用情况" tabindex="-1"><a class="header-anchor" href="#使用情况" aria-hidden="true">#</a> 使用情况</h4><ul><li>当要提取一个数据结构中符合条件的资源, 并组成一个新的数组, 适合采用共享智能指针</li><li>当一个资源会被多个对象共享时, 适合采用共享智能指针</li><li>当可能循环引用时, 应当避免循环引用, 获将不重要的一个对象的成员改为 <code>weak_ptr</code></li><li>对于其他一般情况, 如创建一个不定长的数组等, 都适合采用独占智能指针</li></ul><h3 id="函数包装模板与-lambda-表达式" tabindex="-1"><a class="header-anchor" href="#函数包装模板与-lambda-表达式" aria-hidden="true">#</a> 函数包装模板与 lambda 表达式</h3>`,33),E={href:"https://learn.microsoft.com/zh-cn/cpp/cpp/lambda-expressions-in-cpp?source=recommendations&view=msvc-170",target:"_blank",rel:"noopener noreferrer"},V=p(`<h4 id="lambda-表达式" tabindex="-1"><a class="header-anchor" href="#lambda-表达式" aria-hidden="true">#</a> lambda 表达式</h4><p>本质为一个类, 并通过重载 <code>()</code> 运算符的方式而可视为一个函数</p><h5 id="lambda-表达式基本格式" tabindex="-1"><a class="header-anchor" href="#lambda-表达式基本格式" aria-hidden="true">#</a> lambda 表达式基本格式</h5><p><code>[捕获列表](参数列表)可变规格 -&gt; 返回类型 {函数体}</code></p><ol><li>参数列表与函数体 与一般函数类似</li><li>返回类型 通常可以省略, 编译器将自动推断</li><li>可变规格 目前有标识符 <code>mutable</code>, 默认省略, 表示函数为 <code>const</code> 成员函数</li><li>捕获列表 规定 lambda 表达式如何访问外部的值</li></ol><h5 id="捕获列表详解" tabindex="-1"><a class="header-anchor" href="#捕获列表详解" aria-hidden="true">#</a> 捕获列表详解</h5><ol><li><code>[]</code> 表示不捕获任何值</li><li><code>[var]</code> 表示按值捕获变量 <code>var</code></li><li><code>[=]</code> 表示按值捕获父作用域的所有变量</li><li><code>[&amp;var]</code> 表示按引用捕获变量 <code>var</code></li><li><code>[&amp;]</code> 表示按引用捕获父作用域的所有变量</li><li><code>[this]</code> 表示捕获对象成员 <ul><li>注意, 此处不仅是捕获指针 <code>this</code></li><li>如果 <code>this</code> 被捕获, 将可以直接访问类的成员, 不需要通过 <code>this</code> 指针</li><li>类函数内定义的 <code>lambda</code> 表达式视为类的友元, 因此捕获 <code>this</code> 后可以直接访问私有成员</li><li><code>[=]</code> 将隐式地捕获 <code>this</code></li></ul></li><li><code>[=, &amp;var1, &amp;var2]</code> 表示引用捕获 <code>var1</code> 与 <code>var2</code>, 按值捕获其他变量</li><li><code>[&amp;, var1, var2]</code> 表示按值捕获 <code>var1</code> 与 <code>var2</code>, 引用捕获其他变量</li></ol><ul><li>不允许重复捕获, 如 <code>[=, var]</code>, 将导致错误</li><li>捕获的本质为将捕获的值作为对象成员保存在 <code>lambda</code> 表达式所生成的类中</li></ul><h5 id="可变规格" tabindex="-1"><a class="header-anchor" href="#可变规格" aria-hidden="true">#</a> 可变规格</h5><ul><li>目前有标识符 <code>mutable</code></li><li>没有 <code>mutable</code> 时, 认为重载 <code>()</code> 运算符的函数为 <code>const</code>, 因此无法修改捕获的值 (即对象成员)</li><li>使用 <code>mutable</code> 后, 重载 <code>()</code> 运算符的函数没有修饰, 可以修改捕获值</li></ul><h5 id="定义-lambda-表达式" tabindex="-1"><a class="header-anchor" href="#定义-lambda-表达式" aria-hidden="true">#</a> 定义 lambda 表达式</h5><h6 id="使用-auto-语法" tabindex="-1"><a class="header-anchor" href="#使用-auto-语法" aria-hidden="true">#</a> 使用 auto 语法</h6><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">auto</span> add <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="函数包装器" tabindex="-1"><a class="header-anchor" href="#函数包装器" aria-hidden="true">#</a> 函数包装器</h6><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> add <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要将 lambda 表达式作为函数的参数, 则需要使用 <code>std::function</code></p><h5 id="lambda-表达式适用范围" tabindex="-1"><a class="header-anchor" href="#lambda-表达式适用范围" aria-hidden="true">#</a> lambda 表达式适用范围</h5><ol><li>可以在函数内定义 lambda 表达式</li><li>可以嵌套定义 lambda 表达式</li><li>利用 <code>function</code>, 可以将 lambda 表达式作为参数传递</li><li>lambda 表达式可以配合模板使用</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">print_all</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">&amp;</span> v<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> n<span class="token punctuation">)</span> 
	<span class="token punctuation">{</span> 
		cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> 
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="lambda-表达式应用" tabindex="-1"><a class="header-anchor" href="#lambda-表达式应用" aria-hidden="true">#</a> lambda 表达式应用</h5><p>在头文件 <code>&lt;algorithm&gt;</code> 中, 有与 lambda 表达式配合的函数</p><ol><li><code>for_each</code> 函数中使用了 lambda 表达式遍历数据结构</li><li><code>find_if</code> 函数中使用了 lambda 遍历数据结构查找符合的元素</li><li><code>sort</code> 规定 <code>sort</code> 的比较函数</li></ol><h4 id="函数包装模板" tabindex="-1"><a class="header-anchor" href="#函数包装模板" aria-hidden="true">#</a> 函数包装模板</h4><ul><li>定义于头文件 <code>&lt;functional&gt;</code></li><li>可用于包装 函数, 函数指针, 函数对象 (重载 <code>()</code> 运算符), lambda 表达式</li><li>需要在 <code>function</code> 的模板中定义函数的返回值与参数</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span>返回值<span class="token punctuation">(</span>参数 <span class="token number">1</span> 类型<span class="token punctuation">,</span> 参数 <span class="token number">2</span> 类型<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="包装一般函数" tabindex="-1"><a class="header-anchor" href="#包装一般函数" aria-hidden="true">#</a> 包装一般函数</h5><ol><li>对于普通函数, 直接使用 <code>函数名</code></li><li>对于模板函数, 使用 <code>函数名&lt;模板参数&gt;</code></li><li>对于静态成员, 使用 <code>类名::函数名</code></li></ol><h5 id="其他包装" tabindex="-1"><a class="header-anchor" href="#其他包装" aria-hidden="true">#</a> 其他包装</h5><ol><li>对于 lambda 表达式, 直接等于号构造</li><li>对于空函数, 以 <code>nullptr</code> 作为参数传入, 此时调用将导致异常</li><li>对于函数对象, 以函数对象的实例作为参数传入</li></ol><h5 id="bind-函数" tabindex="-1"><a class="header-anchor" href="#bind-函数" aria-hidden="true">#</a> bind 函数</h5>`,30),F={href:"https://learn.microsoft.com/zh-cn/cpp/standard-library/functional-functions?view=msvc-170",target:"_blank",rel:"noopener noreferrer"},P=p(`<h6 id="包装一般函数-1" tabindex="-1"><a class="header-anchor" href="#包装一般函数-1" aria-hidden="true">#</a> 包装一般函数</h6><p><code>bind(函数指针, 函数参数)</code></p><ul><li>可以指定具体的函数参数, 也可以使用占位符 <code>placeholders::_n</code> (从 1 开始)</li><li>当使用占位符时, 将作为返回函数的参数出现</li><li>被包装函数有多少个参数时, 给出多少个参数 / 占位符<br> eg.</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">// 此时 fun 相当于函数</span>
	<span class="token comment">// fun(int a){return a + 10;}</span>
	function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> fun <span class="token operator">=</span>
		<span class="token function">bind</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span> placeholders<span class="token double-colon punctuation">::</span>_1<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="包装成员函数" tabindex="-1"><a class="header-anchor" href="#包装成员函数" aria-hidden="true">#</a> 包装成员函数</h6><p><code>bind(成员函数指针, 对象实例指针, placeholders::_1, ...)</code></p><ul><li>其他与一般函数类似, 但第一个参数为对象实例指针</li></ul><h3 id="常量表达式" tabindex="-1"><a class="header-anchor" href="#常量表达式" aria-hidden="true">#</a> 常量表达式</h3>`,8),N={href:"https://learn.microsoft.com/zh-cn/cpp/cpp/constexpr-cpp?view=msvc-170",target:"_blank",rel:"noopener noreferrer"},U=p(`<ol><li>使用关键字 <code>constexper</code> 表示, 可用于修饰变量, 函数, 构造函数, 模板等</li><li>常量表达式将会在编译时就进行运算, 以此减少运行时的消耗</li><li>大部分情况下, 常量表达式等价于常量 const</li></ol><h4 id="constexpr-变量" tabindex="-1"><a class="header-anchor" href="#constexpr-变量" aria-hidden="true">#</a> constexpr 变量</h4><ol><li>常量表达式变量必须是文本类型, 即满足以下规则的类型 <ol><li><code>void</code></li><li>标量类型 (<code>int</code> 等)</li><li>引用, 指针(定义为 <code>constexpr</code> 时, 指针本身也视为常量, 以此 <code>constexpr const char*</code> 表示指向的值不能改变, 指针本身也不可改变)</li><li>以上类型的数组</li><li>具有 constexper 构造函数且不移动或复制构造的类, <mark>并且使用默认构造函数</mark></li></ol></li><li>常量表达式必须在声明时初始化</li><li>类必须使用 constexper 构造函数初始化, 并且 constexper 构造函数必须是内联函数 (定义在类体内)</li><li>初始化值必须是 const 或 constexper 及其函数 / 计算结果</li><li>注意常量表达式不可用于修饰成员, 只有构造函数是常量表达式即可</li></ol><h4 id="constexpr-函数" tabindex="-1"><a class="header-anchor" href="#constexpr-函数" aria-hidden="true">#</a> constexpr 函数</h4><ol><li>constexpr 函数是在使用需要它的代码时，可在编译时计算其返回值的函数</li><li>当用函数参数为 constexpr 时, 将在编译时计算结果, 返回 constexpr</li><li>否则将和一般函数相同, 在运行时计算</li><li>constexpr 函数将通过隐式方式 <code>inline</code></li><li>constexpr 函数具有以下要求 <ol><li>参数为按值传递或常量引用, 常量引用数组</li><li>允许递归, 循环语句, <code>if</code>, <code>switch</code> 等</li><li>不允许 <code>try</code>, <code>goto</code></li></ol></li></ol><h3 id="constexpr-实例" tabindex="-1"><a class="header-anchor" href="#constexpr-实例" aria-hidden="true">#</a> constexpr 实例</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 计算乘方, 使用常量引用传递值</span>
<span class="token keyword">constexpr</span> <span class="token keyword">float</span> <span class="token function">exp2</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">float</span><span class="token operator">&amp;</span> x<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span>
        n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token function">exp2</span><span class="token punctuation">(</span>x <span class="token operator">*</span> x<span class="token punctuation">,</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">:</span>
        <span class="token function">exp2</span><span class="token punctuation">(</span>x <span class="token operator">*</span> x<span class="token punctuation">,</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 获取数组长度</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token operator">&gt;</span>
<span class="token keyword">constexpr</span> <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token function">T</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> N<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 递归</span>
<span class="token keyword">constexpr</span> <span class="token keyword">int</span> <span class="token function">fac</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> n <span class="token operator">*</span> <span class="token function">fac</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 构造函数</span>
<span class="token keyword">class</span> <span class="token class-name">Foo</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">constexpr</span> <span class="token keyword">explicit</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_i</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">constexpr</span> <span class="token keyword">int</span> <span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> _i <span class="token operator">+</span> _c<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> _i<span class="token punctuation">;</span>

	<span class="token keyword">static</span> <span class="token keyword">constexpr</span> <span class="token keyword">int</span> _c <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// foo is const:</span>
    <span class="token keyword">constexpr</span> Foo <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// foo = Foo(6); //Error!</span>

    <span class="token comment">// Compile time:</span>
    <span class="token keyword">constexpr</span> <span class="token keyword">float</span> x <span class="token operator">=</span> <span class="token function">exp2</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">constexpr</span> <span class="token keyword">float</span> y <span class="token punctuation">{</span> <span class="token function">exp2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">constexpr</span> <span class="token keyword">int</span> val <span class="token operator">=</span> foo<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">constexpr</span> <span class="token keyword">int</span> f5 <span class="token operator">=</span> <span class="token function">fac</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function L(M,z){const s=o("ExternalLinkIcon");return c(),l("div",null,[d,r,u,n("ol",null,[n("li",null,[n("a",k,[a("可变参数教程"),e(s)])]),m]),h,n("ul",null,[v,b,g,n("li",null,[a("具体例子参见"),n("a",y,[a("此链接"),e(s)])])]),f,n("p",null,[a("将输出结果 World!Hello"),w,a(" 详细可"),n("a",x,[a("参考"),e(s)])]),_,n("ul",null,[n("li",null,[n("a",T,[a("字符串处理函数与输入格式化"),e(s)])]),n("li",null,[n("a",A,[a("sprintf 等格式化字符串函数参考"),e(s)])]),n("li",null,[n("a",q,[a("读取变长参数的格式化字符串函数"),e(s)])])]),B,n("p",null,[n("a",C,[a("其他标准异常"),e(s)])]),W,n("p",null,[n("a",j,[a("参考"),e(s)])]),S,n("p",null,[n("a",E,[a("参考"),e(s)])]),V,n("p",null,[n("a",F,[a("参考"),e(s)]),a(" bind 函数是一个用于包装函数, 将函数缩小化的工具, 也可用于绑定成员函数")]),P,n("p",null,[n("a",N,[a("参考"),e(s)])]),U])}const D=t(i,[["render",L],["__file","base.html.vue"]]);export{D as default};
