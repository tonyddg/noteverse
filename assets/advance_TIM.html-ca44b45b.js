import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as e,e as a}from"./app-8c5ce49e.js";const C={},r=a('<h1 id="高级计时器-tim" tabindex="-1"><a class="header-anchor" href="#高级计时器-tim" aria-hidden="true">#</a> 高级计时器 TIM</h1><h2 id="外设介绍" tabindex="-1"><a class="header-anchor" href="#外设介绍" aria-hidden="true">#</a> 外设介绍</h2><h3 id="功能框架" tabindex="-1"><a class="header-anchor" href="#功能框架" aria-hidden="true">#</a> 功能框架</h3><h4 id="时钟源" tabindex="-1"><a class="header-anchor" href="#时钟源" aria-hidden="true">#</a> 时钟源</h4><p>作为计时器时钟源 CK_PSC</p><ol><li>内部时钟源 即 72MHz(输出 PWM 时使用) <ul><li>Slave Mode 设为 Disable</li><li>仅设置 Clock Source</li></ul></li><li>外部输入引脚 TIx (外部模式 1) 0. 通过寄存器 CCMRx 控制 <ol><li>选择输入通道(共 4 个), 由位 CCxS 控制</li><li>时钟信号来自定时器的输入引脚, 可通过滤波器去出干扰或降频, 由位 ICxF 控制</li><li>边沿检测来自滤波器的输出信号, 决定是上升沿有效还是下降沿, 由位 CCxP 与 CCxNP 控制</li><li>触发模式选择</li><li>模式选择, 配置 SMCR 的位 SMS, 选择外部模式 1</li><li>使能计时器</li></ol></li><li>外部触发输入(外部模式 2) 0. 通过寄存器 SMCR 控制 <ol><li>时钟信号来自定时器特定输入通道(ETR 引脚)</li><li>触发极性 触发信号为选择上升沿有效还是下降沿, 由 ETP 配置</li><li>预分频 触发信号频率不能超过 72/4 MHz, 触发频率很高时, 需要分频, 由 ETPS 配置</li><li>滤波器 当信号频率过高时, 需要通过滤波器重新采样</li><li>模式选择, 配置位 ECE 为 1, 选择外部时钟模式 2</li><li>使能计时器</li></ol></li><li>内部触发输入</li></ol><h4 id="时基单元" tabindex="-1"><a class="header-anchor" href="#时基单元" aria-hidden="true">#</a> 时基单元</h4><p>接收从 CK_PSC 输入的信号, 完成计时器的功能</p><ol><li>预分频器 接收 CK_PSC 后, 经过预分频器输出 CK_CNT, 驱动计数. 最多可实现 1 - 65536 分频, 由寄存器 PSC 配置</li><li>计数器 <ol><li>递增计数模式 <ol><li>从 0 开始计数, 直到与 ARR 寄存器的值相同, 产生上溢时间并从 0 重新开始</li><li>启用重复计数器后, 计时没从 0 开始, 重复计数器减 1, 为 0 时产生更新事件(UEV)</li></ol></li><li>递减计数模式 <ul><li>从 ARR 开始计数, 为 0 时重新开始, 生成下溢事件, 重复计数器同 1</li></ul></li><li>中心对齐计数模式 <ol><li>从 0 开始递增, 到 ARR - 1 后生成上溢事件, 后从 ARR 开始递减到 1, 生成下溢事件.</li><li>每次上溢事件与下溢事件均会产生更新事件</li></ol></li></ol></li><li>自动重载寄存器 ARR <ol><li>存放与计数器 CNT 比较的数</li><li>CR1 寄存器的位 ARPE 置 1 可实现影子寄存器功能, 只在事件更新时, 只有在时间更新后 ARR 值才会被改变</li></ol></li><li>重复计时器 RCR <ol><li>仅限于高级计时器</li><li>一般计时器, 每次上溢事件与下溢事件均会产生更新事件</li><li>高级计时器要求 RCR 为 0 才产生更新事件</li></ol></li></ol><h4 id="输入捕获" tabindex="-1"><a class="header-anchor" href="#输入捕获" aria-hidden="true">#</a> 输入捕获</h4><p>用于计算输入信号的脉宽, 频率或占空比</p><ol><li>基本原理 <ul><li>当捕获到信号的跳变沿后, 把计数器 CNT 的值保存到寄存器 CCR(因此, CCR 记录了发生跳变时的 CNT) 中, 把两次 CCR 的值相减得到脉宽或频率</li></ul></li><li>输入通道 <ul><li>输入被测量的通道, TIx(通常是 channel x 复用), 对应引脚查表</li></ul></li><li>输入滤波器 <ol><li>滤波器的采样频率必须大于等于输入信号的两倍</li><li>由 CR1 寄存器的位 CKD 与 CCMR 寄存器的位 ICxF 控制</li><li>采样频率由 CK_INT 或 DTS 分频决定</li></ol></li><li>捕获通道 <ol><li>输入信号经过不同处理后产生的信号映射到捕获通道 ICx 上</li><li>通过不同的映射方法实现不同的测量效果</li><li>映射关系由寄存器 CCMRx 的位 CCxS 配置</li></ol></li><li>预分频器 <ul><li>对 ICx 信号分频, 由寄存器 CCMRx 的位 ICxPSC 配置</li></ul></li><li>捕获寄存器 <ol><li>对被捕获的信号进行处理</li><li>第一次捕获后, 寄存器的信号保存到捕获寄存器 CCR 中, 产生 CCxI 中断, 读取 CCR 的值可以清除中断</li><li>第二次捕获(第一次捕获未读取), 产生捕获溢出事件 CCxOF, 需要软件清零</li></ol></li></ol><h4 id="输出比较" tabindex="-1"><a class="header-anchor" href="#输出比较" aria-hidden="true">#</a> 输出比较</h4><ul><li>通过计时器的外部引脚对外输出信号, 可用于输出 PWM</li><li>由于 PWM 的宽度通过与计数器比较实现, 因此称为比较输出</li></ul><ol><li>比较寄存器 CCR(Capture / Compare) <ol><li>当计数器 CNT 的值与比较寄存器相同时, 改变输出参考信号 OCxREF 的极性 <ul><li>通过设置比较器寄存器的值, 实现脉冲宽度的调整(SetCompare)</li></ul></li><li>产生比较中断 CCxI</li><li>输出参考信号 OCxREF 经一系列的控制后, 称为真正的输出信号 OCx/OCxN</li></ol></li><li>死区发生器 <ol><li>用于生成两路互补信号 OCx/OCxN 与半桥驱动电路中</li><li>由于 MOS 开启与关闭需要时间, 通过插入死区时间等待 MOS 管, 否则会发生短路</li><li>死区时间由 MOS 管的工艺调节</li></ol></li><li>输出控制 <ol><li>参考信号分为两路, 一路是原始信号, 一路是反向信号, 具体由 CCER 的位 CCxP 与 CCxNP 控制</li><li>经过极性选择后, 输出到外部引脚 CHx/CHxN 由寄存器 CCER 的位 CxE/CxNE 控制</li></ol></li><li>输出引脚 <ol><li>仅高级计时器有互补引脚 CHxN, 其他仅有输出引脚 CHx 2.共有 CH1-4 4 个输出引脚</li></ol></li></ol><h4 id="断路功能" tabindex="-1"><a class="header-anchor" href="#断路功能" aria-hidden="true">#</a> 断路功能</h4><p>即电机控制的刹车功能, 仅高级计时器有此功能</p><h3 id="常用缩写解释" tabindex="-1"><a class="header-anchor" href="#常用缩写解释" aria-hidden="true">#</a> 常用缩写解释</h3><ol><li>IC Input Channel</li><li>OC Output Channel</li><li>CC Capture/Compare Channel</li></ol><h2 id="库函数配置" tabindex="-1"><a class="header-anchor" href="#库函数配置" aria-hidden="true">#</a> 库函数配置</h2><h3 id="基本-tim-初始化结构体" tabindex="-1"><a class="header-anchor" href="#基本-tim-初始化结构体" aria-hidden="true">#</a> 基本 TIM 初始化结构体</h3><p>用于非基本计时器 TIM_TimeBaseInitTypeDef</p><ol><li>TIM_Prescaler 与分频器 即 TIM_PSC 的大小, 可实现 1 - 65536 分频, <mark>实际为 TIM_Prescaler + 1 分频</mark></li><li>TIM_CounterMode 计数模式, 可设置向上, 向下以及中心对称模式</li><li>TIM_Period 定时器周期 即设定自动重载寄存器的值, 范围为 0 - 65535, <mark>每 TIM_Period + 1 个计数周期, 产生一次中断</mark></li><li>TIM_ClockDivision 时钟分频 设置定时器时钟 CK_INT, 死区发生器与滤波器采样的时钟分频, 可选 1, 2, 4 分频</li><li>TIM_RepetitionCounter 重复计数器, 仅用于高级计时器</li></ol><h3 id="tim-输出功能初始化结构体" tabindex="-1"><a class="header-anchor" href="#tim-输出功能初始化结构体" aria-hidden="true">#</a> TIM 输出功能初始化结构体</h3><p>用于输出功能 TIM_OCInitTypeDef</p><ol><li>TIM_OCMode 输出模式选择, 常用为 PWM1 与 PWM2</li><li>TIM_OutputState 比较输出使能, 决定是否通过外部引脚输出</li><li>TIM_OutputNState 比较互补输出使能, 决定是否输出互补信号</li><li>TIM_Pulse 比较输出的脉冲宽度 TIM_Pulse * 计数器周期</li><li>TIM_OCPloarity 输出极性, 决定 OCx_REF 为有效电平时, 输出的电平</li><li>TIM_OCNPloarity 互补输出的极性</li><li>TIM_IdleState 空闲状态下的输出信号</li></ol><h3 id="tim-pwm-初始化流程" tabindex="-1"><a class="header-anchor" href="#tim-pwm-初始化流程" aria-hidden="true">#</a> TIM PWM 初始化流程</h3><ol start="0"><li>时钟初始化</li><li>输出引脚 GPIO 设为 AF_PP 推挽复用</li><li>TIM_TimeBaseInit 设置 TIM 的频率</li><li><mark>TIM_OCxInit</mark> 初始化 TIM 输出, x 为选择的输出通道</li><li>TIM_OCxPreloadConfig 配置影子寄存器功能(ARR 值如何改变)</li><li>TIM_Cmd 启动定时器</li><li>TIM_CtrlPWMOutputs 主输出使能(用于高级定时器)</li><li>TIM_SetCompare1 修改脉频宽度</li></ol><h3 id="ll-库配置" tabindex="-1"><a class="header-anchor" href="#ll-库配置" aria-hidden="true">#</a> LL 库配置</h3><ol><li>Slave Mode - Disable</li><li>Clock Source - Internal Clock</li><li>Chnnelx - PWM Generation CHx</li><li>设置计数周期长度(重载寄存器/计数器时钟)/PWM模式(PWM 1 为普通模式, PWM2 为与 PWM 1 互补输出模式) <ul><li>计数器时钟频率尽量大, 重载寄存器的值也尽量大, 实现更精确地控制占空比</li><li>一个 TIM 的四个通道可输入或输出, 但捕捉/采样周期相同</li></ul></li><li>LL_TIM_CC_EnableChannel 启动比较输出功能</li><li>LL_TIM_EnableCounter 启动计数器(开始输出)</li><li>LL_TIM_EnableAllOutputs 启动输出(用于高级计时器)</li><li>LL_TIM_OC_SetCompareCHx 设置比较寄存器的值, 即改变脉冲宽度</li></ol><h3 id="输入捕捉-初始化流程" tabindex="-1"><a class="header-anchor" href="#输入捕捉-初始化流程" aria-hidden="true">#</a> 输入捕捉 初始化流程</h3><ol><li>Slave Mode - Disable</li><li>Clock Source - Internal Clock</li><li>Chnnelx - PWM Generation CHx</li><li>设置采样周期/捕捉触发条件(上升沿/下降沿)</li><li>LL_TIM_EnableIT_CCx 使能中断 CCx, 用于当通道 x 触发后产生中断</li><li>LL_TIM_IC_GetCaptureCHx 获取捕获寄存器 CCRx 保存的值, 得到触发时计数器的值 <ol><li>捕获沿同一个方向的触发两次, 相减得到 脉冲周期 = 采样周期 X 两次差值</li><li>捕获上升沿时的计数后, 改为捕获下降沿, 相减得到 高电平长度 = 采样周期 X 两次差值</li><li>脉冲周期 / 高电平长度 = 占空比</li></ol></li><li>捕获触发中断有关函数 <ol><li>LL_TIM_EnableIT_CCx 启用捕获中断, 在捕获到触发时产生中断</li><li>LL_TIM_IsActiveFlag_CCx CCx 中断是否激活</li><li>LL_TIM_ClearFlag_CCx 清除 CCx 中断标志</li></ol></li><li>LL_TIM_IC_SetPolarity 设置捕获极性, 用于捕获高电平长度</li><li>LL_TIM_CC_EnableChannel 启动比较输出功能</li><li>LL_TIM_EnableCounter 启动计数器(开始输出)</li></ol><h2 id="踩坑笔记" tabindex="-1"><a class="header-anchor" href="#踩坑笔记" aria-hidden="true">#</a> 踩坑笔记</h2><ol><li>计时器没有使能函数 LL_TIM_ENABLE, 要使能计数器, TIM 才能正常工作 LL_TIM_EnableCounter; 关闭计数器即暂停</li><li>没有捕捉时调用 LL_TIM_GetCapture 可能导致异常</li></ol>',34),o=[r];function t(h,n){return i(),e("div",null,o)}const M=l(C,[["render",t],["__file","advance_TIM.html.vue"]]);export{M as default};
