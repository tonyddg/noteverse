import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as t,c as r,b as e,d as o,a as l,w as i,e as n}from"./app-8c5ce49e.js";const u={},p=n('<h1 id="ros-编程基础" tabindex="-1"><a class="header-anchor" href="#ros-编程基础" aria-hidden="true">#</a> ROS 编程基础</h1><h2 id="ros-节点" tabindex="-1"><a class="header-anchor" href="#ros-节点" aria-hidden="true">#</a> ROS 节点</h2><p>在 ROS 中节点 (Node) 即一个独立运行任务的可执行文件<br> 节点之间通过<a href="#ros-%E8%AF%9D%E9%A2%98">话题</a>或<a href="#ros-%E6%9C%8D%E5%8A%A1">服务</a>等方式建立通讯</p><p>节点之中, 存在一个主节点 (Master), 也称为节点管理器, 该节点能够完成任务 * 帮助各个节点建立联系 * 为节点提供公共的参数服务器 * 日志节点 <code>rosout</code> 因此, 如果没有主节点, 虽然现有的节点通讯不会中断, 但节点之间无法再次建立新的联系, 并且节点也无法访问参数服务器</p><h3 id="运行节点" tabindex="-1"><a class="header-anchor" href="#运行节点" aria-hidden="true">#</a> 运行节点</h3><p>使用以下方式运行节点</p>',6),h=e("li",null,[e("code",null,"roscore"),o(" 运行主节点 "),e("ul",null,[e("li",null,"主节点是运行其他节点的基础"),e("li",null,"通常需要在主节点运行后 1s 再启动其他节点")])],-1),_=e("code",null,"rosrun <package_name> <node_name> [args]",-1),m=e("li",null,[e("code",null,"package_name"),o(" 节点所在的功能包 (确保功能包以导入环境)")],-1),g=e("li",null,[e("code",null,"node_name"),o(" 节点程序名称 "),e("ul",null,[e("li",null,"对于 C++, 即 CMake 中设置的构建目标"),e("li",null,"对于 Python, 即脚本文件名 (包含后缀, 确保给予运行权限)")])],-1),E=n('<p>通常节点即一个不断循环运行的程序, 如果要退出节点程序, 可使用 <kbd>Ctrl</kbd><kbd>C</kbd></p><h3 id="节点管理" tabindex="-1"><a class="header-anchor" href="#节点管理" aria-hidden="true">#</a> 节点管理</h3><p>使用命令 <code>rosnode</code> 管理节点, 常用的操作如下</p><ul><li><code>rosnode list</code> 列出当前正在运行中的所有节点</li><li><code>rosnode ping [-c&lt;x&gt;] &lt;node_name&gt;</code> 测试目标节点是否正常 <ul><li><code>node_name</code> 被测试的节点, 需要包含根地址 <code>/</code></li><li><code>-c&lt;x&gt;</code> 测试 <code>x</code> 次, 默认不断测试</li></ul></li><li><code>rosnode info &lt;node_name&gt;</code> 获取节点的详细信息</li><li><code>rosnode kill &lt;node_name&gt;</code> 关闭指定节点</li></ul><h3 id="节点可视化管理工具" tabindex="-1"><a class="header-anchor" href="#节点可视化管理工具" aria-hidden="true">#</a> 节点可视化管理工具</h3><p>以下为几个常用的节点可视化管理工具<br> 这些工具必须在<a href="#ros-%E8%8A%82%E7%82%B9">主节点</a>启动后才能运行</p><ul><li><code>rosrun rqt_logger_level rqt_logger_level</code> 设置各个节点日志等级 <ul><li>设置的是节点能输出的最低优先级, 通常警告等级越高优先级越高</li><li>通常与 <code>rqt_console</code> 配合使用</li></ul></li><li><code>rosrun rqt_console rqt_console</code> 显示所有节点的日志 (输出) 信息</li><li><code>rosrun rqt_graph rqt_graph</code> 显示所有节点之间的通信关系</li></ul><h3 id="launch-文件" tabindex="-1"><a class="header-anchor" href="#launch-文件" aria-hidden="true">#</a> Launch 文件</h3>',8),y=e("br",null,null,-1),k=e("code",null,".launch",-1),A={href:"https://wiki.ros.org/roslaunch/XML",target:"_blank",rel:"noopener noreferrer"},b=n('<p>launch 文件中的常用标签有</p><ul><li><code>launch</code> launch 文件的根标签, 不可缺少</li><li><code>group</code> 节点组标签 <ul><li>标签内容为节点组下的节点</li><li>属性 <code>ns</code> 节点组名称</li><li>节点必须位于节点组下, 通过节点组分离各节点的命名空间, 不同节点组中允许有同名的节点 (同一节点组下则不允许)</li></ul></li><li><code>node</code> 节点标签, 与 <a href="#%E8%BF%90%E8%A1%8C%E8%8A%82%E7%82%B9">rosrun</a> 类似 <ul><li>属性 <code>pkg</code> 节点所在的功能包</li><li>属性 <code>type</code> 节点程序名称</li><li>属性 <code>name</code> 节点名称</li><li>属性 <code>output</code> 节点日志设置 <ul><li><code>log</code> 输出到日志文件中 (默认)</li><li><code>screen</code> 输出到屏幕上</li></ul></li><li>属性 <code>respawn</code> 节点退出后是否尝试重启节点 <ul><li><code>true</code> 是, <code>false</code> 否 (默认)</li></ul></li><li>属性 <code>required</code> 节点是否必须, 当必须节点退出时, 整个 roslaunch 启动的节点全部退出 <ul><li><code>true</code> 是, <code>false</code> 否 (默认)</li></ul></li><li>属性 <code>respawn_delay</code> 节点启动延迟, 默认为 0</li><li>属性 <code>args</code> 传递给节点的命令行参数, 默认为空</li><li>该标签可以是自闭和, 也可包含内容, 内容为设置标签</li><li>节点标签必须位于节点组下, 在 launch 文件中, 节点的名称与程序名分离, 因此允许有多个节点程序运行 (但名称不能相同)</li></ul></li><li><code>include</code> 引用标签 <ul><li>属性 <code>file</code> 其他 launch 文件的路径, 可使用此方法引用其他 launch 文件</li><li>使用 <code>$(find 功能包名)/launch/...</code> 可使用绝对路径引用其他功能包的文件</li><li>该标签为自闭和标签, 没有内容</li></ul></li><li><code>arg</code> 启动参数标签 <ul><li>属性 <code>name</code> 启动参数名称</li><li>属性 <code>default</code> 启动参数默认值</li><li>在其他标签参数中, 可使用 <code>$(arg &lt;启动参数名&gt;)</code> 表示启动参数</li><li>在 <code>roslaunch</code> 命令结尾使用 <code>&lt;参数名&gt;:=&lt;参数值&gt;</code> 可传入启动参数</li><li>该标签为自闭和标签, 没有内容</li></ul></li></ul><p>launch 文件中有以下的设置标签<br> 当在根标签下, 设置将对全局生效, 当作为 <code>node</code> 或 <code>group</code> 标签的内容时, 设置仅对节点或节点组下的节点生效</p><ul><li><code>param</code> 设置参数服务器中的参数, 参见 <a href="#launch-%E6%96%87%E4%BB%B6%E5%AF%BC%E5%85%A5%E5%8F%82%E6%95%B0">launch 文件导入参数</a></li><li><code>rosparam</code> 加载或导出参数服务器中的参数, 参见 <a href="#launch-%E6%96%87%E4%BB%B6%E5%AF%BC%E5%85%A5%E5%8F%82%E6%95%B0">launch 文件导入参数</a></li><li><code>remap</code> 名称重映射, 参见<a href="#%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4">命名空间</a></li></ul><p>launch 文件中表示参数时, 可使用表达式 <code>$(&lt;exp&gt;)</code>, 将解析表达式并以表达式的结果作为参数<br> 常用的有</p><ul><li><code>$(arg &lt;val&gt;)</code> 获取启动参数 <code>val</code> 的值</li><li><code>$(find &lt;pkg&gt;)</code> 获取功能包 <code>pkg</code> 的根路径, 一般用于 <code>include</code> 与 <code>rosparm</code> 标签导入特定功能包下的文件</li><li><code>$(anon &lt;name&gt;)</code> 基于节点名称 <code>name</code>, 生成一个匿名名称, 一般用于 <code>node</code> 标签的 <code>name</code> 属性</li><li><code>$(optenv &lt;env_val&gt; &lt;default&gt;)</code> 寻找环境变量 <code>env_val</code> 的值, 如果不存在则使用 <code>default</code> 代替</li></ul><p>使用命令 <code>roslaunch [--nodes] [--screen] &lt;package_name&gt; &lt;launch_name&gt; [args]</code> 运行 Launch 文件启动节点</p><ul><li><code>package_name</code> launch 文件所在的功能包</li><li><code>launch_name</code> 功能包下的 launch 文件名, 需要后缀 <code>.launch</code></li><li><code>--nodes</code> 仅打印 launch 文件下将启动的节点名</li><li><code>--screen</code> 强制将节点信息打印到终端上</li><li><code>args</code> 传递给 launch 文件的参数, 见 <code>arg</code> 标签</li></ul><h3 id="基于-python-的节点编程" tabindex="-1"><a class="header-anchor" href="#基于-python-的节点编程" aria-hidden="true">#</a> 基于 Python 的节点编程</h3>',9),f=e("li",null,[o("已经给予脚本可执行权限, 如 "),e("code",null,"chmod u=x '*.py'")],-1),B=e("ul",null,[e("li",null,[e("code",null,"#!/usr/bin/python3"),o(" (使用 Python3, 如果使用 Python2, 则改为 "),e("code",null,"python"),o(")")]),e("li",null,[e("code",null,"# -*- coding: UTF-8 -*-"),o(" (使用 UTF-8)")])],-1),v=n("<li>将 Python 脚本安装到功能包的 <code>CMakeLists.txt</code> 中, 具体步骤为 <ul><li>在功能包下 <code>CMakeLists.txt</code> 中找到关于函数 <code>catkin_install_python</code> 的注释</li><li>将注释取消, 并在参数 <code>PROGRAMS</code> 后填入脚本相对功能包的路径, 并删除原有的示例内容</li><li>在工作空间下运行 <code>catkin_make</code> 使更改生效 (与 C++ 不同, 仅修改 <code>CMakeLists.txt</code> 后需要运行)</li></ul></li>",1),x=n('<li>将 Python 程序作为节点时, 需要导入包 <code>import rospy</code>, 该包具有以下常用的函数 (更多见 <a href="#rospy-%E9%AB%98%E7%BA%A7%E5%BA%94%E7%94%A8">rospy 高级应用</a>) <ul><li><code>rospy.init_node(name, *, anoymous)</code> 启动节点 (不一定要在程序开始时立刻启动) <ul><li><code>name</code> 节点名称, 最好仅包含字母数字与下划线 (当出现同名节点时, 将导致后创建的节点强制退出)</li><li><code>anoymous</code> 是否要向节点末尾添加随机数, 保证节点名称唯一</li></ul></li><li><code>rospy.is_shutdown()</code> 判断节点是否被关闭, 但被关闭时返回 <code>True</code><ul><li>节点通常为一个具有死循环的任务, 直到节点被要求关闭时才会退出循环</li><li>该函数的作用就是接收节点关闭的通知, 因此通常将节点的主程序写入循环 <code>while not rospy.is_shutdown():</code> 中</li></ul></li><li><code>rospy.rate</code> ROS 频率控制类 <ul><li>频率控制类用于控制节点主程序的运行频率, 使节点以要求的频率运行</li><li>类的构造函数为 <code>rate = rospy.Rate(hz)</code><ul><li><code>hz</code> 目标频率的大小, 一般为 10hz</li></ul></li><li>类的方法 <code>rospy.Rate.sleep()</code> 休眠到指定频率 <ul><li>该方法一般位于主程序末尾, 使节点休眠一段时间, 以实现频率控制的目的</li></ul></li></ul></li><li><code>rospy.ROSInterruptException</code> 同时继承自 ros 错误与 Python 程序退出中断的异常 <ul><li>在运行主程序时, 除了 <code>rospy.is_shutdown()</code> 还需要通过捕获此异常来判断节点是否退出</li><li>注意代码运行到 <code>except</code> 或 <code>finally</code> 语句时, 均不能再使用 rospy 的有关函数, 因为节点已经退出</li><li>如果希望在退出时执行, 可使用 <a href="#rospy-%E4%B8%AD%E7%9A%84%E5%AE%9E%E7%94%A8%E5%87%BD%E6%95%B0">rospy.on_shutdown</a></li></ul></li></ul></li><li>编写节点时注意 <ul><li>对于节点中的死循环, 应当以 <code>not rospy.is_shutdown()</code> 为退出条件之一, 并且循环内应有休眠语句 <code>rospy.sleep(m)</code> 并取合适的休眠时长, 如果要求快速循环时则至少取 <code>m = 0.001</code> 或 <code>m = 0</code></li></ul></li>',2),w=n(`<p>因此, 对于任何 ROS 节点, 都具有如下的基本结构</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> rospy

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>

    <span class="token keyword">try</span><span class="token punctuation">:</span> 
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment"># 启动前准备与创建有关对象</span>

        rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token comment"># 启动节点</span>
        rate <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Rate<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment"># 创建频率控制对象</span>

        <span class="token keyword">while</span> <span class="token keyword">not</span> rospy<span class="token punctuation">.</span>is_shutdown<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment"># 节点主循环</span>

            rate<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 等待, 使主程序以指定的频率运行</span>
    <span class="token keyword">except</span> rospy<span class="token punctuation">.</span>ROSInterruptException<span class="token punctuation">:</span>
        <span class="token keyword">pass</span> <span class="token comment"># 当捕获到 ROS 异常或程序退出异常时退出节点 </span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),C=e("code",null,"rospy",-1),S={href:"https://wiki.ros.org/rospy",target:"_blank",rel:"noopener noreferrer"},q=n('<h2 id="ros-话题" tabindex="-1"><a class="header-anchor" href="#ros-话题" aria-hidden="true">#</a> ROS 话题</h2><p>ROS 中的话题 (Topic) 为一种节点间数据传输方式<br> 数据传输时, 节点分别扮演发布者 (Talker / Publisher) 与订阅者 (Listener / Subscriber), 发布者向话题发送消息 (Message) 并广播到所有订阅了这一话题的订阅者上<br> 对于一个话题, 允许有多个发布者与订阅者, 但是一个话题内的消息类型必须相同<br> 因此话题通常用于节点之间快速持续的信息传输<br> 如果将节点视为控制环节, 可以让节点 A 向 B 发送控制量, 同时接收来自 B 的反馈量, 实现闭环控制</p><p>其中消息为一种严格的数据类型, 每个话题所发布的消息具有固定的消息类型</p><ul><li>一般可使用功能包 <code>std_msgs</code> 所提供的基础消息类型</li><li>也可根据需要<a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B6%88%E6%81%AF">自定义消息</a></li></ul><h3 id="基于工具的话题应用" tabindex="-1"><a class="header-anchor" href="#基于工具的话题应用" aria-hidden="true">#</a> 基于工具的话题应用</h3><h4 id="基本命令行话题工具" tabindex="-1"><a class="header-anchor" href="#基本命令行话题工具" aria-hidden="true">#</a> 基本命令行话题工具</h4><p>使用命令 <code>rostopic</code> 管理正在运行的话题, 使用命令 <code>rosmsg</code> 查看消息类型的具体信息</p>',7),D=n("<li><code>rostopic list [-v]</code> 列出当前所有话题 <ul><li>选项 <code>-v</code> 列出话题及其所有订阅节点与发布节点信息</li></ul></li><li><code>rostopic echo &lt;topic_name&gt;</code> 订阅并滚动输出该话题下的内容 <ul><li><code>topic_name</code> 订阅的话题, 需要包含根地址 <code>/</code></li></ul></li>",2),P=e("code",null,"rostopic pub [-v] [-r <rate>] [-1] [-f <file>] <topic_name> <topic_type> -- <msg>",-1),F=n('<li><code>topic_name</code> 发布消息的话题, 需要包含根地址 <code>/</code></li><li><code>topic_type</code> 消息的类型, 消息类型一般没有根地址 <code>/</code></li><li><code>msg</code> 消息内容, 表示方法见<a href="#%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%AD%E8%A1%A8%E7%A4%BA-YAML">命令行中表示 YAML</a></li><li><code>-r &lt;rate&gt;</code> 以 <code>rate</code> 为频率发送消息, 默认为 10Hz</li><li><code>-1</code> 仅发送一次消息</li>',5),R=e("code",null,"-f <file>",-1),O=e("code",null,"file",-1),L=e("li",null,[e("code",null,"-v"),o(" 显示详细信息")],-1),N=e("li",null,[e("code",null,"--"),o(" 表明之后的命令参数为消息内容")],-1),M=e("li",null,[e("code",null,"rostopic hz <topic_name>"),o(" 获取话题 "),e("code",null,"topic_name"),o(" 中消息发布的频率")],-1),T=e("code",null,"rostopic type <topic_name>",-1),z=e("code",null,"topic_name",-1),I=e("code",null,"rosmsg",-1),$=e("code",null,"rosmsg",-1),Y=e("code",null,"rostopic type <topic_name> | rosmsg show",-1),G=e("li",null,[e("code",null,"rosmsg show <topic_type>"),o(" 获取消息类型 "),e("code",null,"topic_type"),o(" 的详细信息")],-1),U=n('<h4 id="图形话题工具" tabindex="-1"><a class="header-anchor" href="#图形话题工具" aria-hidden="true">#</a> 图形话题工具</h4><ul><li><code>rosrun rqt_plot rqt_plot</code> 启动消息检测工具 <ul><li>向输入框中输入 <code>&lt;topic_name&gt;/&lt;attr_name&gt;</code> 并回车, 可检测话题 <code>topic_name</code> 的消息中字段为 <code>attr_name</code> 的数据随时间的变化</li><li>选中 <code>autoscroll</code> 复选框, 可使图像随时间滚动</li><li>如果无法看到数据曲线, 先检查话题中是否有持续发送的消息, 再使用工具栏中的工具适当移动图像, 设置坐标轴范围等</li></ul></li></ul><h3 id="基于-python-的话题编程" tabindex="-1"><a class="header-anchor" href="#基于-python-的话题编程" aria-hidden="true">#</a> 基于 Python 的话题编程</h3><p>在编程中, 分别使用发布者对象 <code>rospy.Publisher</code> 与接收者 <code>rospy.Subscriber</code> 管理与实现节点发布消息与接收消息的功能<br> 一个节点允许有多个发布者对象与接收者对象, 以实现信息的多重与多向传递, 如反馈</p><p>对于发布者 Talker (Publisher), 可使用对象 <code>rospy.Publisher</code> 进行管理</p><ul><li>构造函数 <code>rospy.Publisher(name, data_class, *, queue_size)</code><ul><li><code>name</code> 消息发布到的话题名称, 详细规则见<a href="#%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4">命名空间</a></li><li><code>data_class</code> 消息类型, 表示方法见下文对消息使用的介绍</li><li><code>queue_size</code> 话题消息的缓冲队列长度, 一般为 10</li></ul></li><li>对象方法 <code>rospy.Publisher.publish(*args, **kwds)</code> 发布消息 <ul><li><code>args</code> 按消息字段的定义顺序确定消息内容, 与消息对象示例化类似, 见下文介绍</li><li><code>kwargs</code> 将消息的字段作为关键字, 与消息对象示例化类似</li><li>也可以直接将消息类型实例化的对象作为参数传入</li></ul></li></ul><p>对于订阅者 Listener (Subscriber), 可使用对象 <code>rospy.Subscriber</code> 进行管理</p><ul><li>构造函数 <code>rospy.Subscriber(name, data_class, callback)</code><ul><li><code>name</code> 订阅消息的话题名称, 详细规则见<a href="#%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4">命名空间</a></li><li><code>data_class</code> 消息类型, 要求同 <code>rospy.Publisher</code></li><li><code>callback</code> 接收到订阅消息时调用的回调函数, 该回调函数接收一个参数, 即订阅话题的消息对象, 使用方法见下文对消息使用的介绍<br> 对订阅消息的回调处理将在后台进行, 不会影响之后代码的运行</li></ul></li><li>对象方法 <code>rospy.Subscriber.unregister()</code> 取消订阅话题</li></ul><p>对于消息在 Python 中的使用 (以标准消息功能包 <code>std_msgs</code> 下的字符串消息 <code>String</code> 为例)</p><ul><li>消息的本质即一个具有多个统一字段, 每个字段有规定类型的数据结构</li><li>首先导入有关功能包或定义消息类型后, 使用 <code>catkin_make</code> 构建功能包</li><li>在 ROS 功能包同名的 Python 包下的 <code>msg</code> 模块内, 定义了与消息同名的类定义对象 <code>&lt;MsgName&gt;</code><br> 例如导入模块 <code>std_msgs.msg</code>, 通过 <code>std_msgs.msg.String</code> 即可表示消息类型 <code>String</code> 的类定义对象</li><li>消息类型的类定义对象可作为参数传递给类 <code>rospy.Publisher</code> 或 <code>rospy.Subscriber</code> 以确定使用的消息类型</li><li>通过消息类型的类定义对象可以构造特定消息对象, 构造函数为 <code>&lt;MsgName&gt;(*args, **kwds)</code><ul><li><code>args</code> 按消息字段的定义顺序以位置参数的方式确定消息内容</li><li><code>kwargs</code> 将消息的字段作为关键字, 字段下的内容作为参数确定消息内容 (推荐)</li><li>注意, 按位置与按关键字两种示例化方式只能使用其中一种</li><li>例如 <code>str_msg = std_msgs.msg.String(data = &quot;Hello&quot;)</code></li></ul></li><li>使用消息对象时, 可通过消息对象中与消息字段同名的对象属性访问消息中特定字段的值 <ul><li>例如 <code>str_msg.data</code> 可访问消息 <code>String</code> 的字段 <code>data</code></li></ul></li></ul><h3 id="自定义消息" tabindex="-1"><a class="header-anchor" href="#自定义消息" aria-hidden="true">#</a> 自定义消息</h3>',11),H=e("li",null,[o("功能包的自定义消息通常位于功能包的文件夹 "),e("code",null,"msg"),o(" 下, 且具有后缀 "),e("code",null,".msg"),o(", 文件名即消息类型名称")],-1),K={href:"https://wiki.ros.org/msg",target:"_blank",rel:"noopener noreferrer"},V=n("<ul><li><code>int32</code> 32 位整型 (对应 Python 的 <code>int</code>)</li><li><code>uint8</code> 8 位无符号整型 (对应 Python 的 <code>bytes</code>)</li><li><code>float64</code> 64 位浮点型 (对应 Python 的 <code>float</code>)</li><li><code>string</code> 字符串 (对应 Python 的 <code>str</code>)</li><li><code>bool</code> 布尔型</li><li><code>&lt;类型&gt;[]</code> 不定长数组 (对应 Python 的元组, uint8 类型则对应 <code>bytes</code>)</li><li><code>&lt;类型&gt;[C]</code> 定常数组 (同上)</li><li><code>&lt;功能包&gt;/&lt;类型&gt;</code> 来自其他功能包的消息类型</li><li><code>Header</code> 消息头类型, 为消息类型 <code>std_msgs/msg/Header.msg</code> 的别名</li><li><code>time</code> 时间戳类型 (对应 Python 的 <code>rospy.Time</code>)</li></ul>",1),W=e("li",null,[o("消息文件的各行分别定义了消息的各个字段, 使用格式 "),e("code",null,"<msg_type> <property_name>"),e("ul",null,[e("li",null,[e("code",null,"msg_type"),o(" 字段类型, 具体见上")]),e("li",null,[e("code",null,"property_name"),o(" 字段名称, 以字母开头的, 字母数字与下划线组合")]),e("li",null,[o("文件中可使用 "),e("code",null,"#"),o(" 注释")])])],-1),Q=e("ul",null,[e("li",null,[e("code",null,"<build_depend>message_generation</build_depend>")]),e("li",null,[e("code",null,"<exec_depend>message_runtime</exec_depend>")])],-1),X=n('<li>在功能包的 <code>CMakeLists.txt</code> 中添加构建时功能包依赖, 即在 <code>find_package(catkin REQUIRED COMPONENTS ...)</code> 后添加依赖功能包 <code>message_generation</code></li><li>在功能包的 <code>CMakeLists.txt</code> 中添加运行时功能包依赖, 即在 <code>catkin_package(...)</code> 中添加依赖功能包 <code>CATKIN_DEPENDS message_runtime</code></li><li>在功能包的 <code>CMakeLists.txt</code> 中取消关于函数 <code>add_message_files(FILES ...)</code> 的注释, 并将其中的文件替换为添加的消息文件名 (不需要路径)</li><li>在功能包的 <code>CMakeLists.txt</code> 中取消关于函数 <code>generate_messages(DEPENDENCIES ...)</code> 的注释, 并添加使用到的其他功能包名 (即使没有使用其他功能包, 也要取消注释该函数, 而不写入参数)</li><li>使用 <code>catkin_make</code> 构建, 再使用 <code>source ./devel/setup.bash</code> 将生成的消息定义导入环境, 最后使用 <a href="#%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AF%9D%E9%A2%98%E5%B7%A5%E5%85%B7">rosmsg show</a> 检查消息文件是否创建成功</li>',5),J=n('<h3 id="消息相关使用功能包" tabindex="-1"><a class="header-anchor" href="#消息相关使用功能包" aria-hidden="true">#</a> 消息相关使用功能包</h3><ul><li>功能包 <code>std_msgs</code> 提供了一系列基础的消息类型, 常用的有 <ul><li><code>Float64MultiArray</code> 浮点数数组, 可用于传递任意长度的向量</li><li>``</li></ul></li><li>功能包 <code>geometry_msgs</code> 提供了一系列与几何描述有关的消息类型, 常用的有 <ul><li><code>Accel,Twist</code> 旋量消息, 可用于表示速度, 加速度或力, 分为速度与角速度两部分</li><li><code>Point</code> 位置消息, 包含 x, y, z 三个坐标</li><li><code>Quaternion</code> 四元数姿态消息, 包含 x, y, z, w 四个分量</li></ul></li></ul><h2 id="ros-服务" tabindex="-1"><a class="header-anchor" href="#ros-服务" aria-hidden="true">#</a> ROS 服务</h2><p>ROS 中的服务 (Service) 为一种节点间数据传输方式<br> 数据传输时, 节点分别扮演服务端 (Sever) 与客户端 (Client), 通过客户端节点向服务端节点发送请求 (Request) 命令服务端完成特定指令, 完成后服务端将运行响应 (Response) 发送回客户端<br> 因此服务通常作为模块向外接收控制命令, 提供特定功能的接口</p><p>其中请求与相应的本质即<a href="#ros-%E8%AF%9D%E9%A2%98">消息</a>, 两者共同构成特定的服务类型 (Srv)</p><h3 id="基于工具的服务应用" tabindex="-1"><a class="header-anchor" href="#基于工具的服务应用" aria-hidden="true">#</a> 基于工具的服务应用</h3><p>使用命令 <code>rosservice</code> 管理正在运行的服务</p><ul><li><code>rosservice list [-n]</code> 列出当前所有服务 <ul><li>选项 <code>-n</code> 列出服务以及提供服务的节点</li></ul></li><li><code>rosservice call &lt;service_name&gt; -- &lt;request&gt;</code> 向指定服务发送请求 <ul><li><code>service_name</code> 服务名称</li><li><code>request</code> 请求内容, 表示方法见<a href="#%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%AD%E8%A1%A8%E7%A4%BA-YAML">命令行中表示 YAML</a></li><li>运行后返回服务的响应</li></ul></li><li><code>rosservice type &lt;service_name&gt;</code> 列出服务 <code>service_name</code> 的服务类型, 可配合 <code>rossrv</code> 查看服务类型的具体信息 <ul><li>与 <a href="#%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AF%9D%E9%A2%98%E5%B7%A5%E5%85%B7">rosmsg</a> 类似有 <code>rosservice type &lt;service_name&gt; | rossrv show</code> 可直接获取服务的详细信息</li></ul></li><li><code>rossrv show &lt;service_type&gt;</code> 获取服务类型 <code>service_type</code> 的详细信息, 使用 <code>---</code> 分隔, 上方为请求信息, 下方为相应信息</li></ul><h3 id="基于-python-的服务编程" tabindex="-1"><a class="header-anchor" href="#基于-python-的服务编程" aria-hidden="true">#</a> 基于 Python 的服务编程</h3><p>对于客户端 Client, 可使用对象 <code>rospy.ServiceProxy</code> 进行管理</p><ul><li>构造函数 <code>rospy.ServiecProxy(name, service_class, persistent = False)</code><ul><li><code>name</code> 使用的服务名称, 详细规则见<a href="#%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4">资源创建与访问</a></li><li><code>service_class</code> 服务类型, 表示方法见下文对服务使用的介绍</li><li><code>persistent</code> 是否保持连接, 对于需要频繁调用的服务, 通过此方法可加快请求速度, 但消耗更多系统性能</li></ul></li><li>对象方法 <code>rospy.ServiecProxy.wait_for_service(timeout = None)</code> 等待服务启动, 在对象初始化后, 使用服务前需要先保证服务已经启动 <ul><li><code>timeout</code> 最长等待时间, 单位为秒</li></ul></li><li>对象方法 <code>rospy.ServiecProxy.__call__(*args, **kwds)</code> 以函数对象的方式向服务发送请求 <ul><li>参数使用与<a href="#%E5%9F%BA%E4%BA%8E-python-%E7%9A%84%E8%AF%9D%E9%A2%98%E7%BC%96%E7%A8%8B">消息的使用</a>以及 <code>rospy.Publisher.pub(*args, **kwds)</code> 类似</li><li>方法还将返回服务端的回应对象</li><li>由于 <code>__call__</code> 为可调用对象的特殊方法, 因此可将 <code>rospy.ServiceProxy</code> 对象以类似调用函数的方法访问服务</li></ul></li></ul><p>对于服务端 Server, 可使用对象 <code>rospy.Service</code> 进行管理</p><ul><li>构造函数 <code>rospy.Service(name, service_class, handler)</code><ul><li><code>name</code> 创建的服务名称, 详细规则见<a href="#%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4">命名空间</a></li><li><code>service_class</code> 服务类型, 表示方法见下文对服务使用的介绍</li><li><code>handler</code> 服务处理函数, 接收服务请求消息对象, 返回服务相应消息对象 (即使相应消息为空)</li></ul></li></ul><p>对于服务在 Python 中的使用 (以教学功能包 <code>turtlesim</code> 下的位置服务 <code>turtlesim.srv.TeleportAbsolute</code> 为例)</p><ul><li>服务的本质即请求与回应两种<a href="#%E5%9F%BA%E4%BA%8E-python-%E7%9A%84%E8%AF%9D%E9%A2%98%E7%BC%96%E7%A8%8B">消息</a>的结合</li><li>在 ROS 功能包同名的 Python 包下的 <code>srv</code> 模块内, 定义了与消息同名的类定义对象 <code>&lt;SrvName&gt;</code><br> 例如导入模块 <code>turtlesim.srv</code>, 通过 <code>turtlesim.srv.TeleportAbsolute</code> 即可表示服务类型 <code>TeleportAbsolute</code> 的类定义对象</li><li>服务类型的类定义对象可作为参数传递给类 <code>rospy.ServiecProxy</code> 或 <code>rospy.Service</code> 以确定使用的服务类型</li><li>通过 <code>&lt;SrvName&gt;Request</code> 即可获得客户请求消息的消息类定义对象, 同理有 <code>&lt;SrvName&gt;Response</code> 即可获得服务回应消息的消息类定义对象<br> 例如 <code>turtlesim.srv.TeleportAbsoluteRequest</code></li><li>对于请求消息与回应消息的使用参见<a href="#%E5%9F%BA%E4%BA%8E-python-%E7%9A%84%E8%AF%9D%E9%A2%98%E7%BC%96%E7%A8%8B">消息的使用</a></li></ul><h3 id="自定义服务" tabindex="-1"><a class="header-anchor" href="#自定义服务" aria-hidden="true">#</a> 自定义服务</h3><ul><li>功能包的自定义消息通常位于功能包的文件夹 <code>srv</code> 下, 且具有后缀 <code>.srv</code>, 文件名即消息类型名称</li><li>自定义服务文件中, 使用 <code>---</code> 分隔请求消息 (位于上方) 与响应消息定义 (位于下方), 定义方法与<a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B6%88%E6%81%AF">自定义消息</a>相同</li><li>导入服务时修改功能包下 <code>CMakeList.txt</code> 的方法与<a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B6%88%E6%81%AF">自定义消息</a>相同, 唯一的区别是需要将其中一个对应函数改为 <code>add_service_files</code></li></ul><h2 id="ros-参数服务器" tabindex="-1"><a class="header-anchor" href="#ros-参数服务器" aria-hidden="true">#</a> ROS 参数服务器</h2><p>ROS 中的参数服务器 (Parameter Server) 为一种节点间数据传输方式<br> 参数服务器总是由<a href="#ros-%E8%8A%82%E7%82%B9">主节点</a>主持, 而节点则可以修改与读取参数服务器上的内容, 并且服务器中还具有只有单节点或节点组内独有的私有参数<br> 因此参数服务器通常用于存放节点的共享配置信息</p><h3 id="参数类型" tabindex="-1"><a class="header-anchor" href="#参数类型" aria-hidden="true">#</a> 参数类型</h3><p>参数服务器中的参数主要有以下常用类型</p><ul><li><code>int</code> 32 位整数</li><li><code>double</code> 双精度浮点数</li><li><code>bool</code> 布尔值</li><li><code>str</code> 字符串</li><li><code>list</code> 列表 (类型与长度无限制)</li></ul><h3 id="基于工具的参数服务器应用" tabindex="-1"><a class="header-anchor" href="#基于工具的参数服务器应用" aria-hidden="true">#</a> 基于工具的参数服务器应用</h3><p>使用命令 <code>rosparam</code> 管理参数服务器</p><ul><li><code>rosparam set &lt;param_name&gt; &lt;value&gt;</code> 设置参数 <ul><li><code>param_name</code> 被设置的参数 <ul><li>如果不存在将自动创建</li><li>可直接设置 <code>/&lt;节点 (组) 路径&gt;</code>, 此时需要传入对象, 即参数名与参数值的键值对</li></ul></li><li><code>value</code> 参数值, 表示方法见<a href="#%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%AD%E8%A1%A8%E7%A4%BA-YAML">命令行中表示 YAML</a></li></ul></li><li><code>rosparam get &lt;param_name&gt;</code> 获取参数 <ul><li><code>param_name</code> 获取的参数 <ul><li>直接访问 <code>/&lt;节点 (组) 路径&gt;</code>, 获取其下所有参数与参数值</li><li>直接访问 <code>/</code> 则能得到整个参数服务器</li></ul></li></ul></li><li><code>rosparam dump &lt;file_name&gt; &lt;param_name&gt;</code> 导出参数服务器的数据 <ul><li><code>file_name</code> 保存的 yaml 文件名</li><li><code>param_name</code> 通常直接访问 <code>/&lt;节点 (组) 路径&gt;</code> 或 <code>/</code>, 保存其下所有参数与参数值</li></ul></li><li><code>rosparam load &lt;file_name&gt; &lt;param_name&gt;</code> 将数据导入参数服务器 <ul><li><code>file_name</code> 导入数据的 yaml 文件名</li><li><code>param_name</code> 通常直接访问 <code>/&lt;节点 (组) 路径&gt;</code> 或 <code>/</code>, 将文件数据全部导入</li></ul></li><li><code>rosparam delete &lt;param_name&gt;</code> 删除参数</li></ul><p>访问参数名称 <code>param_name</code> 时注意<a href="#%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4">命名空间</a></p><h3 id="基于-python-的参数服务器应用" tabindex="-1"><a class="header-anchor" href="#基于-python-的参数服务器应用" aria-hidden="true">#</a> 基于 Python 的参数服务器应用</h3>',27),j={href:"https://wiki.ros.org/rospy_tutorials/Tutorials/Parameters",target:"_blank",rel:"noopener noreferrer"},Z=n('<ul><li><code>rospy.get_param(name)</code> 获取参数 <code>name</code> 的值</li><li><code>rospy.set_param(name, val)</code> 设置参数 <code>name</code> 的值为 <code>val</code></li><li><code>rospy.has_param(name)</code> 检查参数 <code>name</code> 是否存在</li><li><code>rospy.delete_param(name)</code> 删除参数 <code>name</code></li></ul><p>访问参数名称 <code>name</code> 时注意<a href="#%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4">命名空间</a></p><h3 id="launch-文件导入参数" tabindex="-1"><a class="header-anchor" href="#launch-文件导入参数" aria-hidden="true">#</a> launch 文件导入参数</h3><p>通过以下两个标签可通过 <a href="#launch-%E6%96%87%E4%BB%B6">launch 文件</a>, 在节点启动前导入参数</p><ul><li><code>param</code> 设置参数服务器中的参数 <ul><li>属性 <code>name</code> 参数名称</li><li>属性 <code>type</code> 参数类型, 可选值为 <code>str , int, double, bool</code>, 也可不给出由参数值自动识别类型</li><li>使用以下属性之一表示参数的值 <ul><li>属性 <code>value</code>, 直接以属性的参数作为参数值</li><li>属性 <code>command</code> 给出的运行命令, 并将输出作为参数值</li><li>属性 <code>textfile</code> 给出文件路径, 并将文件内容以字符串方式读取并作为参数值</li></ul></li><li>在节点标签下时, 参数位于节点下时, 即参数位于私有路径下 <code>~[参数]</code> (关于路径参见<a href="#%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4">命名空间</a>)</li><li>在节点组标签下时, 参数位于节点组中, 即参数位于相对路径下 <code>[参数]</code></li><li>该标签为自闭和标签, 没有内容</li></ul></li><li><code>rosparam</code> 加载或导出参数服务器中的参数 <ul><li>属性 <code>command</code> 执行命令 <ul><li><code>load</code> 从 yaml 文件导入参数</li><li><code>dump</code> 将参数保存导 yaml 文件中</li></ul></li><li>属性 <code>file</code> 目标文件路径</li><li>参数所在空间的规则与 <code>param</code> 标签同</li><li>该标签为自闭和标签, 没有内容</li></ul></li></ul><h2 id="调试与检查" tabindex="-1"><a class="header-anchor" href="#调试与检查" aria-hidden="true">#</a> 调试与检查</h2><h3 id="消息记录与回放" tabindex="-1"><a class="header-anchor" href="#消息记录与回放" aria-hidden="true">#</a> 消息记录与回放</h3><p>使用命令 <code>rosbag</code> 可用于记录与回访<a href="#ros-%E8%AF%9D%E9%A2%98">话题</a>下发布的消息</p>',8),ee=n("<li><p><code>rosbag record [-a | -e &lt;reg&gt;| -x &lt;reg&gt;] [-o &lt;prefix&gt;] [-p] [topic1 [topic2 ...]]</code> 开始记录消息 (记录消息时, 所有有关节点都应当在运行中)</p><ul><li><code>topci</code> 指定记录的话题名, 默认记录所有话题</li><li><code>-a</code> 记录所有话题的消息</li><li><code>-e &lt;reg&gt;</code> 记录名称满足正则表达式 <code>reg</code> 的话题</li><li><code>-x &lt;reg&gt;</code> 排除名称满足正则表达式 <code>reg</code> 的话题</li><li><code>-o &lt;prefix&gt;</code> 在记录文件的文件名名添加前缀, 可以此设置输出文件的保存路径 (默认保存在当前目录下, 文件名为时间 + <code>.bag</code>)</li><li><code>-p</code> 在开始记录时, 发送消息</li><li><code>--duration=&lt;time&gt;</code> 持续指定时间的记录消息, 默认单位为秒, 如果没有指定, 将持续记录到程序被 <kbd>Ctrl</kbd><kbd>C</kbd> 关闭</li></ul></li>",1),oe=e("p",null,[e("code",null,"rosbag info [--freq] [-y] <file>"),o(" 读取记录的 bag 文件的基本信息")],-1),le=e("li",null,[e("code",null,"file"),o(" 被读取的 bag 文件")],-1),ne=e("li",null,[e("code",null,"--freq"),o(" 计算各话题下消息的发布频率")],-1),ce=e("li",null,[e("code",null,"-y"),o(" 以 yaml 格式输出信息")],-1),ie=n('<li><p><code>rosbag play [-r &lt;factor&gt;] [-l] [-d &lt;sec&gt;] [--pause] [--topic &lt;topic1&gt; [topci2...]] &lt;file&gt;</code> 回放消息 (回访消息时, 有关的节点应当在运行中, 但不一定要启动负责发布消息的节点)</p><ul><li><code>file</code> 用于回放的 bag 文件路径</li><li><code>-r &lt;factor&gt;</code> 以倍率 <code>factor</code> 发送消息</li><li><code>-d &lt;sec&gt;</code> 每次发送消息间隔 <code>sec</code> 秒 (用于调试)</li><li><code>-l</code> 循环发送消息</li><li><code>--pause</code> 命令运行后立刻暂停, 不直接开始回放消息</li><li><code>--topic &lt;topic1&gt; [topci2...]</code> 仅回放话题 <code>topicx</code> 下的消息 (话题应使用完整名称, 见<a href="#%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4">命名空间</a>介绍)</li></ul></li>',1),ae={href:"https://wiki.ros.org/rosbag/Tutorials",target:"_blank",rel:"noopener noreferrer"},se={href:"https://wiki.ros.org/rqt_bag?distro=noetic",target:"_blank",rel:"noopener noreferrer"},de=n('<h3 id="错误检查" tabindex="-1"><a class="header-anchor" href="#错误检查" aria-hidden="true">#</a> 错误检查</h3><p>使用命令 <code>roswtf</code> 可用于检查当前 ROS 环境中是否存在问题</p><ul><li><code>roswtf</code> 检查当前的 ROS 环境与运行的节点是否存在问题</li><li><code>roswtf --all</code> 联网检查所有的功能包是否存在问题</li></ul><h3 id="命令行中表示数据结构" tabindex="-1"><a class="header-anchor" href="#命令行中表示数据结构" aria-hidden="true">#</a> 命令行中表示数据结构</h3>',4),te={href:"https://wiki.ros.org/ROS/YAMLCommandLine",target:"_blank",rel:"noopener noreferrer"},re=e("ul",null,[e("li",null,[o("列表 "),e("code",null,"[val1, val2, ...]")]),e("li",null,[o("对象 "),e("code",null,"{key1: val1, key2: val2, ...}"),o(" 注意与 yaml 相同, "),e("code",null,":"),o(" 需要紧跟键名 "),e("code",null,"key"),o(", 并且与键值 "),e("code",null,"val"),o(" 保持一个空格")])],-1),ue=e("code",null,'"',-1),pe=e("code",null,"'",-1),he=n("<ul><li><code>&quot;</code> 将对内容进行的变量 <code>${}</code> 与转义符 <code>\\</code> 转义</li><li><code>&#39;</code> 将直接显示原始内容</li><li>在终端中, 仅输入左侧 <code>&quot;</code> 或 <code>&#39;</code>, 可实现多行输入, 不会影响</li></ul>",1),_e=n('<li>表示消息时注意 <ul><li>使用列表或对象构造消息时的行为类似<a href="#%E5%9F%BA%E4%BA%8E-Python-%E7%9A%84%E8%AF%9D%E9%A2%98%E7%BC%96%E7%A8%8B">实例化消息对象</a><ul><li>传入列表时, 将按位置与消息的字段对应</li><li>传入对象时, 将按字段名与消息的字段对应</li></ul></li><li>表示时间戳类型 <code>time</code> 时, 可传入字符串 <code>now</code> 表示当前时间</li><li>表示消息头类型 <code>Header</code> 时, 可传入字符串 <code>auto</code> 自动生成</li><li>表示 yaml 的空类型时, 将被自动转换为空字符串 <code>&quot;&quot;</code></li></ul></li>',1),me=e("h3",{id:"动态参数调节",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#动态参数调节","aria-hidden":"true"},"#"),o(" 动态参数调节")],-1),ge={href:"https://wiki.ros.org/dynamic_reconfigure",target:"_blank",rel:"noopener noreferrer"},Ee=e("code",null,"dynamic_reconfigure",-1),ye=e("br",null,null,-1),ke=n(`<p>首先要创建参数配置文件, 以确定可动态条件的参数与调节方式<br> 通常参数配置文件位于文件夹 <code>cfg</code> 下, 有后缀 <code>.cfg</code>, 文件的基本格式如下</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>

<span class="token comment"># 以下三行为配置文件开始的的固定语句</span>
PACKAGE <span class="token operator">=</span> <span class="token string">&quot;&lt;功能包名称&gt;&quot;</span>
<span class="token keyword">from</span> dynamic_reconfigure<span class="token punctuation">.</span>parameter_generator_catkin <span class="token keyword">import</span> <span class="token operator">*</span>
gen <span class="token operator">=</span> ParameterGenerator<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 主要参数设置</span>

<span class="token comment"># 添加一般类型参数的示例</span>
gen<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">&quot;int_param&quot;</span><span class="token punctuation">,</span> int_t<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;An Integer parameter&quot;</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
<span class="token comment"># 添加枚举类型参数的示例</span>
size_enum <span class="token operator">=</span> gen<span class="token punctuation">.</span>enum<span class="token punctuation">(</span><span class="token punctuation">[</span> gen<span class="token punctuation">.</span>const<span class="token punctuation">(</span><span class="token string">&quot;Small&quot;</span><span class="token punctuation">,</span>      int_t<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;A small constant&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                       gen<span class="token punctuation">.</span>const<span class="token punctuation">(</span><span class="token string">&quot;Medium&quot;</span><span class="token punctuation">,</span>     int_t<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;A medium constant&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                       gen<span class="token punctuation">.</span>const<span class="token punctuation">(</span><span class="token string">&quot;Large&quot;</span><span class="token punctuation">,</span>      int_t<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;A large constant&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                       gen<span class="token punctuation">.</span>const<span class="token punctuation">(</span><span class="token string">&quot;ExtraLarge&quot;</span><span class="token punctuation">,</span> int_t<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;An extra large constant&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                     <span class="token string">&quot;An enum to set size&quot;</span><span class="token punctuation">)</span>
gen<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">&quot;size&quot;</span><span class="token punctuation">,</span> int_t<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;A size parameter which is edited via an enum&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> edit_method<span class="token operator">=</span>size_enum<span class="token punctuation">)</span>

<span class="token comment"># 该行为配置文件结束的的固定语句</span>
exit<span class="token punctuation">(</span>gen<span class="token punctuation">.</span>generate<span class="token punctuation">(</span>PACKAGE<span class="token punctuation">,</span> <span class="token string">&quot;&lt;功能包名称&gt;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&lt;配置名称&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写配置文件注意</p>`,3),Ae=n("<li>配置文件本质为一个 Python 脚本, 第一行 <code>#!/usr/bin/env python</code> 以及基本格式中的开始与结束语句不能少</li><li>开始语句中, <code>gen = ParameterGenerator()</code> 创建了名称为 <code>gen</code> 的配置对象, 通过该对象的成员函数创建参数</li><li>通过函数 <code>gen.add(name, paramtype, level, description, default, min = None, max = None, edit_method = None)</code> 添加一般参数 <ul><li><code>name</code> 字符串, 参数名称</li><li><code>paramtype</code> 参数类型, 可用的类型有 <code>int_t</code> 整数, <code>double_t</code> 浮点数, <code>bool_t</code> 布尔值, <code>str_t</code> 字符串</li><li><code>level</code> 整数, 参数级别, 该值将与参数绑定, 并作为一个修改事件回调函数的参数传入</li><li><code>description</code> 字符串, 参数的描述, 将在修改工具中显示</li><li><code>default</code> 参数的默认值</li><li><code>min</code> 参数的最小值 (可以不指定, 且对于字符串与布尔类型的参数不需要指定)</li><li><code>max</code> 参数的最大值 (可以不指定, 且对于字符串与布尔类型的参数不需要指定)</li><li><code>edit_method</code> 用于枚举参数的创建 (参考以上示例)</li></ul></li><li>通过函数 <code>gen.generate(pkgname, nodename, name)</code> 结束配置的生成, 通常放在 <code>exit()</code> 函数内 <ul><li><code>pkgname</code> 功能包名称, 通常直接使用在第一行声明的功能包名称常量 <code>PACKAGE</code></li><li><code>nodename</code> 使用参数的节点名称, 没有实际意义, 仅用于生成文档</li><li><code>name</code> 配置的名称, 需要与该配置文件的文件名一致 (不需要后缀)</li></ul></li>",4),be=e("code",null,"chmod +x <文件路径>",-1),fe=n("<li>此外还需要在 <code>CMakeLists.txt</code> 文件中添加配置文件 <ul><li>取消注释函数 <code>generate_dynamic_reconfigure_options</code>, 并添加 <code>.cfg</code> 文件路径作为函数参数 (相对功能包根目录的路径)</li><li>取消注释函数 <code>add_dependencies</code>, 并添加 <code>&lt;目标名&gt; ${PROJECT_NAME}_gencfg</code> 作为函数参数 (用于 C++, 对于 Python 不需要该操作)</li></ul></li>",1),Be=n('<p>通过<a href="#ros-%E6%9C%8D%E5%8A%A1">服务端</a>的方式, 在节点中接收参数修改 (以 Python 为例)</p><ul><li>在程序开始导入模块 <ul><li><code>from dynamic_reconfigure.server import Server</code> 导入参数修改服务类 <code>Server</code>, 节点通过作为该服务的服务器, 接收参数的修改</li><li><code>from &lt;功能包名&gt;.cfg import &lt;配置名&gt;Config</code> 导入配置信息类, 其中 <code>配置名</code> 即配置文件的文件名</li></ul></li><li>创建参数修改服务类 <code>srv = Server(type, callback, namespace = &quot;&quot;)</code>, 等价于创建了一个用于接收参数修改的<a href="#ros-%E6%9C%8D%E5%8A%A1">服务</a><ul><li><code>type</code> 配置信息类, 即服务接收的配置信息</li><li><code>callback</code> 接收到参数修改时调用的回调函数, 回调函数接收参数 <code>config, level</code>, 其中 <ul><li><code>config</code> 为一个以参数名为键值的字典, 包含了所有参数</li><li><code>level</code> 为被修改参数的组别编号</li><li><code>namespace</code> 从参数服务器获取配置初值时的搜索<a href="#%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4">命名空间</a>, 默认即节点所在名称空间</li><li>该函数一般直接返回字典 <code>config</code>, 表示新的参数值 (即使不修改参数也需要直接接返回)</li><li>在对象创建时也将调用该回调函数, 用于传入参数的初始值, 此时组别编号为 <code>-1</code></li></ul></li></ul></li></ul><p>通过以下方式可配置与修改动态参数</p>',3),ve=e("li",null,[o("由于在启动参数修改服务时, 将尝试从参数服务器中寻找参数的初始值 (寻找同名的节点"),e("mark",null,"私有参数"),o("), 因此可以通过 "),e("a",{href:"#launch-%E6%96%87%E4%BB%B6"},"launch 文件"),o("设置参数的初值")],-1),xe={href:"https://wiki.ros.org/dynamic_reconfigure/Tutorials/UsingTheDynamicReconfigurePythonClient",target:"_blank",rel:"noopener noreferrer"},we=n("<li>通过可视化工具 <code>rqt</code> 中打开子工具 Plugins -&gt; Configuration -&gt; Dynamic Reconfigure 修改参数 (如果工具出现显示异常, 可尝试重装 <code>rqt_reconfigure</code>)</li><li>通过命令行工具 <code>rosrun dynamic_reconfigure dynparam</code> 修改节点的动态参数 <ul><li><code>rosrun dynamic_reconfigure dynparam list</code> 列出所有具有动态参数的节点</li><li><code>rosrun dynamic_reconfigure dynparam get &lt;node&gt;</code> 获取节点 <code>node</code> 当前的动态参数</li><li><code>rosrun dynamic_reconfigure dynparam set &lt;node&gt; &lt;key&gt; &lt;val&gt;</code> 动态将节点 <code>node</code> 的参数 <code>key</code> 设置为 <code>val</code></li><li><code>rosrun dynamic_reconfigure dynparam dump &lt;node&gt; &lt;file&gt;</code> 将节点 <code>node</code> 的参数保存为 yaml 文件 <code>file</code></li><li><code>rosrun dynamic_reconfigure dynparam load &lt;node&gt; &lt;file&gt;</code> 将 yaml 文件 <code>file</code> 中设置的参数导入节点 <code>node</code> 的动态参数</li></ul></li>",2),Ce=e("h3",{id:"ros-命令与节点",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#ros-命令与节点","aria-hidden":"true"},"#"),o(" ros 命令与节点")],-1),Se=e("p",null,[o("对于 ROS 提供的大部分命令行工具, 如 "),e("code",null,"rostopic"),o(" 以及图形化工具 "),e("code",null,"rqt_xxx"),o(" 其本质均为特殊的 ROS 节点, 具有以下特点")],-1),qe=e("li",null,[o("命令不存在时, 可使用 "),e("code",null,"sudo apt install ros-<版本>-<命令名>"),o(" 安装")],-1),De=e("li",null,[o("可通过 "),e("code",null,"-h"),o(" 查询命令的详细参数 (包括图形化工具, 可传入参数以实现特定预设)")],-1),Pe=e("code",null,"rosrun",-1),Fe=e("h2",{id:"rospy-高级应用",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#rospy-高级应用","aria-hidden":"true"},"#"),o(" rospy 高级应用")],-1),Re={href:"https://wiki.ros.org/rospy/Overview",target:"_blank",rel:"noopener noreferrer"},Oe=n('<h3 id="rospy-中的实用函数" tabindex="-1"><a class="header-anchor" href="#rospy-中的实用函数" aria-hidden="true">#</a> rospy 中的实用函数</h3><ul><li><code>rospy.on_shutdown(hook)</code> 在节点被销毁时执行函数 <code>hook</code></li><li><code>rospy.spin()</code> 接管节点线程以用于处理<a href="#%E5%9F%BA%E4%BA%8E-python-%E7%9A%84%E8%AF%9D%E9%A2%98%E7%BC%96%E7%A8%8B">话题消息接收</a>或处理<a href="#%E5%9F%BA%E4%BA%8E-python-%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%BC%96%E7%A8%8B">受到的服务请求</a><br> 对于没有主循环仅处理回调的节点可使用此函数代替主循环</li><li><code>rospy.sleep(duration)</code> 节点休眠指定时长, 用于控制无 <code>Rate</code> 对象的循环 <ul><li><code>duration</code> 休眠时长, 单位秒</li></ul></li><li><code>rospy.wait_for_message(topic, topic_type, timeout = None)</code> 订阅并等待话题, 接收到一个消息后立即取消订阅并返回 <ul><li><code>topic</code> 订阅话题名, 对应 <a href="#%E5%9F%BA%E4%BA%8E-python-%E7%9A%84%E8%AF%9D%E9%A2%98%E7%BC%96%E7%A8%8B">rospy.Subscriber</a> 对象构造函数的参数 <code>name</code></li><li><code>topic_type</code> 订阅话题的消息类型, 对应 <a href="#%E5%9F%BA%E4%BA%8E-python-%E7%9A%84%E8%AF%9D%E9%A2%98%E7%BC%96%E7%A8%8B">rospy.Subscriber</a> 对象构造函数的参数 <code>data_class</code></li><li><code>timeout</code> 等待时长, 单位为秒, 传入 <code>None</code> 时将不断等待</li><li>当接收到消息时, 将返回接收到的消息对象, 否则发出异常 <code>ROSException</code></li></ul></li></ul><h3 id="命名空间" tabindex="-1"><a class="header-anchor" href="#命名空间" aria-hidden="true">#</a> 命名空间</h3><p>在 ROS 中, 包括服务, 话题, 节点, 参数服务器内的参数等所有资源均是以 <code>命名空间/资源名</code> 的方式作为访问路径</p><ul><li>命名空间与资源名都要求为一个以字母为首的, 由字母, 数字与下划线组成的字符串</li><li>ROS 中的命名空间有以下特点 <ul><li>允许有多个层次的命名空间, 各个层次使用 <code>/</code> 划分</li><li>所有资源都将位于根命名空间 <code>/</code> 下</li></ul></li><li>对于一个节点 <code>/ns/nd</code> 其访问资源时, 有以下几种访问路径形式形式 <ul><li>绝对路径, 即以根命名空间 <code>/</code> 为起点, 给出完整的资源路径</li><li>相对路径, 即路径没有起点, 此时将相对节点所在的命名空间进行访问<br> 例如节点 <code>/ns/nd</code> 访问路径 <code>foo/bar</code> 时, 实际将访问资源 <code>/ns/foo/bar</code></li><li>私有路径, 即路径以私有符号 <code>~</code> 为起点, 此时将访问节点命名空间下的资源 (不是严格的私有)<br> 例如节点 <code>/ns/nd</code> 访问路径 <code>~foo/bar</code> 时, 实际将访问资源 <code>/ns/nd/foo/bar</code></li></ul></li><li>资源的所在的名称空间可通过以下方法设置 <ul><li>节点所在的命名空间即 <a href="#launch-%E6%96%87%E4%BB%B6">launch 文件</a>中节点所在的节点组, 如果没有节点组则节点位于根命名空间 <code>/</code> 下</li><li>其他资源则由创建时给出的路径 (可以使用任意三种路径形式) 确定其所在的命名空间</li></ul></li><li>关于资源访问 rospy 提供了以下函数 <ul><li><code>rospy.get_name()</code> 获取节点的绝对路径</li><li><code>rospy.get_namespace()</code> 获取节点所在名称空间的绝对路径</li></ul></li><li>通过 <a href="#launch-%E6%96%87%E4%BB%B6">launch 文件</a>中的 <code>remap</code> 标签可用于名称重映射 <ul><li>属性 <code>from</code> 被重映射的名称 <ul><li>仅给出名称时, 路径中所有与名称匹配的部分都将被重映射</li><li>给出绝对路径时, 仅该路径会被重映射</li></ul></li><li>属性 <code>to</code> 目标名称, 该属性最好与 <code>from</code> 对应 <ul><li><code>from</code> 给出名称时, 该属性也给出名称, 将替换名称</li><li><code>from</code> 给出路径时, 该属性也给出路径, 将替换路径 (可以是绝对或相对路径)</li></ul></li><li>名称重映射的作用域仅局限在其所在的路径 <ul><li>位于节点组标签下时, 节点组中的节点创建与访问的资源将被重映射</li><li>位于节点标签下时, 仅节点中创建与访问的资源将被重映射</li></ul></li><li>该标签为自闭和标签, 没有内容</li></ul></li></ul><h3 id="日志打印" tabindex="-1"><a class="header-anchor" href="#日志打印" aria-hidden="true">#</a> 日志打印</h3>',6),Le=e("code",null,"rospy.loginfo(msg)",-1),Ne=e("code",null,"msg",-1),Me=e("code",null,"msg",-1),Te=e("code",null,"print",-1),ze=e("li",null,[o("日志在节点运行时, 将被打印到屏幕上或写入节点文件中 (由运行方式决定), 并写入"),e("a",{href:"ROS-%E8%8A%82%E7%82%B9"},"日志节点"),o(),e("code",null,"rosout"),o(" 中, 可通过"),e("a",{href:"#%E8%8A%82%E7%82%B9%E5%8F%AF%E8%A7%86%E5%8C%96%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7"},"节点可视化管理工具"),o("相关工具查询")],-1),Ie=n("<li>对于所有日志级别, 有以下从低到高的日志发送函数 <ul><li><code>rospy.logdebug(msg)</code> DEBUG 调试级别 (仅记录到日志文件)</li><li><code>rospy.loginfo(msg)</code> INFO 信息级别 (发送到标准输出 <code>stdout</code> 上)</li><li><code>rospy.logwarn(msg)</code> WARN 警告级别 (发送到标准错误 <code>stderr</code> 上, 下同)</li><li><code>rospy.logerr(msg)</code> ERR 错误级别</li><li><code>rospy.logfatal(msg)</code> FATAL 致命级别</li></ul></li><li>此外发送日志函数还有如下变种 (以 INFO 级别为力) <ul><li><code>rospy.loginfo_once(msg)</code> 此处的日志仅在第一次运行时发送 (即使多次被执行)</li><li><code>rospy.logdebug_throttle(period, msg)</code> 在第一次执行后以固定的时间发送日志, 以实现变量追踪 (即使多次被执行) <ul><li><code>period</code> 日志发送间隔, 单位为秒</li><li><code>msg</code> 发送日志, 即使使用格式化字符串 (<code>format</code> 或 f-字符串), 依然能追踪变量</li></ul></li></ul></li>",2),$e=e("h3",{id:"在-rospy-中使用-numpy",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#在-rospy-中使用-numpy","aria-hidden":"true"},"#"),o(" 在 rospy 中使用 numpy")],-1),Ye={href:"https://wiki.ros.org/rospy_tutorials/Tutorials/numpy",target:"_blank",rel:"noopener noreferrer"},Ge=e("ul",null,[e("li",null,[e("code",null,"<build_depend>python-numpy</build_depend>")]),e("li",null,[e("code",null,"<run_depend>python-numpy</run_depend>")])],-1),Ue=n('<li>将数组消息解析为 Numpy 数组 <ul><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B6%88%E6%81%AF">ROS 消息</a>中, 默认情况下数组消息将被作为元组接收</li><li>使用 <code>from rospy.numpy_msg import numpy_msg</code> 导入函数 <code>numpy_msg()</code></li><li>使用 <code>numpy_msg(msg_name)</code> 包裹消息类型, 将返回一个被修饰的消息类型, 访问其中数组类型的消息时, 将以 Numpy 数组的方式读取, 同样也能通过 Numpy 数组创建消息</li><li>注意, 通过 Numpy 数组创建消息时, 数组的元素类型 (<code>dtype</code>) 应当与消息的数组元素类型相同</li></ul></li>',1),He=e("h3",{id:"图像消息与-rospy",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#图像消息与-rospy","aria-hidden":"true"},"#"),o(" 图像消息与 rospy")],-1),Ke=e("p",null,"参见教程",-1),Ve={href:"https://wiki.ros.org/rospy_tutorials/Tutorials/WritingImagePublisherSubscriber",target:"_blank",rel:"noopener noreferrer"};function We(Qe,Xe){const c=s("RouterLink"),a=s("ExternalLinkIcon");return t(),r("div",null,[p,e("ul",null,[h,e("li",null,[_,o(" 运行节点 "),e("ul",null,[m,g,e("li",null,[o("传递给节点的命令行参数, 对于 Python 可通过"),l(c,{to:"/coding/py/base/module.html#%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%A7%A3%E6%9E%90"},{default:i(()=>[o("命令行解析")]),_:1}),o("有关函数获取")])])])]),E,e("p",null,[o("可通过 launch 文件, 根据功能包的要求与指定的规则启动多个节点"),y,o(" 通常 launch 文件为一类具有后缀 "),k,o(" 的 xml 文件, 位于功能包的文件夹 "),l(c,{to:"/coding/ros/base.html#%E5%8A%9F%E8%83%BD%E5%8C%85%E7%9A%84%E7%BB%84%E6%88%90"},{default:i(()=>[o("launch")]),_:1}),o(" 下")]),e("p",null,[o("更多细节参见 "),e("a",A,[o("https://wiki.ros.org/roslaunch/XML"),l(a)])]),b,e("ul",null,[e("li",null,[o("使用 Python 脚本前, 需要保证 "),e("ul",null,[f,e("li",null,[o("Python 脚本是否有正确的"),l(c,{to:"/coding/py/base/base.html#%E7%8E%AF%E5%A2%83%E8%AF%B4%E6%98%8E"},{default:i(()=>[o("环境说明")]),_:1}),o(", 通常为 "),B]),v])]),x]),w,e("p",null,[o("更多关于 "),C,o(" 的使用见官方文档 "),e("a",S,[o("https://wiki.ros.org/rospy"),l(a)])]),q,e("ul",null,[D,e("li",null,[P,o(" 向指定话题发布消息 "),e("ul",null,[F,e("li",null,[R,o(" 以 "),l(c,{to:"/coding/random/textdata.html#yaml"},{default:i(()=>[o("yaml")]),_:1}),o(" 文件 "),O,o(" 为消息内容")]),L,N])]),M,e("li",null,[T,o(" 列出话题 "),z,o(" 的消息类型, 可配合 "),I,o(" 查看消息类型的具体信息 "),e("ul",null,[e("li",null,[o("将配合"),l(c,{to:"/coding/web/linux/shell.html#%E7%AE%A1%E9%81%93"},{default:i(()=>[o("管道符")]),_:1}),o("或"),l(c,{to:"/coding/web/linux/shell.html#%E4%BD%BF%E7%94%A8%E5%8F%98%E9%87%8F"},{default:i(()=>[o("命令取值")]),_:1}),o("将命令的输出输入到 "),$,o(" 中, 实现查询消息类型的详细信息, 例如 "),Y])])]),G]),U,e("ul",null,[H,e("li",null,[o("以下为消息的字段常用的类型, 更多参见 "),e("a",K,[o("https://wiki.ros.org/msg"),l(a)]),V]),W,e("li",null,[o("在"),l(c,{to:"/coding/ros/base.html#%E5%8A%9F%E8%83%BD%E5%8C%85%E5%85%83%E4%BF%A1%E6%81%AF"},{default:i(()=>[o("功能包元信息")]),_:1}),o("文件中添加自定义消息有关的依赖包 "),Q]),X]),J,e("p",null,[e("a",j,[o("https://wiki.ros.org/rospy_tutorials/Tutorials/Parameters"),l(a)])]),Z,e("ul",null,[ee,e("li",null,[oe,e("ul",null,[le,ne,ce,e("li",null,[o("可配合 "),l(c,{to:"/coding/web/linux/base.html#%E5%86%85%E5%AE%B9%E6%90%9C%E7%B4%A2"},{default:i(()=>[o("grep")]),_:1}),o(" 命令搜索特定话题即有关信息")])])]),ie,e("li",null,[e("p",null,[o("关于更高级的消息回放筛选, 回放视频消息等见文档 "),e("a",ae,[o("https://wiki.ros.org/rosbag/Tutorials"),l(a)])])]),e("li",null,[e("p",null,[o("关于可视化控制消息回放, 见 "),e("a",se,[o("rqt_bag 的使用"),l(a)])])])]),de,e("p",null,[o("参考自 "),e("a",te,[o("https://wiki.ros.org/ROS/YAMLCommandLine"),l(a)])]),e("ul",null,[e("li",null,[o("在 ROS 的命令行通过 "),l(c,{to:"/coding/random/textdata.html#yaml"},{default:i(()=>[o("yaml")]),_:1}),o(" 语法表示数据结构 "),e("ul",null,[e("li",null,[o("纯量可直接使用, 表示方法与 "),l(c,{to:"/coding/random/textdata.html#%E7%BA%AF%E9%87%8F%E8%A1%A8%E7%A4%BA"},{default:i(()=>[o("yaml 纯量表示")]),_:1}),o("相同")]),e("li",null,[o("复合结构使用 "),l(c,{to:"/coding/random/textdata.html#%E5%A4%8D%E5%90%88%E7%BB%93%E6%9E%84"},{default:i(()=>[o("yaml 复合结构的单行表示语法")]),_:1}),o("表示, 如 "),re])])]),e("li",null,[o("在表示数据结构时, 注意需要使用 "),ue,o(" 或 "),pe,o(" 包裹表示数据结构的字符串, 注意区分"),l(c,{to:"/coding/web/linux/shell.html#%E5%AD%97%E7%AC%A6%E4%B8%B2"},{default:i(()=>[o("两种包裹的区别")]),_:1}),he]),_e]),me,e("p",null,[e("a",ge,[o("https://wiki.ros.org/dynamic_reconfigure"),l(a)])]),e("p",null,[o("通过功能包 "),Ee,o(" 时间在节点内动态调节参数的功能"),ye,o(" 使用该功能包前, 需要将该功能包添加到运行时与构建时依赖中, 可参见"),l(c,{to:"/coding/ros/base.html#%E6%B7%BB%E5%8A%A0%E4%BE%9D%E8%B5%96%E5%8A%9F%E8%83%BD%E5%8C%85"},{default:i(()=>[o("添加依赖功能包")]),_:1})]),ke,e("ul",null,[Ae,e("li",null,[o("配置文件编写完成后, 需要赋予配置文件"),l(c,{to:"/coding/web/linux/base.html#%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90"},{default:i(()=>[o("执行权限")]),_:1}),o(", 一般使用命令 "),be]),fe]),Be,e("ul",null,[ve,e("li",null,[o("以客户端的方式, 通过调用参数修改服务, 实现参数的修改, 具体见 "),e("a",xe,[o("https://wiki.ros.org/dynamic_reconfigure/Tutorials/UsingTheDynamicReconfigurePythonClient"),l(a)])]),we]),Ce,Se,e("ul",null,[qe,De,e("li",null,[o("可作为节点使用 "),Pe,o(" 或使用 "),l(c,{to:"/coding/ros/node.html#launch-%E6%96%87%E4%BB%B6"},{default:i(()=>[o("launch 文件")]),_:1}),o("启动, 节点参数即命令参数")])]),Fe,e("p",null,[o("完整使用见 "),e("a",Re,[o("https://wiki.ros.org/rospy/Overview"),l(a)])]),Oe,e("ul",null,[e("li",null,[Le,o(" 发送 INFO 级别的日志 "),Ne,e("ul",null,[e("li",null,[Me,o(" 即索要发送的日志, 与 "),Te,o(" 不同, 只能发送字符串, 因此推荐使用"),l(c,{to:"/coding/py/base/base.html#%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2"},{default:i(()=>[o("格式化字符串")]),_:1})]),ze])]),Ie]),$e,e("p",null,[e("a",Ye,[o("https://wiki.ros.org/rospy_tutorials/Tutorials/numpy"),l(a)])]),e("ul",null,[e("li",null,[o("如果在功能包中使用了 Numpy, 应当在"),l(c,{to:"/coding/ros/base.html#%E5%8A%9F%E8%83%BD%E5%8C%85%E5%85%83%E4%BF%A1%E6%81%AF"},{default:i(()=>[o("功能包元信息")]),_:1}),o("中添加以下依赖信息 "),Ge]),Ue]),He,Ke,e("p",null,[e("a",Ve,[o("https://wiki.ros.org/rospy_tutorials/Tutorials/WritingImagePublisherSubscriber"),l(a)])])])}const Ze=d(u,[["render",We],["__file","node.html.vue"]]);export{Ze as default};
