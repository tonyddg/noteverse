import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as n,e}from"./app-8c5ce49e.js";const t={},p=e(`<h1 id="模块" tabindex="-1"><a class="header-anchor" href="#模块" aria-hidden="true">#</a> 模块</h1><h2 id="模块介绍" tabindex="-1"><a class="header-anchor" href="#模块介绍" aria-hidden="true">#</a> 模块介绍</h2><p>一个 .js 文件即一个模块 模块之间可以通过关键字 import 与 export 相互加载</p><h2 id="使用模块" tabindex="-1"><a class="header-anchor" href="#使用模块" aria-hidden="true">#</a> 使用模块</h2><h3 id="export" tabindex="-1"><a class="header-anchor" href="#export" aria-hidden="true">#</a> export</h3><p>在变量或函数前使用关键字 export 表明此变量或函数可以被其他模块 import</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="import" tabindex="-1"><a class="header-anchor" href="#import" aria-hidden="true">#</a> import</h3><p>加载目标模块, 并将其他模块中 export 的变量或函数导入当前模块, 名称不变</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>fun<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./test.js&quot;</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="浏览器" tabindex="-1"><a class="header-anchor" href="#浏览器" aria-hidden="true">#</a> 浏览器</h3><p>允许在浏览器中使用模块, 但其 type 属性要为 module</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>module<span class="token punctuation">&#39;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>./test.js<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>且只用使用 html:// 访问下, module 才能生效, 直接打开 html 文件则失效</p><h2 id="模块功能" tabindex="-1"><a class="header-anchor" href="#模块功能" aria-hidden="true">#</a> 模块功能</h2><h3 id="默认严格模式" tabindex="-1"><a class="header-anchor" href="#默认严格模式" aria-hidden="true">#</a> 默认严格模式</h3><p>使用模块时, 默认使用严格模式, 变量在使用前必须声明</p><h3 id="模块作用域" tabindex="-1"><a class="header-anchor" href="#模块作用域" aria-hidden="true">#</a> 模块作用域</h3><p>一个模块中的非 export 变量不能被另一个模块访问 当不同的模块 export 了同一个模块的同一个变量 两个模块 export 到的变量为同一个</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// a.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>val<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./test.js&quot;</span>
val <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token comment">// b.js</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模块仅在第一次导入时解析" tabindex="-1"><a class="header-anchor" href="#模块仅在第一次导入时解析" aria-hidden="true">#</a> 模块仅在第一次导入时解析</h3><p>如果同一个模块被导入到多个其他位置，那么它的代码只会执行一次 即使多次 import, 模块仅会运行一次</p><h3 id="模块中的-this" tabindex="-1"><a class="header-anchor" href="#模块中的-this" aria-hidden="true">#</a> 模块中的 this</h3><p>在模块中最外层的 this 为 undefined</p><h2 id="导入与导出语法" tabindex="-1"><a class="header-anchor" href="#导入与导出语法" aria-hidden="true">#</a> 导入与导出语法</h2><h3 id="export-1" tabindex="-1"><a class="header-anchor" href="#export-1" aria-hidden="true">#</a> export {}</h3><p>通过 export {...} 将多个函数/变量同时导出 并且分离 export 与声明</p><h3 id="import-1" tabindex="-1"><a class="header-anchor" href="#import-1" aria-hidden="true">#</a> import *</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> obj <span class="token keyword">from</span> <span class="token string">&quot;./obj.js&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将模块 obj.js 以 obj 的成员的形式导出 此时从 obj.js 导出的变量将成为对象 obj 的成员 不推荐</p><h3 id="import-as" tabindex="-1"><a class="header-anchor" href="#import-as" aria-hidden="true">#</a> import as</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>fun <span class="token keyword">as</span> f<span class="token punctuation">,</span> val <span class="token keyword">as</span> v<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./test.js&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 as 可以对导入的变量起别名</p><h3 id="export-as" tabindex="-1"><a class="header-anchor" href="#export-as" aria-hidden="true">#</a> export as</h3><p>也可以在导出时起别名</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span>fun <span class="token keyword">as</span> f<span class="token punctuation">,</span> val <span class="token keyword">as</span> v<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="export-default" tabindex="-1"><a class="header-anchor" href="#export-default" aria-hidden="true">#</a> export default</h3><p>当只有一个变量/函数被导出时, 可以使用 default 关键字 default 也可视为一个变量名, 在导出时将会把名称为 default 的变量默认导出</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//a.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span> <span class="token comment">// default 导出的变量/函数允许没有名称</span>
<span class="token comment">//b.js</span>
<span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token keyword">export</span><span class="token punctuation">{</span>b <span class="token keyword">as</span> <span class="token keyword">default</span><span class="token punctuation">}</span> <span class="token comment">// 当以名称 default 导出时, 也视为默认导出</span>
<span class="token comment">//import.js</span>
<span class="token keyword">import</span> a <span class="token keyword">from</span> <span class="token string">&quot;./a.js&quot;</span> <span class="token comment">// 导入默认导出模块时不需要加括号</span>
<span class="token keyword">import</span> c <span class="token keyword">from</span> <span class="token string">&quot;./b.js&quot;</span> <span class="token comment">// 也不要求与导出变量同名</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不推荐</p><h3 id="export-from" tabindex="-1"><a class="header-anchor" href="#export-from" aria-hidden="true">#</a> export from</h3><p>导入后导出</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span><span class="token keyword">default</span> <span class="token keyword">as</span> a<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./a.js&quot;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>fun<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./test.js&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当模块的功能由多个小模块构成时, 可将功能在一个 index.js 中集中导出 可以使用此方法</p><h3 id="动态导入" tabindex="-1"><a class="header-anchor" href="#动态导入" aria-hidden="true">#</a> 动态导入</h3><p>import 语句不能用于 if 等结构内 可以使用 import() 以动态导入(不是函数, 为语法结构) 将返回一个 result 为所有导出的 Promise</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;./a.js&quot;</span><span class="token punctuation">)</span>
obj<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 当有默认导出时, 导出的变量名为 default</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="node-js-模块" tabindex="-1"><a class="header-anchor" href="#node-js-模块" aria-hidden="true">#</a> Node.js 模块</h2><h3 id="导入" tabindex="-1"><a class="header-anchor" href="#导入" aria-hidden="true">#</a> 导入</h3><p>node.js 中使用函数 require 导入模块 对于 npm 管理的模块可以直接输入模块名 否则要指定路径</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./obj&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>除了 .js 还可以导入 .json 与 .node (二进制模块) 其中, .js 可以省略</p><h3 id="导出" tabindex="-1"><a class="header-anchor" href="#导出" aria-hidden="true">#</a> 导出</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导出多个变量时的导出方式</span>
exports<span class="token punctuation">.</span><span class="token function-variable function">fun</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token comment">// 导出单个变量的导出方式</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
<span class="token comment">//只能使用其中一种</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,54),o=[p];function i(c,r){return s(),n("div",null,o)}const u=a(t,[["render",i],["__file","模块.html.vue"]]);export{u as default};
