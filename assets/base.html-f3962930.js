import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as d,c as p,b as e,d as n,a,w as l,e as t}from"./app-8c5ce49e.js";const u="/noteverse/assets/base_example_formlayout-3d1ba621.png",r={},h=e("h1",{id:"pyside6-笔记",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#pyside6-笔记","aria-hidden":"true"},"#"),n(" PySide6 笔记")],-1),E=e("p",null,[n("介绍模块 PySide6 的使用"),e("br"),n(" 可通过 "),e("code",null,"pip install PySide6"),n(" 安装")],-1),B=e("p",null,"主要参考教程",-1),k={href:"https://doc.qt.io/qtforpython-6/tutorials/index.html",target:"_blank",rel:"noopener noreferrer"},_={href:"https://www.pythonguis.com/pyqt6-tutorial/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://doc.qt.io/qtforpython-6/api.html",target:"_blank",rel:"noopener noreferrer"},m=e("h2",{id:"基础使用",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#基础使用","aria-hidden":"true"},"#"),n(" 基础使用")],-1),b={href:"https://www.pythonguis.com/tutorials/pyside6-creating-your-first-window/",target:"_blank",rel:"noopener noreferrer"},g=t(`<p>一个 PyQt 程序具有如下基本结构</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 导入组件库</span>
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QMainWindow

app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span><span class="token punctuation">)</span>
window <span class="token operator">=</span> QMainWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>
window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 开始事件循环</span>
app<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="核心模块" tabindex="-1"><a class="header-anchor" href="#核心模块" aria-hidden="true">#</a> 核心模块</h3><p>在 PySide 中, 以 <code>PySide6</code> 为根模块, 其下主要有三个 Qt 的核心模块</p><ul><li><code>PyWidgets</code> 包含了大部分窗口组类</li><li><code>PyCore</code> 包含了与组件样式有关类 <ul><li>其中 <code>PySide6.PyCore.Qt</code> 模块作为一个命名空间, 包含了大部分 Qt 枚举量或结构体模块, 下文中的 <code>Qt</code> 默认指该模块</li></ul></li><li><code>PyGui</code> 包含了与组件行为有关类</li></ul><p>一般使用时</p><ul><li><code>from PySide6.XXX import XXX</code> 的语法导入所需类</li><li>如果有多个类, 可使用括号包含多个类, 在括号内允许换行</li><li>PySide 中, 类一般命名为 <code>Q + &lt;类名称&gt;</code></li></ul><h3 id="事件循环" tabindex="-1"><a class="header-anchor" href="#事件循环" aria-hidden="true">#</a> 事件循环</h3><p>在 PyQt 中, 使用特殊的类 <code>PyWidgets.QApplication</code> 管理事件循环<br> 在事件循环中, <code>QApplication</code> 实例将以此读取事件队列中的事件, 并交给对应的处理程序处理并更新窗口</p><p>对于任何 PyQt 程序</p><ul><li>必有有且仅有一个 <code>QApplication</code> 实例, 并在程序最后调用类的方法 <code>exec()</code> 启动事件循环, 才能使窗口生效</li><li><mark>将调用 <code>show()</code> 方法的组件对象将作为窗口的根组件</mark>, 因此单窗口程序中, 必须有且仅有一个组件对象调用此方法</li><li>任何组件都可作为根组件, 对于简单窗口可使用组件基类 <a href="#%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%B1%BB">QWidget</a>, 对于标准界面可使用主窗口组件 <a href="#%E6%A0%87%E5%87%86%E7%95%8C%E9%9D%A2">QMainWindow</a></li><li>当最后一个窗口被关闭后, 事件循环结束, <mark>方法 <code>exec()</code> 返回并继续执行之后的代码</mark></li><li>除非特殊说明, 在事件循环结束后, 所有组件方法都将失效, <a href="#%E4%BA%A4%E4%BA%92%E6%9C%BA%E5%88%B6">交互机制</a>也将失效</li></ul><h3 id="组件使用" tabindex="-1"><a class="header-anchor" href="#组件使用" aria-hidden="true">#</a> 组件使用</h3><p>组件即窗口中显示的交互元素, 一般视为一个对象, 且所有组件对象都具有基类 <code>QWidget</code></p><p>在 Qt 中, 一般使用继承的方法自定义组件内容, 例如以下代码</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 继承组件库中需要自定义的组件类</span>
<span class="token keyword">class</span> <span class="token class-name">MainWindow</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        button <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">&quot;Press Me!&quot;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>setCentralWidget<span class="token punctuation">(</span>button<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时</p><ul><li>在自定义组件类的构造函数第一行必须调用 <code>super().__init__()</code>, 执行基类的构造函数</li><li>将子组件的对象作为成员管理</li><li>通过 <code>self</code> 执行基类方法设置组件</li></ul><h2 id="交互机制" tabindex="-1"><a class="header-anchor" href="#交互机制" aria-hidden="true">#</a> 交互机制</h2><p>参考教程</p>`,19),A={href:"https://doc.qt.io/qtforpython-6/tutorials/basictutorial/signals_and_slots.html",target:"_blank",rel:"noopener noreferrer"},v=e("br",null,null,-1),Q={href:"https://www.pythonguis.com/tutorials/pyside6-signals-slots-events/",target:"_blank",rel:"noopener noreferrer"},y=e("p",null,"在 Qt 中, 使用信号槽 (Signal & Slots), 事件 (Event) 三种机制处理用户与界面之间的交互",-1),x=e("h3",{id:"信号槽机制",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#信号槽机制","aria-hidden":"true"},"#"),n(" 信号槽机制")],-1),S=e("p",null,[n("当组件受到如点击, 内容修改等操作时, 将产生一个信号 (Signal)"),e("br"),n(" 通常使用一个回调函数接收这一信号, 将接收者称为槽 (Slots)"),e("br"),n(" 在 PyQt 中, 组件中与信号同名的成员变量为信号实例, 并通过信号实例管理与注册接收此信号的槽")],-1),C=t(`<h4 id="信号槽机制的基本使用" tabindex="-1"><a class="header-anchor" href="#信号槽机制的基本使用" aria-hidden="true">#</a> 信号槽机制的基本使用</h4><p>信号槽的基本使用示例如下 (忽略类定义)</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    self<span class="token punctuation">.</span>button <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">&quot;Press Me!&quot;</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>button<span class="token punctuation">.</span>setCheckable<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>

    self<span class="token punctuation">.</span>is_button_check <span class="token operator">=</span> <span class="token boolean">False</span>
    self<span class="token punctuation">.</span>button<span class="token punctuation">.</span>setChecked<span class="token punctuation">(</span>self<span class="token punctuation">.</span>is_button_check<span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>button<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>button_clicked_handler<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@Slot</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">button_clicked_handler</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> check<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>is_button_check <span class="token operator">=</span> check
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Clicked </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>is_button_check<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于以上示例</p>`,4),q=e("li",null,"通过组件与信号同名的成员变量访问管理信号的信号实例对象",-1),w=e("li",null,[n("自定义槽 (回调函数) 时, 应当使用 "),e("a",{href:"#%E6%A7%BD%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89"},"@Slot 修饰")],-1),F=e("li",null,[n("通过信号实例对象的方法 "),e("code",null,"connect(fun)"),n(" 注册接收信号的槽 (回调函数)")],-1),P=e("li",null,"一个信号允许同时被多个槽接收",-1),T=e("li",null,"部分信号还将附带数据, 可通过回调函数的参数接收 (允许忽略)",-1),D=e("li",null,"保存变量需要初始化, 一般还需要将组件状态设置为与保存变量的初始值相同",-1),W=e("li",null,"除了使用自定义的回调函数作为槽, 部分组件还会以成员函数的方式提供槽作为接口 (通常这些函数即部分特殊的组件设置函数), 通过此方法实现组件之间的连接",-1),M=e("h4",{id:"自定义信号与槽",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#自定义信号与槽","aria-hidden":"true"},"#"),n(" 自定义信号与槽")],-1),L={href:"https://doc.qt.io/qtforpython-6/PySide6/QtCore/Signal.html#PySide6.QtCore.Signal",target:"_blank",rel:"noopener noreferrer"},R={href:"https://doc.qt.io/qtforpython-6/PySide6/QtCore/Slot.html#PySide6.QtCore.Slot",target:"_blank",rel:"noopener noreferrer"},I=e("code",null,"QtCore",-1),G=e("p",null,[n("信号定义类 "),e("code",null,"Signal(*types)")],-1),N=e("li",null,[n("如果要给组件定义信号, "),e("mark",null,"应当将信号定义类作为组件的静态成员"),n(", Qt 中将在组件构造函数中, 将其转移为同名的信号实例对象 "),e("code",null,"SignalInstance")],-1),O=e("code",null,"types",-1),V=e("ul",null,[e("li",null,"不传入参数, 表明信息没有附带的数据"),e("li",null,"传入多个参数, 表明信号附带多个数据"),e("li",null,[n("使用 "),e("code",null,"object"),n(" 可表示任意 Python 类型 (Python 中一切变量为对象, 一切对象有基类 "),e("code",null,"object"),n(")")])],-1),z=e("li",null,[n("通常作为组件的成员变量, 例如 "),e("code",null,"self.clicked = Signal(bool)")],-1),X=e("code",null,"QObject",-1),K=t(`<p>通过信号实例对象的方法注册信号</p><ul><li>方法 <code>emit(*args)</code> 用于发出信号传递到所有绑定槽中 <ul><li>变长参数 <code>*args</code> 表明此信号所附带的数据, 传入的各个参数类型需要与构造函数中的参数 <code>types</code> 类型相对应</li></ul></li><li>方法 <code>connect(receiver)</code> 用于为信号注册槽 <ul><li>参数 <code>receiver</code> 以可调用对象为参数, 但最好是经 <code>@Slot</code> 修饰的方法 方法 <code>disconnect(receiver)</code> 取消已经注册的槽</li><li>参数 <code>receiver</code> 以可调用对象为参数, 但最好是经 <code>@Slot</code> 修饰的方法</li></ul></li></ul><p>槽修饰器 <code>@Slot(*result)</code></p><ul><li>变长参数 <code>result</code> 表明槽接收的数据类型, 使用与信号实例类 <code>Signal</code> 的构造函数类似</li></ul><p>信号使用示例如下</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">InputArea</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 定义为组件的静态成员</span>
    updateText <span class="token operator">=</span> Signal<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>teInput <span class="token operator">=</span> QTextEdit<span class="token punctuation">(</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>layout_base <span class="token operator">=</span> QBoxLayout<span class="token punctuation">(</span>QBoxLayout<span class="token punctuation">.</span>Direction<span class="token punctuation">.</span>TopToBottom<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>layout_base<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>QLabel<span class="token punctuation">(</span><span class="token string">&quot;输入区&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>layout_base<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>teInput<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>setLayout<span class="token punctuation">(</span>self<span class="token punctuation">.</span>layout_base<span class="token punctuation">)</span>

        <span class="token comment"># 通过同名方法访问对应的信号实例, 通过 emit 方法发送信号</span>
        self<span class="token punctuation">.</span>teInput<span class="token punctuation">.</span>textChanged<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>updateText<span class="token punctuation">.</span>emit<span class="token punctuation">(</span>self<span class="token punctuation">.</span>teInput<span class="token punctuation">.</span>toPlainText<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),H=e("br",null,null,-1),j={href:"https://www.pythonguis.com/tutorials/pyside6-transmitting-extra-data-qt-signals/",target:"_blank",rel:"noopener noreferrer"},U=e("h4",{id:"查询组件的信号与槽",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#查询组件的信号与槽","aria-hidden":"true"},"#"),n(" 查询组件的信号与槽")],-1),J=e("p",null,"通过官方文档可以查看组件包含了哪些可用的信号与槽",-1),Y={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/index.html#module-PySide6.QtWidgets",target:"_blank",rel:"noopener noreferrer"},Z=t("<li>在 <code>Synopsis</code> 节下的 <code>Signals</code> 与 <code>Slots</code> 小节分别包含了组件所提供的信号与槽</li><li>表示信号与槽时, 括号 <code>()</code> 内的内容为信号所附带或槽接收信号所必要的参数</li><li>除了组件本身, 特别是基础共性的信号, 还要注意组件的基类可能也会提供信号与槽 (例如按钮组件 <code>QPushButton</code> 的 <code>clicked</code> 信号由基类 <code>QAbstractButton</code> 提供)</li>",3),$=t(`<h3 id="事件机制" tabindex="-1"><a class="header-anchor" href="#事件机制" aria-hidden="true">#</a> 事件机制</h3><p>Qt 中将用户与组件之间的交互称为事件 (Event)<br> 组件通常包含一系列名称为 <code>xxxEvent</code> 的虚函数, 当事件发生时这些函数将被调用, 并且函数还将接收包含了与事件有关信息的事件结构体</p><h4 id="事件的基本使用" tabindex="-1"><a class="header-anchor" href="#事件的基本使用" aria-hidden="true">#</a> 事件的基本使用</h4><p>事件的基本使用示例如下</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> Qt
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">class</span> <span class="token class-name">MainWindow</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">def</span> <span class="token function">mousePressEvent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> e<span class="token punctuation">.</span>button<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Qt<span class="token punctuation">.</span>MouseButton<span class="token punctuation">.</span>LeftButton<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Left Button Clicked&quot;</span><span class="token punctuation">)</span>

        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mousePressEvent<span class="token punctuation">(</span>e<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于以上示例</p><ul><li>通常事件的回调函数都是虚函数, 且接收事件对应的事件结构体</li><li>通过访问事件结构体下的方法以获取事件信息, 对于不同类型的事件, 事件结构体可能不同</li><li>由于自定义组件一般以其他已有组件为基类, 因此建议在事件回调函数的最后使用 <code>super().xxxEvent(event)</code> 调用基类的事件回调函数</li><li>对于完全自定义的组件, 还可调用事件结构体的 <code>accept()</code> 与 <code>ignore()</code> 方法 <ul><li>当事件产生时, 将由最底层的组件向其父组件传递这一事件, 并以此接收处理这一事件</li><li>通过 <code>accecpt()</code> 方法, 将标记此事件为处理完毕, 此时将不会传递给父组件处理</li><li>通过 <code>ignore()</code> 方法, 事件将继续传递, 相当于该组件相对于此事件透明</li></ul></li><li>在实际使用中, <mark>事件机制通常用于自定义组件中, 在事件回调函数中判断<a href="#%E4%BF%A1%E5%8F%B7%E6%A7%BD%E6%9C%BA%E5%88%B6">信号</a>是否发生</mark>, 并发出信号</li></ul><h4 id="查询组件的事件" tabindex="-1"><a class="header-anchor" href="#查询组件的事件" aria-hidden="true">#</a> 查询组件的事件</h4><p>通过官方文档可以查看组件能处理的事件以及事件的事件结构体</p>`,9),ee=e("code",null,"Event",-1),ne={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QWidget.html#virtual-methods",target:"_blank",rel:"noopener noreferrer"},ae=e("code",null,"Virtual methods",-1),oe=e("li",null,"事件回调函数接收的参数类型即事件结构体, 可通过超链接查看其中包含的信息方法",-1),te=e("li",null,[n("除了事件结构体本身, 特别是基础共性的信号, 其基类可能也会提供信息方法 (例如鼠标事件 "),e("code",null,"QMouseEvent"),n(" 的 "),e("code",null,"button()"),n(" 按键信息由基类 "),e("code",null,"QSinglePointEvent"),n(" 提供)")],-1),se=e("li",null,[n("事件信息方法的返回值一般是 "),e("code",null,"QtCore.Qt"),n(" 模块定义下的常量或类, 应当详细查看官方文档")],-1),le=t('<p>以常用的鼠标事件为例</p><ul><li>鼠标事件主要包含以下四种 <ul><li><code>mouseMoveEvent</code> 鼠标移动事件 (默认仅在鼠标按下时触发)</li><li><code>mousePressEvent</code> 鼠标按下事件</li><li><code>mouseReleaseEvent</code> 鼠标释放事件</li><li><code>mouseDoubleClickEvent</code> 鼠标双击事件</li></ul></li><li>四种事件均使用 <code>QMouseEvent</code> 作为事件结构体, 常用信息方法为 <ul><li><code>button()</code> 此时鼠标按下的按键, 返回值为定义于 <code>Qt.MouseButton</code> 下的枚举量</li><li><code>pos()</code> 此时鼠标相对组件的整数坐标, 返回值为定义于 <code>Qt.QPoint</code> 下的类, 通过方法 <code>x(), y()</code> 访问具体位置</li><li><code>globalPos()</code> 此时鼠标相对窗口的整数坐标, 返回值为定义于 <code>Qt.QPoint</code> 下的类</li></ul></li></ul><h2 id="基本组件" tabindex="-1"><a class="header-anchor" href="#基本组件" aria-hidden="true">#</a> 基本组件</h2>',3),ie={href:"https://www.pythonguis.com/tutorials/pyside6-widgets/",target:"_blank",rel:"noopener noreferrer"},ce={href:"https://doc.qt.io/qtforpython-6/overviews/widget-classes.html#widgets-classes",target:"_blank",rel:"noopener noreferrer"},de={href:"https://doc.qt.io/qtforpython-6/overviews/widget-classes.html#basic-widget-classes",target:"_blank",rel:"noopener noreferrer"},pe=e("h3",{id:"组件基类",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#组件基类","aria-hidden":"true"},"#"),n(" 组件基类")],-1),ue={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QWidget.html#PySide6.QtWidgets.QWidget",target:"_blank",rel:"noopener noreferrer"},re=t('<ul><li>关于样式的通用操作, 参见<a href="#%E7%BB%84%E4%BB%B6%E6%A0%B7%E5%BC%8F">组件样式</a></li><li>关于子组件的插入与布局, 参见<a href="#%E7%BB%84%E4%BB%B6%E5%B8%83%E5%B1%80">组件布局</a></li></ul><h4 id="组件禁用与隐藏" tabindex="-1"><a class="header-anchor" href="#组件禁用与隐藏" aria-hidden="true">#</a> 组件禁用与隐藏</h4><p>组件开启与禁用</p><ul><li>组件具有开启与禁用两个状态, 当组件关闭时, 其中的子组件也将关闭, 且组件无法被交互</li><li>方法 <code>setEnable(arg__1)</code> 参数为布尔值, 设置组件为开启 (True) 或禁用 (False) 状态, 该方法为一个<a href="#%E4%BF%A1%E5%8F%B7%E6%A7%BD%E6%9C%BA%E5%88%B6">槽</a></li><li>方法 <code>isEnable()</code> 返回组件当前的状态, 当有效时返回 <code>True</code></li></ul><p>组件显示与隐藏</p><ul><li>除了开启与禁用, 还可以设置组件的显示与隐藏, 当组件被隐藏时, 将完全不会被处理与显示组件及其子组件</li><li>方法 <code>hide()</code> 与 <code>show()</code> 将设置组件为隐藏与显示状态, 这两个方法同时为<a href="#%E4%BF%A1%E5%8F%B7%E6%A7%BD%E6%9C%BA%E5%88%B6">槽</a></li><li>方法 <code>isHidden()</code> 可以查询组件当前是否被隐藏, 隐藏时返回 <code>True</code></li><li>对于窗口, 显示与隐藏等效于窗口是否打开</li></ul><h4 id="组件大小规则" tabindex="-1"><a class="header-anchor" href="#组件大小规则" aria-hidden="true">#</a> 组件大小规则</h4><p>组件的大小受到组件内容与组件在<a href="#%E5%B8%83%E5%B1%80%E6%96%B9%E6%B3%95">布局中的可用空间</a>两者的约束, 需要设置一个规则确定组件如何确定自己的大小</p><p>方法 <code>setSizePolicy(horizontal, vertical)</code> 用于设置组件宽度与高度的大小规则</p><ul><li><code>horizontal, vertical</code> 组件在宽度与高度的大小规则, 参数值的类型为 <code>QtWidgets</code> 模块下的类 <code>QSizePolicy</code> 的嵌套枚举类型 <code>QSizePolicy.Policy</code>, 可用的值有 <ul><li><code>Policy.Fixed</code> 使用组件内容决定的推荐大小, 且不会随布局改变 (用于希望组件刚好包括所有内容时使用)</li><li><code>Policy.Minimum</code> 组件的大小尽可能小, 以适应其他组件的</li><li><code>Policy.Maximum</code> 组件的大小尽可能大, 以利用可用空间</li><li><code>Policy.Expanding</code> 组件尽可能利用所有可用空间</li><li><code>Policy.Preferred</code> 根据需要在推荐大小的基础上伸缩 (一般情况下的默认设置)</li></ul></li></ul><p>方法 <code>setMinimumWidth(minw)</code> 设置组件的最小宽度</p><ul><li><code>minw</code> 最小宽度, 单位像素</li><li>常用于为<a href="#%E8%BE%93%E5%85%A5%E6%A0%8F%E7%BB%84%E4%BB%B6">输入栏</a>等输入组件预留空间</li></ul><p>默认情况下, 具体的组件的创建时都将选择合适的大小规则, 仅在必要的情况下使用, 例如</p><ul><li><a href="#%E6%8A%BD%E8%B1%A1%E6%8C%89%E9%92%AE%E7%BB%84%E4%BB%B6">按钮组件</a>在高度方向使用固定大小, 长度方向则希望尽可能小, 以此实现最好的显示效果</li><li><a href="#%E6%A0%87%E7%AD%BE%E7%BB%84%E4%BB%B6">标签组件</a>总是倾向于利用所有可用空间</li><li>对于可滚动界面的滚动条应当使用 <code>Policy.Expanding</code>, 以占满其所在空间</li></ul><h4 id="组件通用方法" tabindex="-1"><a class="header-anchor" href="#组件通用方法" aria-hidden="true">#</a> 组件通用方法</h4><p>构造函数 <code>QWidget(parent = None)</code></p><ul><li><code>parent</code> 组件的父组件, 如果没有或暂未确定传入 <code>None</code></li><li>一般经过布局的组件不需要指定, 但对于 <a href="#%E5%91%BD%E4%BB%A4%E7%BB%84%E4%BB%B6">QAction</a> 等可插入多个不同组件的必须指定, <a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BC%9A%E8%AF%9D%E7%AA%97%E5%8F%A3">QDialog</a> 等独立窗口建议指定</li></ul><p>方法 <code>setToolTip(arg__1)</code> 设置当鼠标停留在组件上时显示的提示信息</p><ul><li><code>arg__1</code> 字符串, 信息内容</li></ul><p>槽函数 <code>deletelater()</code> 销毁组件</p><ul><li>该槽函数来自 <code>QObject</code>, 任何 Qt 对象均可调用</li></ul><h4 id="窗口专用方法" tabindex="-1"><a class="header-anchor" href="#窗口专用方法" aria-hidden="true">#</a> 窗口专用方法</h4><p>当以 <code>QWidget</code> 组件作为窗口应用时, 可通过以下方法设置窗口样式</p><p>方法 <code>setWindowIcon(icon)</code> 设置窗口图标</p><ul><li><code>icon</code> 窗口图标, 传入<a href="#%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90-qpixmap">图片资源对象</a></li></ul><p>槽函数 <code>setWindowTitle(arg__1)</code> 设置窗口标题</p><ul><li><code>arg__1</code> 窗口标题内容, 传入字符串</li></ul><p>事件处理方法 <code>closeEvent(QCloseEvent event)</code> 当窗口被关闭时发出</p><ul><li>通过重载此方法实现事件处理, 参见<a href="#%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6">事件机制</a></li></ul><h3 id="标签组件" tabindex="-1"><a class="header-anchor" href="#标签组件" aria-hidden="true">#</a> 标签组件</h3>',30),he={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QLabel.html#PySide6.QtWidgets.QLabel",target:"_blank",rel:"noopener noreferrer"},Ee=t('<h4 id="标签内容" tabindex="-1"><a class="header-anchor" href="#标签内容" aria-hidden="true">#</a> 标签内容</h4><p>构造函数 <code>QLabel(text = None)</code></p><ul><li>参数 <code>text</code> 为字符串, 标签内的文本内容, 允许传入 <code>None</code>, 在之后设置</li></ul><p>组件方法 <code>setText(arg__1)</code> 可设置标签内的文本内容</p><ul><li>参数 <code>arg__1</code> 为字符串, 即标签内新的文本内容</li><li>该方法可作为<a href="#%E4%BF%A1%E5%8F%B7%E6%A7%BD%E6%9C%BA%E5%88%B6">槽</a>使用</li></ul><p>组件方法 <code>text()</code> 可获取标签内的文本内容</p><ul><li>返回值类型为字符串</li></ul><p>方法 <code>setTextFormat(arg__1)</code> 设置对于组件的文本内容属于何种类型</p><ul><li>参数 <code>arg__1</code> 为枚举类型 <code>Qt.TextFormat</code>, 可取值如下 <ul><li>值 <code>TextFormat.AutoText</code> 自动判断文本类型是普通文本还是富文本 (默认)</li><li>值 <code>TextFormat.PlainText</code> 不对内容进行解析</li><li>值 <code>TextFormat.RichText</code> 文本类型为富文本, 具体使用参见<a href="#%E5%AF%8C%E6%96%87%E6%9C%AC%E8%A1%A8%E7%A4%BA">富文本表示</a></li><li>值 <code>TextFormat.MarkdownText</code> 文本类型为 Markdown, 仅用于 Qt5 及更新版本</li></ul></li></ul><p>使用富文本时, 当文本中的超链接被点击</p><ul><li>将体现为<a href="#%E4%BF%A1%E5%8F%B7%E6%A7%BD%E6%9C%BA%E5%88%B6">信号</a> <code>linkActivated(link)</code> 与 <code>linkHovered(link)</code>, 信号数据为参数 <code>href</code> 的值, 类型为字符串</li><li>通过组件方法 <code>setOpenExternalLinks(open)</code> 设置参数 <code>open</code> 为 <code>True</code>, 将尝试在点击超链接时打开网页, 默认为 <code>False</code></li></ul><h4 id="图片标签" tabindex="-1"><a class="header-anchor" href="#图片标签" aria-hidden="true">#</a> 图片标签</h4><p>标签还可用于显示图片</p><p>组件方法 <code>setPixmap(arg__1)</code> 可设置标签内的文本内容</p><ul><li>参数 <code>arg__1</code> 为 <a href="#%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90-qpixmap">QPixmap</a> 对象, 即标签内显示的图片</li></ul><p>组件方法 <code>pixmap()</code> 获取当前组件内的图片</p><ul><li>返回值为 <a href="#%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90-qpixmap">QPixmap</a> 对象</li></ul><p>组件方法 <code>setScaledContents(arg__1)</code> 设置图片显示方式</p><ul><li><code>arg__1</code> 设置为 <code>True</code> 时将尝试拉伸整个图片, 以使其适应组件空间, 默认为 <code>False</code></li></ul><h4 id="显示样式" tabindex="-1"><a class="header-anchor" href="#显示样式" aria-hidden="true">#</a> 显示样式</h4><p>组件方法 <code>setAlignment(arg__1)</code> 设置内容的对齐方式</p><ul><li>参数 <code>arg__1</code> 参数值参见<a href="#%E5%AF%B9%E9%BD%90%E6%A0%B7%E5%BC%8F%E5%80%BC">对齐设置</a></li></ul><p>标签内的文本样式设置参见<a href="#%E6%96%87%E6%9C%AC%E5%AD%97%E4%BD%93%E6%A0%B7%E5%BC%8F-qfont">文本字体样式</a></p><p>默认情况下, 标签组件将使用尽可能大的空间, 如果希望标签大小刚好与内容对齐, 可参见<a href="#%E7%BB%84%E4%BB%B6%E5%A4%A7%E5%B0%8F%E8%A7%84%E5%88%99">组件大小规则</a></p><h3 id="抽象按钮组件" tabindex="-1"><a class="header-anchor" href="#抽象按钮组件" aria-hidden="true">#</a> 抽象按钮组件</h3>',25),Be={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QAbstractButton.html#PySide6.QtWidgets.QAbstractButton",target:"_blank",rel:"noopener noreferrer"},ke=t('<p>一般不会直接使用该组件, 但如果希望自定义按钮, 则应该以 <code>QAbstractButton</code> 为基类, 具体需要实现那些虚函数详见文档</p><h4 id="按钮通用设置" tabindex="-1"><a class="header-anchor" href="#按钮通用设置" aria-hidden="true">#</a> 按钮通用设置</h4><p>方法 <code>setText(text)</code> 设置按钮文本内容</p><ul><li>参数 <code>text</code> 字符串, 按钮文本内容, 通常为纯文本 (可通过 <code>\\n</code> 换行), 显示在图标后</li><li>按钮不支持<a href="#%E5%AF%8C%E6%96%87%E6%9C%AC%E8%A1%A8%E7%A4%BA">富文本</a>, 但可通过<a href="#%E6%96%87%E6%9C%AC%E5%AD%97%E4%BD%93%E6%A0%B7%E5%BC%8F-qfont">字体设置</a>修改样式</li></ul><p>方法 <code>setIcon(icon)</code> 设置文本前图标</p><ul><li>参数 <code>icon</code> <a href="#%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90-qpixmap">QPixmap</a> 类的图片资源, 显示在文本前</li><li>通过方法 <code>setIconSize(size)</code> 设置图标大小, 参数为 <a href="#%E5%B0%BA%E5%AF%B8%E6%A0%B7%E5%BC%8F%E5%80%BC">QSize</a> 类的大小结构体</li></ul><p>方法 <code>setShortcut(key)</code> 设置按钮快捷键</p><ul><li>参数 <code>key</code> <a href="#%E9%94%AE%E7%9B%98%E6%8C%89%E9%94%AE%E4%B8%8E%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%A0%B7%E5%BC%8F%E5%80%BC">QKeySequene</a> 类的按键组合, 设置后按下设置按键组合将等效于点击按钮</li><li>例如 <code>self.button.setShortcut(QKeySequence(Qt.Key.Key_0))</code></li></ul><p>方法 <code>setCheckable(arg__1)</code> 设置按钮响应方式</p><ul><li>参数 <code>arg__1</code> 为布尔值, 对于 <code>QAbstractButton</code> 默认为 <code>False</code></li><li>设置为 <code>True</code> 时, 按钮具有自锁能力, 即按下后不会弹起, 存在按下与弹起两种状态</li><li>设置为 <code>False</code> 时, 按钮在按下后会立即弹起, 只有一种状态</li><li>对于不同按钮该设置默认值不同 <ul><li><a href="#%E6%99%AE%E9%80%9A%E6%8C%89%E9%92%AE">普通按钮</a>默认为 <code>False</code></li><li><a href="#%E9%80%89%E6%A1%86%E7%BB%84%E4%BB%B6">选框组件</a>默认为 <code>True</code></li></ul></li><li>可通过槽函数 <code>setChecked(arg__1)</code> 设置自锁按钮的状态</li></ul><h4 id="按下按钮信号" tabindex="-1"><a class="header-anchor" href="#按下按钮信号" aria-hidden="true">#</a> 按下按钮信号</h4><p>信号 <code>clicked()</code> 用于判断<a href="#%E6%8C%89%E9%92%AE%E9%80%9A%E7%94%A8%E8%AE%BE%E7%BD%AE">非自锁按钮</a></p><ul><li>信号将在以下条件下触发: 按钮被鼠标按下, 组件方法 <a href="#%E6%8C%89%E9%92%AE%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95">click</a> 生成一次点击, <a href="#%E6%8C%89%E9%92%AE%E9%80%9A%E7%94%A8%E8%AE%BE%E7%BD%AE">按钮快捷键</a>被按下时</li><li>信号在以下条件下不会触发: 组件方法 <a href="#%E6%8C%89%E9%92%AE%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95">setChecked</a> 修改按钮自锁状态, <a href="#%E7%BB%84%E4%BB%B6%E7%A6%81%E7%94%A8%E4%B8%8E%E9%9A%90%E8%97%8F">组件被禁用</a>时</li></ul><p>信号 <code>toggled(checked)</code> <mark>用于判断<a href="#%E6%8C%89%E9%92%AE%E9%80%9A%E7%94%A8%E8%AE%BE%E7%BD%AE">自锁按钮</a></mark></p><ul><li>信号将在按钮状态发生改变时触发, 包括用户或组件方法 (<code>click</code>, <code>setChecked</code> 等)</li><li>布尔型数据 <code>checked</code><ul><li>当按钮在信号发出后处于按下状态时, 值为 <code>True</code></li><li>相反按钮处于弹起状态时, 值为 <code>True</code></li></ul></li></ul><p>对于自锁按钮 (参见 <a href="#%E6%8C%89%E9%92%AE%E9%80%9A%E7%94%A8%E8%AE%BE%E7%BD%AE">setCheckable</a> 方法), 还有其他精细信号, 详见文档</p><h4 id="按钮操作方法" tabindex="-1"><a class="header-anchor" href="#按钮操作方法" aria-hidden="true">#</a> 按钮操作方法</h4><p>以下方法可对按钮进行操作, 这些方法同时也是<a href="#%E4%BF%A1%E5%8F%B7%E6%A7%BD%E6%9C%BA%E5%88%B6">槽函数</a></p><ul><li><code>click()</code> 相当于按钮被点击了一次, 产生了响应的信号, 如果按钮具有自锁能力, 体现为按钮状态切换</li><li><code>animateClick()</code> 与 <code>click()</code> 相同, 但还将产生一个按钮被按下的动画</li><li><code>setChecked(arg__1)</code> 用于具有自锁能力 (参见 <a href="#%E6%8C%89%E9%92%AE%E9%80%9A%E7%94%A8%E8%AE%BE%E7%BD%AE">setCheckable</a> 方法) 的按钮, 设置按钮当前的状态, 参数为布尔值, 含义与 <a href="#%E6%8C%89%E4%B8%8B%E6%8C%89%E9%92%AE%E4%BF%A1%E5%8F%B7">click</a> 信号的信息 <code>checked</code> 类似</li></ul><p>当<a href="#%E7%BB%84%E4%BB%B6%E7%A6%81%E7%94%A8%E4%B8%8E%E9%9A%90%E8%97%8F">组件被禁用</a>时, 以上方法不会生效</p><h4 id="普通按钮" tabindex="-1"><a class="header-anchor" href="#普通按钮" aria-hidden="true">#</a> 普通按钮</h4><p>以下三种按钮均为普通按钮, 仅存在部分使用细节不同, 是 <a href="#%E6%8A%BD%E8%B1%A1%E6%8C%89%E9%92%AE%E7%BB%84%E4%BB%B6">QAbstractButton</a>的三个子类</p>',22),_e={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QPushButton.html#PySide6.QtWidgets.QPushButton",target:"_blank",rel:"noopener noreferrer"},fe=e("ul",null,[e("li",null,[n("方法 "),e("code",null,"setAutoDefault(arg__1)"),n(" 可将按钮设置为自动强调状态, 即如果按钮在上次被点击过, 将会以额外边框修饰强调 (默认关闭)")])],-1),me={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QCommandLinkButton.html#PySide6.QtWidgets.QCommandLinkButton",target:"_blank",rel:"noopener noreferrer"},be=e("ul",null,[e("li",null,[n("方法 "),e("code",null,"setDescription(description)"),n(" 设置按钮的描述内容, 同样是纯文本, 按钮的标题由 "),e("a",{href:"#%E6%8C%89%E9%92%AE%E9%80%9A%E7%94%A8%E8%AE%BE%E7%BD%AE"},"setText"),n(" 设置")])],-1),ge={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QToolButton.html#PySide6.QtWidgets.QToolButton",target:"_blank",rel:"noopener noreferrer"},Ae=e("ul",null,[e("li",null,[n("方法 "),e("code",null,"setDefaultAction(arg__1)"),n(" 根据命令组件设置按钮, 传入"),e("a",{href:"#%E5%91%BD%E4%BB%A4%E7%BB%84%E4%BB%B6"},"命令组件")])],-1),ve=t('<h3 id="选框组件" tabindex="-1"><a class="header-anchor" href="#选框组件" aria-hidden="true">#</a> 选框组件</h3><p>选框组件属于特殊的按钮组件, 同样具有按钮同样操作, 可参见<a href="#%E6%8A%BD%E8%B1%A1%E6%8C%89%E9%92%AE%E7%BB%84%E4%BB%B6">抽象按钮组件</a></p><h4 id="复选框组件" tabindex="-1"><a class="header-anchor" href="#复选框组件" aria-hidden="true">#</a> 复选框组件</h4>',3),Qe={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QCheckBox.html#PySide6.QtWidgets.QCheckBox",target:"_blank",rel:"noopener noreferrer"},ye=e("a",{href:"#%E6%8C%89%E9%92%AE%E9%80%9A%E7%94%A8%E8%AE%BE%E7%BD%AE"},"图标与文字",-1),xe=t('<p>复选框组件具有特殊的三状态模式</p><p>使用枚举类型 <code>Qt.CheckState</code> 表示三种状态, 分别是</p><ul><li><code>CheckState.Unchecked</code> 未选中</li><li><code>CheckState.PartiallyChecked</code> 部分选中</li><li><code>CheckState.Checked</code> 完全选中</li><li>可用于如表示全不选, 部分选中, 全选</li></ul><p>以下方法专门用于设置三状态模式下的复选框 (对于一般复选框参见<a href="#%E6%8C%89%E9%92%AE%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95">按钮操作方法</a>)</p><ul><li>方法 <code>setTristate(y = True)</code> 设置选框为三状态模式, 默认设置为 <code>False</code>, 即<mark>默认不使用三状态模式</mark></li><li>方法 <code>setCheckState(state)</code> 设置三状态选框当前状态, 参数 <code>state</code> 为枚举类型 <code>Qt.CheckState</code></li><li>信号 <code>checkStateChanged(arg__1)</code> 用于获取选框状态修改后, 最新的状态, 数据为枚举类型 <code>Qt.CheckState</code></li></ul><p>对于普通模式下的复选框组件, 推荐使用 <a href="#%E6%8C%89%E4%B8%8B%E6%8C%89%E9%92%AE%E4%BF%A1%E5%8F%B7">toggle</a> 信号</p><h4 id="单选框组件" tabindex="-1"><a class="header-anchor" href="#单选框组件" aria-hidden="true">#</a> 单选框组件</h4>',7),Se={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QRadioButton.html#PySide6.QtWidgets.QRadioButton",target:"_blank",rel:"noopener noreferrer"},Ce=e("a",{href:"#%E6%8C%89%E9%92%AE%E9%80%9A%E7%94%A8%E8%AE%BE%E7%BD%AE"},"图标与文字",-1),qe={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QButtonGroup.html#PySide6.QtWidgets.QButtonGroup",target:"_blank",rel:"noopener noreferrer"},we=e("a",{href:"#%E6%99%AE%E9%80%9A%E6%8C%89%E9%92%AE"},"普通按钮",-1),Fe=t(`<p>该组件作为抽象容器, 不需要添加到实际布局中</p><p>选框组方法 <code>addButton(arg__1, id = -1)</code> 添加选框组内的按钮</p><ul><li><code>arg__1</code> 用于绑定的按钮组件, 即以 <a href="#%E6%8A%BD%E8%B1%A1%E6%8C%89%E9%92%AE%E7%BB%84%E4%BB%B6">QAbstractButton</a> 为基类的组件</li><li><code>id</code> 整数, 表示按钮编号, 使用 <code>-1</code> 将自动编号</li></ul><p>选框组方法 <code>id(button)</code> 通过组件查询按钮编号</p><ul><li><code>button</code> 用于查询的按钮组件</li><li>当按钮不在组内时, 返回 <code>-1</code></li></ul><p>选框组方法 <code>button(id)</code> 通过编号查询组件</p><ul><li><code>id</code> 用于查询的编号</li><li>当编号不存在时, 返回 <code>None</code></li></ul><p>选框组信号 <code>idToggled(arg__1, arg__2)</code></p><ul><li>当按钮组内按钮状态切换时产生信号, 即重复点击同一按钮不会触发信号, 当有新按钮被点击时, 将先后触发两个信号</li><li>附带信息 <code>arg__1</code> 为切换状态按钮的编号</li><li>附带信息 <code>arg__2</code> 为此按钮在信号发出后是否为选中, 若选中则为 <code>True</code></li><li>类似的有 <code>buttonToggled(arg__1, arg__2)</code>, 此时附带信息 <code>arg__1</code> 为按钮组件对象</li></ul><p>以下选框组方法用于确定当前选中的选框</p><ul><li><code>checkedId()</code> 返回编号, 如果没有任何一个选中返回 <code>-1</code></li><li><code>checkedButton()</code> 返回按钮组件对象, 如果没有任何一个选中返回 <code>None</code></li></ul><p>如果要设置其中单个选框的状态, 需要直接访问选框组件, 无法通过选框组操作其中的选框</p><p>以下为该组件的使用示例</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MyWindow</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>place <span class="token operator">=</span>  QWidget<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>place_layout <span class="token operator">=</span> QVBoxLayout<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>place<span class="token punctuation">.</span>setLayout<span class="token punctuation">(</span>self<span class="token punctuation">.</span>place_layout<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>setCentralWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>place<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>button1 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>button1<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">&quot;option 1&quot;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>button1<span class="token punctuation">.</span>setCheckable<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>place_layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>button1<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>button2 <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>button2<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">&quot;option 2&quot;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>button2<span class="token punctuation">.</span>setCheckable<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>place_layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>button2<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>button_group <span class="token operator">=</span> QButtonGroup<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>button_group<span class="token punctuation">.</span>addButton<span class="token punctuation">(</span>self<span class="token punctuation">.</span>button1<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>button_group<span class="token punctuation">.</span>addButton<span class="token punctuation">(</span>self<span class="token punctuation">.</span>button2<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>button_group<span class="token punctuation">.</span>idToggled<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>slot_group_toggled<span class="token punctuation">)</span>

    <span class="token decorator annotation punctuation">@Slot</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">slot_group_toggled</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">,</span> isCheck<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;button </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">id</span><span class="token punctuation">}</span></span><span class="token string"> become </span><span class="token interpolation"><span class="token punctuation">{</span>isCheck<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="输入栏组件" tabindex="-1"><a class="header-anchor" href="#输入栏组件" aria-hidden="true">#</a> 输入栏组件</h3>`,15),Pe={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QLineEdit.html#PySide6.QtWidgets.QLineEdit",target:"_blank",rel:"noopener noreferrer"},Te=t(`<p><a href="#%E8%BE%93%E5%85%A5%E6%A0%8F%E6%A0%B7%E5%BC%8F%E8%AE%BE%E7%BD%AE">只读状态</a>下, 也可用于显示允许用户选择与复制的单行文字</p><h4 id="输入栏样式设置" tabindex="-1"><a class="header-anchor" href="#输入栏样式设置" aria-hidden="true">#</a> 输入栏样式设置</h4><p>方法 <code>setReadOnly(arg__1)</code> 可设置输入栏为只读状态</p><ul><li><code>arg__1</code> 布尔型, 当设置为 <code>True</code> 时输入栏只读</li><li>方法 <code>isReadOnly()</code> 可查询输入栏是否为只读状态</li><li>只读状态下用户无法修改, 但可以选择与复制内容, 且可通过<a href="#%E8%BE%93%E5%85%A5%E5%86%85%E5%AE%B9%E4%BF%AE%E6%94%B9">输入内容修改</a>方法修改内容, 可用于显示实时变化的数据</li></ul><p>方法 <code>setAlignment(flag)</code> 可设置输入栏内文本的对齐方式</p><ul><li><code>flag</code> 参数值为 <a href="#%E5%AF%B9%E9%BD%90%E6%A0%B7%E5%BC%8F%E5%80%BC">Qt 对齐设置</a>, 默认为水平居左, 垂直居中</li></ul><p>方法 <code>setEchoMode(arg__1)</code> 可设置输入栏如何显示用户输入的内容</p><ul><li><code>arg__1</code> 参数值为类 <code>QLineEdit</code> 下的嵌套枚举类型 <code>QLineEdit.EchoMode</code>, 常用值有 <ul><li><code>EchoMode.Normal</code> 直接显示用户输入的内容, 默认设置</li><li><code>EchoMode.Password</code> 使用掩码代替用户输入的内容, 用于输入密码</li></ul></li></ul><p>方法 <code>setPlaceholderText(arg__1)</code> 可设置输入栏在输入内容前显示的提示文字</p><ul><li><code>arg__1</code> 字符串, 提示文字内容</li></ul><p>通过通用大小设置方法 <a href="#%E7%BB%84%E4%BB%B6%E5%A4%A7%E5%B0%8F%E8%A7%84%E5%88%99">setMinimumWidth</a> 可为输入内容预留空间, 例如以下代码</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 获取每个字符大小</span>
font_width <span class="token operator">=</span> self<span class="token punctuation">.</span>lineEdit<span class="token punctuation">.</span>font<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pointSize<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 预留 30 个字符的空间</span>
self<span class="token punctuation">.</span>lineEdit<span class="token punctuation">.</span>setMinimumWidth<span class="token punctuation">(</span>font_width <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="输入内容约束" tabindex="-1"><a class="header-anchor" href="#输入内容约束" aria-hidden="true">#</a> 输入内容约束</h4><p>方法 <code>setMaxLength(arg__1)</code> 设置输入字符串的最大长度, 用于简单约束</p><ul><li><code>arg__1</code> 整数, 允许的最大长度</li></ul><p>方法 <code>setValidator(arg__1)</code> 设置输入内容验证器, 用于复杂情况约束</p><ul><li><code>arg__1</code> 模块 <code>QtGui</code> 下纯虚类 <code>QValidator</code> 的子类, 常用的有 (以下直接给出构造函数) <ul><li><code>QRegularExpressionValidator(re)</code> 正则表达式验证器 <ul><li><code>re</code> 为正则表达式字符串</li></ul></li><li><code>QDoubleValidator(bottom, top, decimals)</code> 浮点数验证器 <ul><li><code>bottom</code> 为输入值的下限, 使用 <code>-math.inf</code> 表示无下限</li><li><code>top</code> 为输入值的上限, 使用 <code>+math.inf</code> 表示无下限</li><li><code>decimals</code> 为输入值的小数位数, 使用 <code>-1</code> 表示无限制</li><li>允许使用一般小数与科学计数数如 <code>1.234e+2</code></li></ul></li><li><code>QIntValidator(bottom, top)</code><ul><li><code>bottom</code> 为输入值的下限, 使用 <code>-0x80000000</code> 表示无下限 (C++ 整形下限)</li><li><code>top</code> 为输入值的上限, 使用 <code>+0x7FFFFFFF</code> 表示无下限 (C++ 整形上限)</li></ul></li></ul></li></ul><p>方法 <code>hasAcceptableInput()</code> 判断输入是否满足验证器要求</p>`,18),De=e("li",null,[n("当满足要求时返回 "),e("code",null,"True")],-1),We=e("code",null,"ValidLineEdit",-1),Me=t('<p>使用输入内容约束时注意</p><ul><li>通常情况下, 不满足验证器的修改将被阻止</li><li>但对于如限定最少字数的正则表达式验证器, 依然允许从空内容输入</li><li>根据信号发出的时机不同, 槽函数中方法 <a href="#%E8%BE%93%E5%85%A5%E5%86%85%E5%AE%B9%E4%BF%AE%E6%94%B9">text()</a> 获取的的输入内容也不一定是正确的 <ul><li>信号 <code>editingFinished</code> 发出时, 内容一定符合要求</li><li>信号 <code>textChanged</code> 发出时, 内容经过阻止, 但可能符合也可能不符合要求</li><li>信号 <code>inputRejected</code> 发出时, 内容为被退回的错误内容, 一定不符合要求</li><li>关于信号具体介绍见<a href="#%E8%BE%93%E5%85%A5%E6%A0%8F%E4%BA%A4%E4%BA%92">输入栏相关信号</a></li></ul></li></ul><p>自定义验证器</p>',3),Le={href:"https://doc.qt.io/qtforpython-6/PySide6/QtGui/QValidator.html#PySide6.QtGui.QValidator",target:"_blank",rel:"noopener noreferrer"},Re=t("<li>创建自定义验证器时, 需要实现纯虚方法 <code>validate(arg__1, arg__2)</code><ul><li><code>arg__1</code> 被验证的字符串</li><li><code>arg__2</code> 光标位置, 通常没有意义</li><li>返回值为元组 <code>(flag, arg__1, arg__2)</code>, 其中 <code>flag</code> 标识验证状态, 为枚举类型 <code>QValidator.State</code><ul><li><code>State.Acceptable</code> 验证通过</li><li><code>State.Intermediate</code> 不满足要求, 但允许用户输入 (建议验证失败时默认返回此标识)</li><li><code>State.Invalid</code> 不满足要求, 且阻之用户输入</li></ul></li></ul></li>",1),Ie=e("code",null,"ValidatorImitator",-1),Ge=t('<h4 id="输入栏交互" tabindex="-1"><a class="header-anchor" href="#输入栏交互" aria-hidden="true">#</a> 输入栏交互</h4><p>方法 <code>text()</code> 可用于获取当前的输入的内容</p><ul><li>信号 <code>textEdited</code> 当用户修改输入栏内容时发出</li><li>信号 <code>textChanged</code> 当输入栏内容以任意方式修改时发出</li><li>信号 <code>editingFinished</code> 当输入结束且输入内容满足<a href="#%E8%BE%93%E5%85%A5%E5%86%85%E5%AE%B9%E7%BA%A6%E6%9D%9F">约束</a>时发出, 可以是用户按下回车, 或组件失去角点等情况</li><li>信号 <code>inputRejected</code> 当输入内容修改不满足时, 发出信号</li></ul><p>使用验证器时, 在以上三个信号对应的槽函数中, 方法将 <a href="#%E8%BE%93%E5%85%A5%E5%86%85%E5%AE%B9%E4%BF%AE%E6%94%B9">text()</a> 获取的的输入内容存在差异, 具体见<a href="#%E8%BE%93%E5%85%A5%E5%86%85%E5%AE%B9%E7%BA%A6%E6%9D%9F">输入内容约束</a></p><p>使用以下<a href="#%E4%BF%A1%E5%8F%B7%E6%A7%BD%E6%9C%BA%E5%88%B6">槽方法</a>方法可对输入栏内容进行修改</p><ul><li>方法 <code>clear()</code> 清空输入栏内容</li><li>方法 <code>undo()</code> 撤回上一步</li><li>方法 <code>setText(arg__1)</code> 设置输入栏内容, 参数为字符串</li></ul><h3 id="下拉栏组件" tabindex="-1"><a class="header-anchor" href="#下拉栏组件" aria-hidden="true">#</a> 下拉栏组件</h3>',7),Ne={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QComboBox.html#PySide6.QtWidgets.QComboBox",target:"_blank",rel:"noopener noreferrer"},Oe=t(`<h4 id="下拉选项设置" tabindex="-1"><a class="header-anchor" href="#下拉选项设置" aria-hidden="true">#</a> 下拉选项设置</h4><p>方法 <code>insertItem(index, icon, text, userData = None)</code> 插入下拉栏选项</p><ul><li><code>index</code> 插入位置的索引, 将在索引后添加插入的选项 <ul><li>如果索引大于选项数, 将在最后位置插入, 如果索引为负, 将从后向前索引</li><li>索引从 <code>0</code> 开始</li><li>建议使用方法 <code>count()</code> 获取当前选项数作为参数, 以此实现向后插入</li></ul></li><li><code>icon</code> 选项文字前的图片, 取值参见 <a href="#%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90-qpixmap">Qt 图片资源</a></li><li><code>text</code> 选项文字, 取值为字符串</li><li><code>userData</code> 选项数据, 可以是任意 Python 类型的参数</li><li>对于不需要选项图片的情况, 有重载 <code>insertItem(index, text)</code></li></ul><p>方法 <code>insertItem(index, texts)</code> 插入多个下拉栏选项</p><ul><li><code>index</code> 插入位置的索引, 具体见上</li><li><code>texts</code> 使用字符串表示各个索引下的选项文字</li></ul><p>方法 <code>removeItem(index)</code> 清除指定输入选项</p><ul><li><code>index</code> 清除选项的索引</li><li>如果索引不存在, 将不会产生任何效果</li></ul><p>槽函数 <code>setCurrentIndex(index)</code> 设置下拉栏当前选项的索引</p><ul><li><code>index</code> 设置的索引</li><li>当设置了一个不存在的索引, 如 <code>-1</code>, 则认为当前下拉栏处于无选择的状态</li></ul><h4 id="可输入下拉栏" tabindex="-1"><a class="header-anchor" href="#可输入下拉栏" aria-hidden="true">#</a> 可输入下拉栏</h4><p>下拉栏中, 除了让用户从已有输入中选择, 还可以设置为类似<a href="#%E8%BE%93%E5%85%A5%E6%A0%8F%E7%BB%84%E4%BB%B6">输入栏</a>的形式, 让用户输入新选型或从已有选项中匹配用户输入</p><ul><li>当用户触发了类似<a href="#%E8%BE%93%E5%85%A5%E6%A0%8F%E4%BA%A4%E4%BA%92">输入栏 editingFinished 信号</a>的行为时, 将视为新的选项输入完成, 并选择新的输入选项</li><li>通常不允许输入选项与已有的选项重复, 且用户在输入时, 将根据已有选项尝试进行自动补全</li><li>新的选项将以用户输入内容作为选项名, 选项数据为 <code>None</code></li><li>通常情况下, 用户输入的选项将自动插入到已有选项的最末尾 (可以修改插入行为, 此处不介绍)</li></ul><p>方法 <code>setEditable(editable)</code> 设置下拉栏为可输入模式</p><ul><li><code>editable</code> 布尔值, 传入 <code>True</code> 时下拉栏可输入, 默认为 <code>False</code></li><li>仅当下拉栏为可输入模式, 以下关于可输入下拉栏设置的方法才有意义</li></ul><p>方法 <code>setValidator(v)</code> 设置用户输入验证器, 以约束用户输入</p><ul><li><code>v</code> 输入验证器对象, 具体见<a href="#%E8%BE%93%E5%85%A5%E5%86%85%E5%AE%B9%E7%BA%A6%E6%9D%9F">输入内容约束</a></li><li>仅约束用户新输入的内容, 输入已有的选项不会受验证器约束</li></ul><p>方法 <code>setMaxCount(max)</code> 设置最大选项数</p><ul><li><code>max</code> 整数, 允许的最大选项数, 默认无限制, 但下拉栏最多只能同时显示 10 个选项</li><li>当超过最大选项数时, 用户将无法输入新选型, 如果要实现覆盖旧选项的效果, 可参考下方代码修改</li></ul><p>如果希望覆盖上一个用户输入选项, 应使用 <a href="#%E4%B8%8B%E6%8B%89%E9%80%89%E9%A1%B9%E8%AE%BE%E7%BD%AE">removeItem 方法</a> 与 <a href="#%E4%B8%8B%E6%8B%89%E6%A0%8F%E4%BA%A4%E4%BA%92">currentIndexChanged 信号</a> 手动实现, 例如以下代码</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>ORIGINAL_ITEM_LENGTH <span class="token operator">=</span> <span class="token number">4</span> <span class="token comment"># 原始选项数</span>

<span class="token decorator annotation punctuation">@Slot</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">slot_overwrite_new_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> index <span class="token operator">&gt;</span> ORIGINAL_ITEM_LENGTH<span class="token punctuation">:</span>
        <span class="token comment"># 根据新选项总插入到最末尾, 因此该索引一定指向上一个选项</span>
        self<span class="token punctuation">.</span>cbInput<span class="token punctuation">.</span>removeItem<span class="token punctuation">(</span>ORIGINAL_ITEM_LENGTH<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;remove last&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="下拉栏交互" tabindex="-1"><a class="header-anchor" href="#下拉栏交互" aria-hidden="true">#</a> 下拉栏交互</h4><p>以下方法可用于获取下拉选项的具体信息</p>`,22),Ve=t('<li><code>currentIndex()</code> 获取当前选择选项的索引, 如果没有选择返回 <code>-1</code><ul><li>对于方法 <code>insertItem</code> 插入的选项, 且不可输入时, 此方法得到的索引一般能够与 <code>texts</code> 的索引对应</li></ul></li><li><code>itemData(index)</code> 获取指定索引选项对应的选项数据 <ul><li>如果没有指定选项数据, 或选项来自<a href="#%E5%8F%AF%E8%BE%93%E5%85%A5%E4%B8%8B%E6%8B%89%E6%A0%8F">用户输入</a>, 返回 <code>None</code></li><li>对于方法 <code>insertItem</code> 插入的选项, 建议使用此方法识别选项</li></ul></li>',2),ze=e("code",null,"itemText(index)",-1),Xe=e("li",null,[n("该方法可用于获取"),e("a",{href:"#%E5%8F%AF%E8%BE%93%E5%85%A5%E4%B8%8B%E6%8B%89%E6%A0%8F"},"可输入下拉栏"),n("中, 用户输入的文本")],-1),Ke=e("p",null,[n("信号 "),e("code",null,"currentIndexChanged(index)"),n(" 将在选择的索引发生改变时触发, 包括"),e("a",{href:"#%E5%8F%AF%E8%BE%93%E5%85%A5%E4%B8%8B%E6%8B%89%E6%A0%8F"},"新选项被输入")],-1),He=e("ul",null,[e("li",null,[n("信息 "),e("code",null,"index"),n(" 即最新状态下选择的索引")])],-1),je=e("h3",{id:"数值微调栏组件",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#数值微调栏组件","aria-hidden":"true"},"#"),n(" 数值微调栏组件")],-1),Ue={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QSpinBox.html#PySide6.QtWidgets.QSpinBox",target:"_blank",rel:"noopener noreferrer"},Je=e("a",{href:"#%E8%BE%93%E5%85%A5%E6%A0%8F%E7%BB%84%E4%BB%B6"},"输入栏组件",-1),Ye=t('<h4 id="数值微调栏设置" tabindex="-1"><a class="header-anchor" href="#数值微调栏设置" aria-hidden="true">#</a> 数值微调栏设置</h4><p>以下方法可对数值范围与修改方式进行设置</p><ul><li>方法 <code>setMinimum(min)</code> 设置微调范围的最小值, 默认为 <code>0</code></li><li>方法 <code>setMaximum(max)</code> 设置微调范围的最大值, 默认为 <code>99</code></li><li>方法 <code>setRange(min, max)</code> 同时设置微调范围的最小与最大值</li><li>方法 <code>setSingleStep(val)</code> 设置微调按钮的步长, 默认为 <code>1</code></li><li>方法 <code>setWrapping(w)</code> 设置为 <code>True</code> 时开启回绕调整, 最大值通过微调按钮加一将变为最小值, 反之类似</li></ul><p>以下方法可为设置微调栏内容的显示样式</p><ul><li>方法 <code>setPrefix(prefix)</code> 设置内容的前缀, 参数为字符串</li><li>方法 <code>setSuffix(suffix)</code> 设置内容的后缀, 参数为字符串</li><li>方法 <code>setSpecialValueText(txt)</code> 当微调栏取<mark>最小值</mark>时, 使用指定文字代替 <ul><li>参数 <code>txt</code> 即指定文字, 之后当取值为最小值时, 将自动修改为此段文字</li><li>即使显示为文字, 在方法 <a href="#%E6%95%B0%E5%80%BC%E5%BE%AE%E8%B0%83%E6%A0%8F%E4%BA%A4%E4%BA%92">value()</a> 读取值时, 得到的依然为最小值</li><li>通常可用于显示 <code>自动</code> 以表示该数值由决定程序</li></ul></li></ul><p>以下设置方法含义与<a href="#%E8%BE%93%E5%85%A5%E6%A0%8F%E6%A0%B7%E5%BC%8F%E8%AE%BE%E7%BD%AE">输入栏组件</a>基本相同, 可参考同名方法的使用</p><ul><li>方法 <code>setReadOnly(r)</code> 设置为只读模式</li><li>方法 <code>setAlignment(flag)</code> 设置内容对齐方式</li></ul><h4 id="数值微调栏交互" tabindex="-1"><a class="header-anchor" href="#数值微调栏交互" aria-hidden="true">#</a> 数值微调栏交互</h4><p>方法 <code>value()</code> 获取当前微调栏内的数值</p><p>信号 <code>valueChanged(arg__1)</code> 当数值以任意方式发生改变时发出</p><ul><li>数据 <code>arg__1</code> 为改变后数值栏内的数值, 类型为整形</li></ul><p>槽函数 <code>setValue(val)</code> 修改数值</p><ul><li><code>val</code> 新的数值, 类型为整形, 如果超出范围, 将使用最近的有效值代替</li></ul><h4 id="其他微调栏组件" tabindex="-1"><a class="header-anchor" href="#其他微调栏组件" aria-hidden="true">#</a> 其他微调栏组件</h4><p>类似整数的数值微调栏, Qt 中还有</p>',15),Ze={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QDoubleSpinBox.html#PySide6.QtWidgets.QDoubleSpinBox",target:"_blank",rel:"noopener noreferrer"},$e=e("ul",null,[e("li",null,[n("推荐使用带浮点数验证器的"),e("a",{href:"#%E8%BE%93%E5%85%A5%E6%A0%8F%E7%BB%84%E4%BB%B6"},"输入栏组件"),n("代替")])],-1),en={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QDateTimeEdit.html#PySide6.QtWidgets.QDateTimeEdit",target:"_blank",rel:"noopener noreferrer"},nn=e("li",null,"可用于输入时间与日期",-1),an={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QCalendarWidget.html#PySide6.QtWidgets.QCalendarWidget",target:"_blank",rel:"noopener noreferrer"},on={href:"https://doc.qt.io/qtforpython-6/overviews/qtwidgets-widgets-spinboxes-example.html#spin-boxes-example",target:"_blank",rel:"noopener noreferrer"},tn=e("h3",{id:"滑动条组件",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#滑动条组件","aria-hidden":"true"},"#"),n(" 滑动条组件")],-1),sn={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QSlider.html#PySide6.QtWidgets.QSlider",target:"_blank",rel:"noopener noreferrer"},ln=e("mark",null,"整数的输入",-1),cn=t('<h4 id="滑动条样式设置" tabindex="-1"><a class="header-anchor" href="#滑动条样式设置" aria-hidden="true">#</a> 滑动条样式设置</h4><p>以下方法设置滑动条的方向 (水平或垂直)</p><ul><li>方法 <code>setOrientation(arg__1)</code> 设置滑动条方向</li><li>构造函数 <code>__init__(orientation = Orientation.Vertical)</code> 在构造函数中指定滑动条方向, 默认为垂直</li><li>参数值类型为 <a href="#%E7%BB%84%E4%BB%B6%E6%96%B9%E5%90%91%E6%A0%B7%E5%BC%8F%E5%80%BC">Qt.Orientation</a></li></ul><p>以下方法设置滑动条的范围</p><ul><li>方法 <code>setMinimum(min)</code> 设置滑动条范围的最小值, 默认为 <code>0</code></li><li>方法 <code>setMaximum(max)</code> 设置滑动条范围的最大值, 默认为 <code>99</code></li></ul><p>以下方法设置滑动条的调整方法</p><ul><li>方法 <code>setSingleStep(arg__1)</code> 设置滑动条一次小移动变化的值, 默认为 <code>1</code> (通过方向键调整)</li><li>方法 <code>setPageStep(arg__1)</code> 设置滑动条一次大移动变化的值, 默认为 <code>10</code> (通过 <kbd>PgUp</kbd> 与 <kbd>PgDn</kbd> 调整)</li><li>注意, 滑动条表示的数值总是在范围内的整数连续变化, 不受以上设置影响</li></ul><p>以下方法设置滑动条的刻度</p><ul><li>方法 <code>setTickInterval(ti)</code> 设置滑动条刻度间隔, 取 <code>0</code> 将根据滑条调整变化值确定</li><li>方法 <code>setTickPosition(position)</code> 设置滑动条刻度的显示方式, 参数值类型为 <code>QSlider</code> 下的嵌套枚举类型 <code>TickPosition</code>, 常用的有 <ul><li><code>TickPosition.NoTicks</code> 不绘制刻度, 默认设置为不显示</li><li><code>TickPosition.TicksBothSides</code> 在滑动条两侧绘制刻度</li><li><code>TickPosition.TicksAbove/Below</code> 在水平滑动条上 / 下方绘制刻度</li><li><code>TickPosition.TicksLeft/Right</code> 在垂直滑动条左 / 右方绘制刻度</li></ul></li></ul><h4 id="滑动条交互" tabindex="-1"><a class="header-anchor" href="#滑动条交互" aria-hidden="true">#</a> 滑动条交互</h4><p>方法 <code>value()</code> 获取当前滑动条的数值</p><p>信号 <code>valueChanged(value)</code> 当滑动条数值以任意形式发生修改时触发</p><ul><li>数据 <code>value</code> 为修改后的滑动条数值</li></ul><p>槽函数 <code>setValue(arg__1)</code> 设置当前滑动条的数值</p><ul><li><code>arg__1</code> 设置的数值</li></ul><h3 id="进度条组件" tabindex="-1"><a class="header-anchor" href="#进度条组件" aria-hidden="true">#</a> 进度条组件</h3>',16),dn={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QProgressBar.html",target:"_blank",rel:"noopener noreferrer"},pn=t('<h4 id="进度条样式设置" tabindex="-1"><a class="header-anchor" href="#进度条样式设置" aria-hidden="true">#</a> 进度条样式设置</h4><p>方法 <code>setTextVisible(visible)</code> 设置进度条旁是否显示文字</p><ul><li><code>visible</code> 传入 <code>True</code> 时在进度条旁显示进度文字, 默认为 <code>True</code></li></ul><p>方法 <code>setFormat(format)</code> 设置进度条旁文字内容的格式字符串</p><ul><li><code>format</code> 字符串, 默认为 <code>%p</code>, 其中 <ul><li><code>%p</code> 将替换为进度百分比, 显示为整数带 <code>%</code></li><li><code>%v</code> 将替换为当前进度条数值</li><li><code>%m</code> 将替换为进度条总步数</li></ul></li></ul><p>方法 <code>setOrientation(arg__1)</code> 设置进度条方向</p><ul><li><code>arg__1</code> 传入<a href="#%E7%BB%84%E4%BB%B6%E6%96%B9%E5%90%91%E6%A0%B7%E5%BC%8F%E5%80%BC">组件方向样式值</a></li></ul><h4 id="进度条交互" tabindex="-1"><a class="header-anchor" href="#进度条交互" aria-hidden="true">#</a> 进度条交互</h4><p>槽函数 <code>setRange(minimum, maximum)</code> 设置进度条数值范围</p><ul><li><code>minimum</code> 进度条最小值, 默认为 <code>0</code>, 传入整数, 建议显示设置</li><li><code>maximum</code> 进度条最大值, 默认为 <code>100</code>, 传入整数, 建议显示设置</li><li>当进度条最大值小于最小值时, 最小值将成为唯一有效值</li><li>当传入范围超出现有数值时, 将重置数值</li><li>当传入 <code>(0, 0)</code>, 进度条表现为不定状态 (进度条中间体现为不断滚动的色块)</li></ul><p>槽函数 <code>setValue(value)</code> 设置进度条数值</p><ul><li><code>value</code> 设置数值, 当超出范围时设置不会生效</li></ul><p>槽函数 <code>reset()</code> 重置进度条数值</p><p>方法 <code>value()</code> 获取当前数值</p><h3 id="只读文本框组件" tabindex="-1"><a class="header-anchor" href="#只读文本框组件" aria-hidden="true">#</a> 只读文本框组件</h3>',15),un={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QTextBrowser.html#PySide6.QtWidgets.QTextBrowser",target:"_blank",rel:"noopener noreferrer"},rn=e("a",{href:"#html-%E5%AF%8C%E6%96%87%E6%9C%AC"},"HTML",-1),hn=e("a",{href:"#markdown-%E5%AF%8C%E6%96%87%E6%9C%AC"},"Markdown",-1),En=e("kbd",null,"Ctrl",-1),Bn=e("li",null,[n("与"),e("a",{href:"#%E6%A0%87%E7%AD%BE%E7%BB%84%E4%BB%B6"},"标签组件"),n("不同, 该组件对于大段内容的显示进行了优化, 且对超链接的处理更好")],-1),kn={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QTextEdit.html#PySide6.QtWidgets.QTextEdit",target:"_blank",rel:"noopener noreferrer"},_n=e("ul",null,[e("li",null,[n("该组件虽然能显示富文本与编辑, 但建议编辑时使用"),e("a",{href:"%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E6%A1%86%E7%BB%84%E4%BB%B6"},"文本编辑框组件")]),e("li",null,[n("设置为只读模式后 ("),e("code",null,"setReadOnly(True)"),n("), 除了不支持超链接与该组件基本一致, 因此仅文本不含超链接时建议使用 "),e("code",null,"QTextEdit")])],-1),fn=t('<h4 id="文本框样式设置" tabindex="-1"><a class="header-anchor" href="#文本框样式设置" aria-hidden="true">#</a> 文本框样式设置</h4><p>以下方法设置文本框对超链接的处理方式</p><ul><li>方法 <code>setOpenExternalLinks(open)</code> 设置是否解析并打开网页超链接, 默认为 <code>False</code></li><li>方法 <code>setOpenLinks(open)</code> 设置是否在点击链接后尝试跳转并显示到下一个文档, 默认为 <code>True</code></li><li>方法 <code>setSearchPaths(paths)</code> 设置本地链接的搜索路径, 参数值为字符串列表, 默认为空字符串, 即使用相对路径</li></ul><h4 id="文本框交互" tabindex="-1"><a class="header-anchor" href="#文本框交互" aria-hidden="true">#</a> 文本框交互</h4><p>槽函数 <code>setSource(name, type = ResourceType.UnknownResource)</code> 从链接加载文本</p><ul><li><code>name</code> 文本文件链接, 参数类型为<a href="#%E9%93%BE%E6%8E%A5%E7%AE%A1%E7%90%86%E7%B1%BB">链接管理类</a></li><li><code>type</code> 文本文件类型, 使用 <code>QtGui</code> 模块下的枚举类型 <code>QTextDocument.ResourceType</code> 表示, 常用的有 <ul><li><code>ResourceType.UnknownResource</code> 未知类型 (默认)</li><li><code>ResourceType.HtmlResource</code> HTML 文件</li><li><code>ResourceType.MarkdownResource</code> Markdown 文件</li></ul></li></ul><p>槽函数 <code>setHtml(text)</code> 通过给定字符串设置显示的 HTML 文本内容</p><ul><li><code>text</code> 包含 HTML 内容的字符串, 具体参见<a href="#%E5%AF%8C%E6%96%87%E6%9C%AC%E8%A1%A8%E7%A4%BA">富文本表示</a></li><li>类似的有槽函数 <code>setMarkdown(markdown)</code> 通过给定字符串设置显示的 Markdown 文本内容</li></ul><p>槽函数 <code>append(text)</code> 像文本末尾添加内容</p><ul><li><code>text</code> 添加内容的字符串, 通常以 HTML 的方式解析</li><li>该方法特别适用于控制台输出等的显示</li></ul><p>信号 <code>anchorClicked(arg__1)</code> 当文本中的超链接被点击时发出</p><ul><li>数据 <code>arg__1</code> 为链接对应的<a href="#%E9%93%BE%E6%8E%A5%E7%AE%A1%E7%90%86%E7%B1%BB">链接管理类</a></li><li>即使因点击链接进入下一个页面, 该信号依然会触发</li></ul><p>信号 <code>sourceChanged(arg__1)</code> 当文本框发生跳转进入下一个页面时触发</p><ul><li>数据 <code>arg__1</code> 为链接对应的<a href="#%E9%93%BE%E6%8E%A5%E7%AE%A1%E7%90%86%E7%B1%BB">链接管理类</a></li></ul><h3 id="文本编辑框组件" tabindex="-1"><a class="header-anchor" href="#文本编辑框组件" aria-hidden="true">#</a> 文本编辑框组件</h3>',15),mn={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QPlainTextEdit.html#PySide6.QtWidgets.QPlainTextEdit",target:"_blank",rel:"noopener noreferrer"},bn=t('<p>如果希望显示大段文字, 建议使用<a href="#%E5%8F%AA%E8%AF%BB%E6%96%87%E6%9C%AC%E6%A1%86%E7%BB%84%E4%BB%B6">只读文本框组件</a>, 此处仅介绍与文本编辑有关的方法</p><h4 id="文本编辑框样式设置" tabindex="-1"><a class="header-anchor" href="#文本编辑框样式设置" aria-hidden="true">#</a> 文本编辑框样式设置</h4><p>方法 <code>setPlaceholderText(placeholderText)</code> 设置文本编辑框内容为空时的提示文字</p><ul><li><code>placeholderText</code> 字符串, 提示文字内容</li></ul><p>方法 <code>setReadOnly(ro)</code> 设置文本编辑框为只读模式</p><ul><li><code>ro</code> 布尔值, 设置为 <code>True</code> 后用户不能编辑内容</li></ul><h4 id="文本编辑框交互" tabindex="-1"><a class="header-anchor" href="#文本编辑框交互" aria-hidden="true">#</a> 文本编辑框交互</h4><p>方法 <code>toPlainText()</code> 获取当前文本框内容</p><ul><li>返回值为字符串</li></ul><p>以下槽函数可用于修改文本框内容</p><ul><li>槽函数 <code>setPlainText(text)</code> 覆盖并设置文本编辑框内容</li><li>槽函数 <code>clear()</code> 清空文本框内容, 包括编辑历史</li></ul><p>信号 <code>textChanged()</code> 当文本内容发生改变时发出</p><ul><li>需要通过方法 <code>toPlainText()</code> 获取当前文本框内容</li></ul><h3 id="组件区组件" tabindex="-1"><a class="header-anchor" href="#组件区组件" aria-hidden="true">#</a> 组件区组件</h3>',14),gn={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QGroupBox.html#PySide6.QtWidgets.QGroupBox",target:"_blank",rel:"noopener noreferrer"},An=t('<p>组件区组件是少数可以使用 <a href="#%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%B1%BB">QWidget</a> 一样直接存放组件布局, 使用<a href="#%E7%BB%84%E4%BB%B6%E5%B8%83%E5%B1%80">组件布局</a>相关方法的组件, 此处不在介绍</p><h4 id="组件区样式设置" tabindex="-1"><a class="header-anchor" href="#组件区样式设置" aria-hidden="true">#</a> 组件区样式设置</h4><p>方法 <code>setAlignment(alignment)</code> 设置组件区标题位置</p><ul><li><code>alignment</code> 参数值为<a href="#%E5%AF%B9%E9%BD%90%E6%A0%B7%E5%BC%8F%E5%80%BC">对齐样式值</a>, 仅水平对齐样式有效</li></ul><p>方法 <code>setFlat(flat)</code> 设置组件区是否有边框</p><ul><li>设置为 <code>False</code>, 使用浅色边框包围组件区 (默认)</li><li>设置为 <code>True</code>, 使用单条分界线划分组件区上侧</li></ul><p>方法 <code>setTitle(title)</code> 设置组件区的标题</p><ul><li><code>title</code> 参数值为字符串</li></ul><p>方法 <code>setCheckable(checkable)</code> 使用<a href="#%E5%A4%8D%E9%80%89%E6%A1%86%E7%BB%84%E4%BB%B6">复选框组件</a>作为组件区标题</p><ul><li><code>checkable</code> 布尔值, 传入 <code>True</code> 时启用, 默认为 <code>False</code></li><li>当开启后, 如果复选框被取消勾选 (默认为 <code>True</code>), 将使其中的所有子组件失效</li><li>开启后, 可通过槽函数 <code>setChecked(checked)</code>, 信号 <code>toggled(checked)</code>, 方法 <code>checked()</code> 与该复选框交互, 具体参见<a href="#%E6%8A%BD%E8%B1%A1%E6%8C%89%E9%92%AE%E7%BB%84%E4%BB%B6">按钮组件</a></li></ul><h3 id="选项卡界面组件" tabindex="-1"><a class="header-anchor" href="#选项卡界面组件" aria-hidden="true">#</a> 选项卡界面组件</h3>',11),vn={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QTabWidget.html#PySide6.QtWidgets.QTabWidget",target:"_blank",rel:"noopener noreferrer"},Qn=e("p",null,"该组件本质为以下组件的组合",-1),yn={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QTabBar.html#PySide6.QtWidgets.QTabBar",target:"_blank",rel:"noopener noreferrer"},xn=e("a",{href:"%E9%80%89%E9%A1%B9%E5%8D%A1%E7%95%8C%E9%9D%A2%E7%BB%84%E4%BB%B6%E7%9A%84%E6%A0%B7%E5%BC%8F%E8%AE%BE%E7%BD%AE"},"样式设置",-1),Sn={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QStackedWidget.html#PySide6.QtWidgets.QStackedWidget",target:"_blank",rel:"noopener noreferrer"},Cn=e("a",{href:"#%E9%80%89%E9%A1%B9%E5%8D%A1%E7%95%8C%E9%9D%A2%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BA%A4%E4%BA%92"},"交互方式",-1),qn=t('<p>如果希望通过其他组件与程序控制堆叠的界面, 可参考组件</p><h4 id="选项卡界面组件的样式设置" tabindex="-1"><a class="header-anchor" href="#选项卡界面组件的样式设置" aria-hidden="true">#</a> 选项卡界面组件的样式设置</h4><p>方法 <code>addTab(widget, icon, label)</code> 添加选项卡</p><ul><li><code>widget</code> 在界面中展示的组件, 一般为一个作为<a href="#%E7%BB%84%E4%BB%B6%E5%B8%83%E5%B1%80">布局容器</a>的 <code>QWidget</code></li><li><code>icon</code> 选项卡图标, 传入<a href="#%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90-qpixmap">图片资源管理对象</a></li><li><code>label</code> 选项卡标签, 传入字符串</li><li>函数有重载 <code>addTab(widget, arg__2)</code> 可创建无图标的选项卡, 参数 <code>arg__2</code> 即选项卡标签</li><li>通过索引访问选项卡, 选项卡将按添加顺序从 <code>0</code> 开始编号</li></ul><p>方法 <code>removeTab(index)</code> 删除选项卡</p><ul><li><code>index</code> 被删除的选项卡</li><li>当选项卡被删除后, 选项卡的容器组件不会被销毁</li><li>当选项卡被删除后, 之后的选项卡索引将向前移动, 因此索引值总是与选项卡的实际位置对应</li><li>存在删除选项卡操作时, 建议使用 <code>widget</code> 方法确定组件</li></ul><p>方法 <code>setTabToopTip(index, tip)</code> 设置选项卡的提示信息 (鼠标悬浮时显示)</p><ul><li><code>index</code> 选项卡索引</li><li><code>tip</code> 提示信息内容</li></ul><p>方法 <code>setTabEnabled(index, enabled)</code> 设置指定选项卡的启用 / 禁用状态</p><ul><li><code>index</code> 选项卡索引</li><li><code>enabled</code> 是否启用选项卡, 传入 <code>False</code> 将禁用选项卡, 此时用户无法被选中此选项卡, 同时选项卡下的显示组件也将被禁用</li></ul><p>以下方法用于根据选项卡索引与界面展示组件其一确定另一个</p><ul><li>方法 <code>widget(index)</code> 获取选项卡索引对应的界面展示组件</li><li>方法 <code>indexOf(widget)</code> 根据界面展示组件确定对应的选项卡索引</li></ul><p>以下选项卡设置方法均为开关, 通过传入布尔值参数控制</p><ul><li>方法 <code>setTabsClosable(closeable)</code> 设置是否允许创建带有关闭按钮的选项卡, 按下后将触发信号 <a href="#%E9%80%89%E9%A1%B9%E5%8D%A1%E7%95%8C%E9%9D%A2%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BA%A4%E4%BA%92">tabCloseRequested</a> (不会直接删除选项), 默认为 <code>False</code></li><li>方法 <code>setMovable(movable)</code> 设置选项卡为位置可通过鼠标拖动改变, 默认为 <code>False</code></li></ul><h4 id="选项卡界面组件的交互" tabindex="-1"><a class="header-anchor" href="#选项卡界面组件的交互" aria-hidden="true">#</a> 选项卡界面组件的交互</h4><p>以下槽函数可设置当前选中的选项卡</p><ul><li><p>槽函数 <code>setCurrentIndex(index)</code> 设置当前选中选项卡的索引, 当索引超出范围时行为未知</p></li><li><p>槽函数 <code>setCurrentWidget(widget)</code> 设置当前选中选项卡的组件对象, 应当保证组件已经作为选项卡的显示组件插入</p></li><li><p>信号 <code>currentChanged(index)</code> 当显示的选项卡界面发生改变时触发</p><ul><li>数据 <code>index</code> 最新选中的选项卡索引</li><li>当所有选项卡都被删除等意外情况下, 将返回 <code>-1</code></li></ul></li><li><p>信号 <code>tabCloseRequested(index)</code> 当选项卡的关闭按钮被按下时触发</p><ul><li>数据 <code>index</code> 被按下关闭按钮的选项卡索引</li></ul></li></ul><h2 id="组件布局" tabindex="-1"><a class="header-anchor" href="#组件布局" aria-hidden="true">#</a> 组件布局</h2><p>参考文档</p>',19),wn={href:"https://www.pythonguis.com/tutorials/pyside6-layouts/",target:"_blank",rel:"noopener noreferrer"},Fn={href:"https://doc.qt.io/qtforpython-6/overviews/layout.html#layout-management",target:"_blank",rel:"noopener noreferrer"},Pn={href:"https://zhuanlan.zhihu.com/p/654642680",target:"_blank",rel:"noopener noreferrer"},Tn={href:"https://doc.qt.io/qtforpython-6/overviews/layout.html#layout-examples",target:"_blank",rel:"noopener noreferrer"},Dn=e("p",null,[n("一般情况下, 即使用组件基类 "),e("a",{href:"#%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%B1%BB"},"QWidget"),n(" 作为布局的基本单元, 容纳其中的子容器, 本节笔记也默认使用 "),e("a",{href:"#%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%B1%BB"},"QWidget")],-1),Wn=e("p",null,[n("虽然组件基类 "),e("a",{href:"#%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%B1%BB"},"QWidget"),n(" 提供了组件的布局与子组件插入有关方法, 但由于大部分组件包含了具体内容, 插入子组件没有意义, 因此这些方法均被隐藏了")],-1),Mn=e("p",null,[n("除非特别指出否则均不应该调用一般组件的布局相关方法, 一般的做法是使用一个 "),e("a",{href:"#%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%B1%BB"},"QWidget"),n(" 组件作为布局容器, 再将该容器通过组件的特定方法作为子组件插入")],-1),Ln=t(`<h3 id="布局方法" tabindex="-1"><a class="header-anchor" href="#布局方法" aria-hidden="true">#</a> 布局方法</h3><h4 id="布局基本方法" tabindex="-1"><a class="header-anchor" href="#布局基本方法" aria-hidden="true">#</a> 布局基本方法</h4><p>在 Qt 中, 组件容器布局的基本方法如下所示</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">XXXDiv</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>

        layoutBase <span class="token operator">=</span> QVBoxLayout<span class="token punctuation">(</span><span class="token punctuation">)</span>

        layoutBase<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>QLabel<span class="token punctuation">(</span><span class="token string">&quot;Label 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        layoutBase<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>QLabel<span class="token punctuation">(</span><span class="token string">&quot;Label 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        layoutBase<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>QLabel<span class="token punctuation">(</span><span class="token string">&quot;Label 3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>setLayout<span class="token punctuation">(</span>layoutBase<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),Rn=e("li",null,[n("对于多个组件组成的完整界面, "),e("mark",null,"一般通过继承组件基类的方式, 并在构造函数中布局与设置子组件, 以创建自定义的, 带有复杂布局的界面组件")],-1),In=e("mark",null,"特别是主界面布局引擎支持直接插入子布局时",-1),Gn=e("code",null,"LineEditWithSignLayout",-1),Nn=e("li",null,[n("根据具体的布局方式, 创建如 "),e("code",null,"QVBoxLayout"),n(" 等布局引擎对象, 通过操作该对象调整布局细节")],-1),On=e("li",null,[n("通过布局引擎对象的 "),e("code",null,"addWidget"),n(" 等方法添加子组件")],-1),Vn=t(`<h4 id="布局测试" tabindex="-1"><a class="header-anchor" href="#布局测试" aria-hidden="true">#</a> 布局测试</h4><p>可使用以下自定义组件用于测试布局效果</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token keyword">class</span> <span class="token class-name">LayoutMark</span><span class="token punctuation">(</span>QLabel<span class="token punctuation">)</span><span class="token punctuation">:</span>

    MARKER <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span> mark_text <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> mark_text <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>LayoutMark<span class="token punctuation">.</span>MARKER<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
            LayoutMark<span class="token punctuation">.</span>MARKER <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>mark_text<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>setAlignment<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>AlignmentFlag<span class="token punctuation">.</span>AlignCenter<span class="token punctuation">)</span>

        <span class="token keyword">if</span> color <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>setAutoFillBackground<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>
            palette <span class="token operator">=</span> self<span class="token punctuation">.</span>palette<span class="token punctuation">(</span><span class="token punctuation">)</span>
            palette<span class="token punctuation">.</span>setColor<span class="token punctuation">(</span>QPalette<span class="token punctuation">.</span>ColorRole<span class="token punctuation">.</span>Window<span class="token punctuation">,</span> 
                            QColor<span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>setPalette<span class="token punctuation">(</span>palette<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该组件将使用参数 <code>color</code> 指定的颜色填满整个组件区域, 根据不同组件自动编号</p><h3 id="布局引擎" tabindex="-1"><a class="header-anchor" href="#布局引擎" aria-hidden="true">#</a> 布局引擎</h3><p>PySide 中, 布局引擎类通常定义于模块 <code>QtWidgets</code> 下, 且具有名称 <code>QXXXLayout</code>, 但注意这些类不是组件</p><p>布局引擎将根据设置, 在组件大小变化时, 对其下的子组件位置与尺寸进行计算更新</p><h4 id="布局引擎通用设置" tabindex="-1"><a class="header-anchor" href="#布局引擎通用设置" aria-hidden="true">#</a> 布局引擎通用设置</h4>`,8),zn={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QLayout.html#PySide6.QtWidgets.QLayout",target:"_blank",rel:"noopener noreferrer"},Xn=t('<p>方法 <code>setContentsMargins(left, top, right, bottom)</code> 设置布局中子组件间的边距</p><ul><li><code>left, top, right, bottom</code> 布局中子组件在左, 上, 右, 下的边距, 单位像素</li></ul><p>关于组件的具体设置, 应查看类 <code>QWidget</code> 的有关方法</p><ul><li>设置子组件的大小与其中内容的关系<a href="#%E7%BB%84%E4%BB%B6%E5%A4%A7%E5%B0%8F%E8%A7%84%E5%88%99">参见</a></li><li>将子组件从布局中隐藏<a href="#%E7%BB%84%E4%BB%B6%E7%A6%81%E7%94%A8%E4%B8%8E%E9%9A%90%E8%97%8F">参见</a></li><li>通过<a href="#%E7%BB%84%E4%BB%B6%E7%A6%81%E7%94%A8%E4%B8%8E%E9%9A%90%E8%97%8F">禁用容器组件</a>即可实现禁用所有子组件的效果 (通过布局引擎的 <code>setEnabled</code> 方法的禁用效果为布局引擎不再更新其中子组件)</li></ul><h3 id="单向布局引擎" tabindex="-1"><a class="header-anchor" href="#单向布局引擎" aria-hidden="true">#</a> 单向布局引擎</h3>',5),Kn={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QBoxLayout.html#PySide6.QtWidgets.QBoxLayout.addLayout",target:"_blank",rel:"noopener noreferrer"},Hn=e("br",null,null,-1),jn=t('<p>构造函数 <code>QBoxLayout(arg__1)</code></p><ul><li>参数 <code>arg__1</code> 指定了组件排列方向, 参数类型为 <code>QBoxLayout</code> 类下的嵌套枚举类型 <code>Direction</code> , 可用取值有 <ul><li><code>QBoxLayout.Direction.LeftToRight</code> 从左到右水平排列</li><li><code>QBoxLayout.Direction.RightToLeft</code> 从右到左水平排列</li><li><code>QBoxLayout.Direction.TopToBottom</code> 从上到下垂直排列</li><li><code>QBoxLayout.Direction.BottomToTop</code> 从下到上垂直排列</li></ul></li></ul><h4 id="单向布局插入组件" tabindex="-1"><a class="header-anchor" href="#单向布局插入组件" aria-hidden="true">#</a> 单向布局插入组件</h4><p>由于单向布局引擎的特点, 其插入组件方法与 <a href="#%E9%80%9A%E7%94%A8%E8%AE%BE%E7%BD%AE">QLayout</a> 不同, 为 <code>addWidget(arg__1, stretch = 0, alignment = ...)</code></p><ul><li><code>arg__1</code> 待添加的子组件对象</li><li><code>stretch</code> 拉伸系数, 具体见下介绍</li><li><code>alignment</code> 子组件在可用区域内的对齐方式, 默认居中对齐, 用于子组件不能占满整个可用空间的情况, 参数值参见<a href="#%E5%AF%B9%E9%BD%90%E6%A0%B7%E5%BC%8F%E5%80%BC">对齐设置</a></li><li>该方法将在当前布局的末尾插入子组件</li></ul><h4 id="单向布局拉伸因子" tabindex="-1"><a class="header-anchor" href="#单向布局拉伸因子" aria-hidden="true">#</a> 单向布局拉伸因子</h4><p>单向布局中存在拉伸因子, 实现灵活控制其中组件在排列方向占据的长度, 假设沿水平方向排列, 此时子组件的高度对齐, 宽度可拉伸</p><ul><li>与 <a href="#%E9%80%9A%E7%94%A8%E8%AE%BE%E7%BD%AE">QLayout</a> 不同, 单向布局插入组件方法为 <code>addWidget(arg__1, stretch = 0)</code>, 参数 <code>stretch</code> 即拉伸系数, 默认值为 <code>0</code>, 参数类型为整数</li><li>当拉伸因子为 <code>0</code>, 将优先分配带系数的组件的宽度, 剩余空间首先分配给具有推荐大小的子组件, 最后再平均分配给无空间要求的子组件或弹性空间</li><li>当拉伸因子为整数, 将按比例分配各个比例不为 <code>0</code> 的组件大小, 且倾向于取最佳大小</li><li>注意, 单向布局中拉伸因子参数并不是对组件的强制约束, 子组件总是倾向于以最佳大小显示, 因此很可能不满足比例要求</li></ul><h4 id="单向布局其他插入方法" tabindex="-1"><a class="header-anchor" href="#单向布局其他插入方法" aria-hidden="true">#</a> 单向布局其他插入方法</h4><p>单项布局中, 除了组件, 还可使用以下方法在当前布局末尾插入子布局, 弹性空间等</p><ul><li>方法 <code>addSpacing(size)</code> 插入固定宽度的空间, 参数 <code>size</code> 取值为整数, 单位像素</li><li>方法 <code>addStretch(stretch = 0)</code> 插入弹性空间, 参数 <code>stretch</code> 含义见上, 空间的最小大小可以为 0 <ul><li>弹性空间可设置弹性系数为 <code>0</code> 放置在组件之间, 用于吸收多余空间, 以保证其他组件以最佳方式显示</li></ul></li><li>方法 <code>addLayout(layout, stretch = 0)</code> 插入子布局, 通常用于插入另一方向的单向布局</li></ul><h4 id="指定位置插入单向布局" tabindex="-1"><a class="header-anchor" href="#指定位置插入单向布局" aria-hidden="true">#</a> 指定位置插入单向布局</h4><p>方法 <code>addXXX</code> 只能在最末尾插入子组件, 如果需要在指定位置插入子组件, 需要使用 <code>insertXXX</code>, 以 <code>insertWidget(index, widget[, stretch=0[, alignment=Qt.Alignment()]])</code> 为例</p><ul><li>参数 <code>index</code> 插入位置的索引, 传入整数, 从 0 表示第一个元素前开始索引, 负数表示从最后向前索引</li></ul><h3 id="网格布局引擎" tabindex="-1"><a class="header-anchor" href="#网格布局引擎" aria-hidden="true">#</a> 网格布局引擎</h3>',15),Un={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QGridLayout.html#PySide6.QtWidgets.QGridLayout",target:"_blank",rel:"noopener noreferrer"},Jn=t('<h4 id="网格布局插入组件" tabindex="-1"><a class="header-anchor" href="#网格布局插入组件" aria-hidden="true">#</a> 网格布局插入组件</h4><p>网格布局中不需要指定网格划分数, 将通过插入的组件自动确定网格形状</p><ul><li>方法 <code>addWidget(arg__1, row, column, alignment = ...)</code> 插入占据单个网格单元的组件 <ul><li><code>arg__1</code> 插入的子组件对象</li><li><code>row</code> 占据单元的行坐标, 从 <code>0</code> 开始索引</li><li><code>column</code> 占据单元的列坐标, 从 <code>0</code> 开始索引</li><li><code>alignment</code> 子组件在可用区域内的对齐方式, 默认居中对齐, 用于子组件不能占满整个可用空间的情况, 参数值参见<a href="#%E5%AF%B9%E9%BD%90%E6%A0%B7%E5%BC%8F%E5%80%BC">对齐设置</a></li></ul></li><li>方法 <code>addWidget(arg__1, row, column, rowSpan, columnSpan, alignment = ...)</code> 插入占据多个网格单元的组件 <ul><li><code>rowSpan</code> 组件的跨行数 (纵向长度), 至少为 <code>1</code></li><li><code>columnSpan</code> 组件的跨列数 (横向长度), 至少为 <code>1</code></li><li>其余参数含义相同</li></ul></li><li>类似的有以下方法可用于插入子布局 <ul><li><code>addLayout(arg__1, row, column, alignment = ...)</code></li><li><code>addLayout(arg__1, row, column, rowSpan, columnSpan, alignment = ...)</code></li></ul></li></ul><h4 id="设置网格布局" tabindex="-1"><a class="header-anchor" href="#设置网格布局" aria-hidden="true">#</a> 设置网格布局</h4><p>通过以下方法可用于设置网格特定行或列</p><ul><li>方法 <code>setColumnMinimumWidth(column, minSize)</code> 设置列的最小宽度 <ul><li><code>column</code> 被设置列的索引</li><li><code>minSize</code> 最小宽度, 单位像素</li></ul></li><li>方法 <code>setColumnStretch(column, stretch = 0)</code> 设置列的最小拉伸因子 <ul><li><code>column</code> 被设置列的索引</li><li><code>stretch</code> 拉伸因子, 必须是整数 <ul><li>当拉伸因子为 <code>0</code>, 将优先分配带系数的列, 剩余空间分配给设置为 <code>0</code> 的组件</li><li>当拉伸因子为整数, 将按比例分配各个比例不为 <code>0</code> 的列, 且倾向于使其中的组件有最佳大小</li></ul></li><li>通常用于设置</li></ul></li></ul><h3 id="表单布局引擎" tabindex="-1"><a class="header-anchor" href="#表单布局引擎" aria-hidden="true">#</a> 表单布局引擎</h3>',7),Yn={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QFormLayout.html#PySide6.QtWidgets.QFormLayout",target:"_blank",rel:"noopener noreferrer"},Zn=e("h4",{id:"表单行插入",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#表单行插入","aria-hidden":"true"},"#"),n(" 表单行插入")],-1),$n=e("p",null,[n("方法 "),e("code",null,"addRow(labelText, field)"),n(" 可插入单行表单")],-1),ea=e("li",null,[e("code",null,"labelText"),n(" 字段标签内容, 参数值为字符串")],-1),na=e("code",null,"field",-1),aa=e("li",null,"参数值为组件对象时, 即单个输入组件",-1),oa=e("li",null,[n("参数值为布局引擎对象时, 通过"),e("a",{href:"#%E5%8D%95%E5%90%91%E5%B8%83%E5%B1%80"},"横向布局"),n("等方法可实现输入区有多个组件")],-1),ta=e("mark",null,"对于多个组件, 建议传入布置好的布局引擎, 而不是容器组件",-1),sa=e("code",null,"RegistDialog",-1),la=t("<li>重载 <code>addRow(label, field)</code> 可以指定组件作为标签 <ul><li>参数 <code>label</code> 的参数值为组件对象, 不一定是标签组件</li><li>可用于插入非标签组件, 也可用于插入特定格式的标签</li></ul></li><li>重载 <code>addRow(layout)</code> 可插入无字段标签的单行 <ul><li>例如可作为表单最后一行的确认与取消按钮</li><li>类似的有 <code>addRow(widget)</code>, 向单行插入单个组件</li></ul></li>",2),ia=t(`<h4 id="表单布局格式设置" tabindex="-1"><a class="header-anchor" href="#表单布局格式设置" aria-hidden="true">#</a> 表单布局格式设置</h4><p>通常布局格式将会随系统变化, 如果需要手动设置格式, 可参考文档</p><h4 id="表单布局示例" tabindex="-1"><a class="header-anchor" href="#表单布局示例" aria-hidden="true">#</a> 表单布局示例</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> <span class="token punctuation">(</span>
    QLabel<span class="token punctuation">,</span> QLineEdit<span class="token punctuation">,</span> QWidget<span class="token punctuation">,</span> QPushButton<span class="token punctuation">,</span> QRadioButton<span class="token punctuation">,</span> QButtonGroup<span class="token punctuation">,</span>
    QFormLayout<span class="token punctuation">,</span> QBoxLayout<span class="token punctuation">,</span> QGridLayout<span class="token punctuation">,</span> 
    QApplication
<span class="token punctuation">)</span>
<span class="token keyword">from</span> PySide6<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> Qt

<span class="token keyword">class</span> <span class="token class-name">SimpleForm</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        
        self<span class="token punctuation">.</span>base_layout <span class="token operator">=</span> QFormLayout<span class="token punctuation">(</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>l_sec1_title <span class="token operator">=</span> QLabel<span class="token punctuation">(</span><span class="token string">&quot;SECTION 1&quot;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>l_sec1_title<span class="token punctuation">.</span>setAlignment<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>AlignmentFlag<span class="token punctuation">.</span>AlignCenter<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>base_layout<span class="token punctuation">.</span>addRow<span class="token punctuation">(</span>self<span class="token punctuation">.</span>l_sec1_title<span class="token punctuation">)</span>

        <span class="token comment"># 一般插入</span>
        self<span class="token punctuation">.</span>base_layout<span class="token punctuation">.</span>addRow<span class="token punctuation">(</span><span class="token string">&quot;Name:&quot;</span><span class="token punctuation">,</span> QLineEdit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token comment"># 插入布局</span>
        self<span class="token punctuation">.</span>mult_opt_layout <span class="token operator">=</span> QGridLayout<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>bg_mult_opt_group <span class="token operator">=</span> QButtonGroup<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>rb_mult_opt_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                rb_opt <span class="token operator">=</span> QRadioButton<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;opt </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>mult_opt_layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>rb_opt<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>bg_mult_opt_group<span class="token punctuation">.</span>addButton<span class="token punctuation">(</span>rb_opt<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>base_layout<span class="token punctuation">.</span>addRow<span class="token punctuation">(</span><span class="token string">&quot;Opt:&quot;</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>mult_opt_layout<span class="token punctuation">)</span>
        
        <span class="token comment"># 插入指定标签组件行</span>
        self<span class="token punctuation">.</span>cb_addtion_comfirm <span class="token operator">=</span> QRadioButton<span class="token punctuation">(</span><span class="token string">&quot;Addition:&quot;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>le_addtion_input <span class="token operator">=</span> QLineEdit<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>base_layout<span class="token punctuation">.</span>addRow<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cb_addtion_comfirm<span class="token punctuation">,</span> self<span class="token punctuation">.</span>le_addtion_input<span class="token punctuation">)</span>

        <span class="token comment"># 建立连接, 建立前先确定初始状态</span>
        self<span class="token punctuation">.</span>cb_addtion_comfirm<span class="token punctuation">.</span>setChecked<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>le_addtion_input<span class="token punctuation">.</span>setEnabled<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>cb_addtion_comfirm<span class="token punctuation">.</span>toggled<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>le_addtion_input<span class="token punctuation">.</span>setEnabled<span class="token punctuation">)</span>
        
        <span class="token comment"># 插入无标签行</span>
        self<span class="token punctuation">.</span>button_layout <span class="token operator">=</span> QBoxLayout<span class="token punctuation">(</span>QBoxLayout<span class="token punctuation">.</span>Direction<span class="token punctuation">.</span>LeftToRight<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>button_layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>QPushButton<span class="token punctuation">(</span><span class="token string">&quot;Comfirm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>button_layout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>QPushButton<span class="token punctuation">(</span><span class="token string">&quot;Cancle&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>base_layout<span class="token punctuation">.</span>addRow<span class="token punctuation">(</span>self<span class="token punctuation">.</span>button_layout<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>setLayout<span class="token punctuation">(</span>self<span class="token punctuation">.</span>base_layout<span class="token punctuation">)</span>

app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span><span class="token punctuation">)</span>
win <span class="token operator">=</span> SimpleForm<span class="token punctuation">(</span><span class="token punctuation">)</span>

win<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行效果</p><figure><img src="`+u+'" alt="" tabindex="0"><figcaption></figcaption></figure><h2 id="标准界面" tabindex="-1"><a class="header-anchor" href="#标准界面" aria-hidden="true">#</a> 标准界面</h2>',7),ca={href:"https://www.pythonguis.com/tutorials/pyside6-actions-toolbars-menus/",target:"_blank",rel:"noopener noreferrer"},da={href:"https://doc.qt.io/qtforpython-6/overviews/widget-classes.html#main-window-and-related-classes",target:"_blank",rel:"noopener noreferrer"},pa=e("h3",{id:"主界面组件",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#主界面组件","aria-hidden":"true"},"#"),n(" 主界面组件")],-1),ua={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QMainWindow.html#PySide6.QtWidgets.QMainWindow",target:"_blank",rel:"noopener noreferrer"},ra=e("p",null,"对于一般的 Qt 主程序界面, 都将通过继承该组件实现, 并在类的构造函数内进行主界面的具体设置",-1),ha=e("h4",{id:"主界面结构",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#主界面结构","aria-hidden":"true"},"#"),n(" 主界面结构")],-1),Ea=e("figure",null,[e("img",{src:"https://doc.qt.io/qtforpython-6/_images/mainwindowlayout.png",alt:"",tabindex:"0"}),e("figcaption")],-1),Ba=e("p",null,"在 Qt 中, 一个标准的窗口具有如图所示的结构, 分别是",-1),ka=t('<li>Central Widget 界面主体, 通常是一个作为<a href="#%E7%BB%84%E4%BB%B6%E5%B8%83%E5%B1%80">布局容器</a>的 <code>QWidget</code>, <mark>注册方法见<a href="#%E4%B8%BB%E7%95%8C%E9%9D%A2%E6%A0%B7%E5%BC%8F%E8%AE%BE%E7%BD%AE">主界面样式设置</a></mark></li><li>Menu Bar 菜单栏, 在窗口最上方分类折叠存放程序复杂命令, 通过<a href="#%E6%8F%92%E5%85%A5%E8%8F%9C%E5%8D%95%E7%BB%84%E4%BB%B6">菜单栏组件</a>实现</li><li>Tool Bar 工具栏, 在菜单栏下侧存放程序常用命令, 通过<a href="#%E5%B7%A5%E5%85%B7%E6%A0%8F%E7%BB%84%E4%BB%B6">工具栏组件</a>实现</li><li>Status Bar 状态栏, 在主界面最下方显示程序当前状态, 通过<a href="#%E7%8A%B6%E6%80%81%E6%A0%8F%E7%BB%84%E4%BB%B6">状态栏组件</a>实现</li>',4),_a={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QDockWidget.html#PySide6.QtWidgets.QDockWidget",target:"_blank",rel:"noopener noreferrer"},fa={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QMdiArea.html#PySide6.QtWidgets.QMdiArea",target:"_blank",rel:"noopener noreferrer"},ma=t('<p>默认情况下以上组件并不包含在 <code>QMainWindow</code>, 而是需要创建组件并使用相应的注册方法进行注册</p><h4 id="主界面样式设置" tabindex="-1"><a class="header-anchor" href="#主界面样式设置" aria-hidden="true">#</a> 主界面样式设置</h4><p>通常主界面组件将直接作为应用窗口即顶级组件, 与窗口相关的方法参见<a href="#%E7%AA%97%E5%8F%A3%E4%B8%93%E7%94%A8%E6%96%B9%E6%B3%95">窗口专用方法</a></p><p>方法 <code>setCentralWidget(widget)</code> 将指定组件注册为界面主体</p><ul><li><code>widget</code> 任意容器组件, 通常是一个作为<a href="#%E7%BB%84%E4%BB%B6%E5%B8%83%E5%B1%80">布局容器</a>的 <code>QWidget</code></li></ul><h3 id="命令组件" tabindex="-1"><a class="header-anchor" href="#命令组件" aria-hidden="true">#</a> 命令组件</h3>',6),ba=e("br",null,null,-1),ga={href:"https://doc.qt.io/qtforpython-6/PySide6/QtGui/QAction.html#PySide6.QtGui.QAction",target:"_blank",rel:"noopener noreferrer"},Aa=e("mark",null,"同一个命令仅需使用一个命令组件对象管理",-1),va=t('<p>注意, 与一般组件不同, 命令组件位于 <code>QtGui</code> 模块下</p><p>关于命令组件在工具栏与菜单等的应用见下文介绍, 此外抽象组件也可通过<a href="#%E6%99%AE%E9%80%9A%E6%8C%89%E9%92%AE">按钮组件</a>管理的方式呈现</p><h4 id="创建命令组件" tabindex="-1"><a class="header-anchor" href="#创建命令组件" aria-hidden="true">#</a> 创建命令组件</h4><p>对于一般组件通常都具有明确的上下级关系, 而命令组件则是一个对象插入到不同组件中, 因此无法明确其父组件, <mark>需要通过构造函数确定</mark></p><p>构造函数 <code>QAction(parent = None)</code></p><ul><li><code>parent</code> 命令组件的父组件 <ul><li>通常为命令所在的<a href="#%E4%B8%BB%E7%95%8C%E9%9D%A2%E7%BB%84%E4%BB%B6">主界面组件</a></li><li>对于<a href="#%E4%BA%92%E6%96%A5%E5%91%BD%E4%BB%A4%E7%BB%84">互斥命令</a>, 则可以传入命令组组件</li></ul></li></ul><p>此外还有以下带有<a href="#%E5%91%BD%E4%BB%A4%E7%BB%84%E4%BB%B6%E6%A0%B7%E5%BC%8F%E8%AE%BE%E7%BD%AE">样式设置</a>的构造函数</p><ul><li>构造函数 <code>QAction(text, parent = None)</code> 通过参数 <code>text</code> 确定命令展示名称</li><li>构造函数 <code>QAction(icon, text, parent = None)</code> 通过参数 <code>icon, text</code> 确定命令展示图标与名称</li></ul><h4 id="命令组件样式设置" tabindex="-1"><a class="header-anchor" href="#命令组件样式设置" aria-hidden="true">#</a> 命令组件样式设置</h4><p>通过以下方法设置命令组件的样式</p><ul><li>方法 <code>setText(text)</code> 设置命令在组件上展示的名称, 传入字符串</li><li>方法 <code>setIcon(icon)</code> 设置命令在组件上展示的图标, 传入<a href="#%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90-qpixmap">图片资源管理类</a></li><li>方法 <code>setToolTip(tip)</code> 设置命令的工具提示, 即鼠标停留在上方时显示的提示内容, 通常为简短的说明, 传入字符串, 默认为 <code>setText</code> 设置值</li><li>方法 <code>setStatusTip(statusTip)</code> 设置命令的状态提示, 即鼠标停留在上方时在<a href="#%E7%8A%B6%E6%80%81%E6%A0%8F%E7%BB%84%E4%BB%B6">状态栏</a>显示的消息, 通常为详细说明, 传入字符串, 默认为空字符串</li><li>方法 <code>setShortcut(arg__1)</code> 设置等效于点击命令的快捷键, 传入<a href="#%E9%94%AE%E7%9B%98%E6%8C%89%E9%94%AE%E4%B8%8E%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%A0%B7%E5%BC%8F%E5%80%BC">快捷键样式</a></li><li>方法 <code>setCheckable(arg__1)</code> 设置命令为自锁命令, 即具有两种状态, 触发命令时将切换状态, 默认为 <code>False</code></li></ul><h4 id="命令组件交互" tabindex="-1"><a class="header-anchor" href="#命令组件交互" aria-hidden="true">#</a> 命令组件交互</h4><p>槽函数 <code>setEnabled(arg__1)</code> 设置命令是否有效</p><ul><li><code>arg__1</code> 传入 <code>False</code> 将禁用该命令</li></ul><p>对于一般命令组件</p><ul><li>槽函数 <code>trigger()</code> 触发命令组件</li><li>信号 <code>triggered()</code> 将在命令组件以任何形式触发时发出</li></ul><p>对于自锁命令</p><ul><li>方法 <code>isChecked()</code> 返回当前命令的状态</li><li>槽函数 <code>setChecked(arg__1)</code> 设置触发状态, 传入布尔值</li><li>信号 <code>toggled(arg__1)</code> 当命令状态以任意形式切换时触发, 数据为当前状态, 类型为布尔值</li></ul><h4 id="互斥命令组" tabindex="-1"><a class="header-anchor" href="#互斥命令组" aria-hidden="true">#</a> 互斥命令组</h4><p>对于自锁模式下的命令组件, 还可实现类似<a href="#%E5%8D%95%E9%80%89%E6%A1%86%E7%BB%84%E4%BB%B6">按钮组</a>的效果, 即命令组中只能有一个处于触发状态的命令</p>',20),Qa={href:"https://doc.qt.io/qtforpython-6/PySide6/QtGui/QActionGroup.html#PySide6.QtGui.QActionGroup",target:"_blank",rel:"noopener noreferrer"},ya=e("code",null,"QtGui",-1),xa=t('<p>命令组构造函数 <code>QActionGroup(parent)</code></p><ul><li><code>parent</code> 命令组的父组件, 通常为命令所在的<a href="#%E4%B8%BB%E7%95%8C%E9%9D%A2%E7%BB%84%E4%BB%B6">主界面组件</a></li><li>与<a href="#%E5%88%9B%E5%BB%BA%E5%91%BD%E4%BB%A4%E7%BB%84%E4%BB%B6">创建命令组件</a>原因相同, 且命令组组件必须指定父组件</li></ul><p>命令组方法 <code>addAction(a)</code> 向命令组添加命令</p><ul><li><code>a</code> 被添加的命令组件, 对于命令组下的命令, <a href="#%E5%88%9B%E5%BB%BA%E5%91%BD%E4%BB%A4%E7%BB%84%E4%BB%B6">可不指定父组件</a></li><li>应当保证被添加的命令为<a href="#%E5%91%BD%E4%BB%A4%E7%BB%84%E4%BB%B6%E6%A0%B7%E5%BC%8F%E8%AE%BE%E7%BD%AE">自锁命令</a>, 即设置 <code>setCheckable(True)</code></li></ul><p>命令组方法 <code>actions()</code> 获取组中的所用命令</p><ul><li>返回值为一个命令组件对象的列表</li><li>可配合 <code>addActions</code> 方法一次性添加多个组件</li></ul><p>命令组方法 <code>checkedAction()</code> 获取当前触发的命令组件</p><ul><li>返回值为触发的命令组件, 如果没有触发组件返回 <code>None</code></li></ul><p>命令组信号 <code>triggered(arg__1)</code> 在命令组中任意命令被触发时发出</p><ul><li><code>arg__1</code> 触发的命令组件</li><li>与选框组不同, 仅被按下的命令会发出信号, 即参数 <code>arg__1</code> 对应的命令一定被触发</li><li>并且即使命令已触发后又被重复按下依然会发出信号</li></ul><p>如果要设置其中单个命令的状态, 需要直接访问命令组件, 无法通过命令组操作其中的命令</p><h3 id="工具栏组件" tabindex="-1"><a class="header-anchor" href="#工具栏组件" aria-hidden="true">#</a> 工具栏组件</h3>',12),Sa={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QToolBar.html#PySide6.QtWidgets.QToolBar",target:"_blank",rel:"noopener noreferrer"},Ca=t(`<h4 id="工具栏添加项目" tabindex="-1"><a class="header-anchor" href="#工具栏添加项目" aria-hidden="true">#</a> 工具栏添加项目</h4><p>工具栏在添加组件时, 将从左向右按添加顺序从早到晚排列组件</p><p>方法 <code>addAction(action)</code> 向工具栏添加命令组件</p><ul><li><code>action</code> 添加命令组件对象, 对于一个命令对象可以被添加到不同组件中</li><li>还有方法 <code>addActions(actions)</code> 接收命令组件对象的列表, 以一次性插入多个命令</li></ul><p>方法 <code>addSeparator()</code> 向工具栏添加分隔线</p><ul><li>返回一个不可操作的 <code>QAction</code> 对象, 用于管理该分隔线</li></ul><p>方法 <code>addWidget(widget)</code> 向工具栏添加组件</p><ul><li>通常用于传入<a href="#%E6%A0%87%E7%AD%BE%E7%BB%84%E4%BB%B6">标签</a>与<a href="#%E6%95%B0%E5%80%BC%E5%BE%AE%E8%B0%83%E6%A0%8F%E7%BB%84%E4%BB%B6">数值微调栏</a>等, 但应当以插入命令为主</li><li>返回一个不可操作的 <code>QAction</code> 对象, 用于管理该组件</li></ul><h4 id="工具栏样式设置" tabindex="-1"><a class="header-anchor" href="#工具栏样式设置" aria-hidden="true">#</a> 工具栏样式设置</h4><p>方法 <code>setMovable(movable)</code> 设置工具栏为可移动的, 即可以通过鼠标拖动, 调整工具栏的方位</p><ul><li><code>movable</code> 是否允许移动, 默认为 <code>True</code></li><li>浮动状态下, 可令工具栏停靠在界面主体的特定位置, 另一个工具栏后方, 作为独立浮动窗口</li></ul><p>方法 <code>setAllowedAreas(areas)</code> 设置工具栏允许停靠区域</p><ul><li><code>areas</code> 参数值为枚举类型 <code>Qt.ToolBarArea</code> 的值或通过 <code>|</code> 的组合, 常用有 <ul><li><code>ToolBarArea.TopToolBarArea</code> 停靠在界面主体上方</li><li><code>ToolBarArea.LeftToolBarArea</code> 停靠在界面主体左侧</li><li><code>ToolBarArea.AllToolBarAreas</code> 停靠在任意位置 (默认)</li></ul></li></ul><p>方法 <code>setFloatable(floatable)</code> 设置工具栏除了停靠之外, 还可以作为浮动窗口</p><ul><li><code>floatable</code> 是否允许作为浮动窗口, 默认为 <code>True</code></li></ul><p>方法 <code>setToolButtonStyle(toolButtonStyle)</code> 射中工具栏中, 显示命令组件的样式 (对其他添加的组件不生效)</p><ul><li><code>toolButtonStyle</code> 参数值使用 <code>Qt</code> 模块下的枚举类型 <code>Qt.ToolButtonStyle</code>, 常用的有 <ul><li><code>ToolButtonStyle.ToolButtonIconOnly</code> 命令有图标时, 只显示图标 (默认)</li><li><code>ToolButtonStyle.ToolButtonTextOnly</code> 只显示命令名称</li><li><code>ToolButtonStyle.ToolButtonTextBesideIcon</code> 在图标后显示命令名称</li><li><code>ToolButtonStyle.ToolButtonTextUnderIcon</code> 在图标下显示命令名称</li></ul></li></ul><p>方法 <code>setWindowTitle(arg__1)</code> 设置工具栏名称</p><ul><li><code>arg__1</code> 工具栏名称, 传入字符串</li><li>对于添加到主界面的工具栏, 通过工具栏的右键菜单可选择关闭工具栏</li><li>同样可通过工具栏的构造函数 <code>QToolBar(title)</code> 设置工具栏名称</li></ul><h4 id="管理工具栏" tabindex="-1"><a class="header-anchor" href="#管理工具栏" aria-hidden="true">#</a> 管理工具栏</h4><p>方法 <code>toggleViewAction()</code> 获取一个管理工具栏是否可视的自锁命令组件</p><ul><li>当命令处于触发状态时, 工具栏可视 (即<a href="#%E7%BB%84%E4%BB%B6%E7%A6%81%E7%94%A8%E4%B8%8E%E9%9A%90%E8%97%8F">组件状态</a>中 <code>isVisible()</code> 为 <code>True</code>)</li><li>建议通过该命令设置工具栏的可视与隐藏, 使用时可将该命令作为<a href="#%E8%8F%9C%E5%8D%95%E6%B7%BB%E5%8A%A0%E9%A1%B9%E7%9B%AE">菜单项目</a>或<a href="#%E6%99%AE%E9%80%9A%E6%8C%89%E9%92%AE">工具按钮</a></li><li>该组件以工具栏名称为标题</li><li>默认通过右键工具栏, 还可唤出一个管理所有工具栏的菜单, 为了避免用户误关所有工具栏, 应当利用此命令, 在窗口的菜单栏创建相同的菜单管理工具栏</li></ul><p><a href="#%E4%B8%BB%E7%95%8C%E9%9D%A2%E7%BB%84%E4%BB%B6">主界面组件</a>方法 <code>addToolBar(area, toolbar)</code> 插入工具栏</p><ul><li><code>area</code> 工具栏位置, 传入枚举类型 <code>Qt.ToolBarArea</code> 的值, 参见 <a href="#%E5%B7%A5%E5%85%B7%E6%A0%8F%E6%A0%B7%E5%BC%8F%E8%AE%BE%E7%BD%AE">setAllowedAreas</a> 方法</li><li><code>toolbar</code> 插入的工具栏组件</li><li>有重载 <code>addToolBar(toolbar)</code> 将始终在界面主题上方插入工具栏</li></ul><p><a href="#%E4%B8%BB%E7%95%8C%E9%9D%A2%E7%BB%84%E4%BB%B6">主界面组件</a>方法 <code>addToolBarBreak(area = ToolBarArea.TopToolBarArea)</code> 令指定区域插入的新工具栏另起一行</p><ul><li><code>area</code> 设置位置, 传入枚举类型 <code>Qt.ToolBarArea</code> 的值, 参见 <a href="#%E5%B7%A5%E5%85%B7%E6%A0%8F%E6%A0%B7%E5%BC%8F%E8%AE%BE%E7%BD%AE">setAllowedAreas</a> 方法</li><li>如果不使用此方法, 在同一位置插入工具栏时, 默认将在已有工具栏后方插入</li></ul><p>例如以下代码可添加两个独立两行的工具栏</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>self<span class="token punctuation">.</span>addToolBar<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>ToolBarArea<span class="token punctuation">.</span>TopToolBarArea<span class="token punctuation">,</span> QToolBar<span class="token punctuation">(</span><span class="token string">&quot;Bar 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
self<span class="token punctuation">.</span>addToolBarBreak<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>ToolBarArea<span class="token punctuation">.</span>TopToolBarArea<span class="token punctuation">)</span>
self<span class="token punctuation">.</span>addToolBar<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>ToolBarArea<span class="token punctuation">.</span>TopToolBarArea<span class="token punctuation">,</span> QToolBar<span class="token punctuation">(</span><span class="token string">&quot;Bar 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="菜单组件" tabindex="-1"><a class="header-anchor" href="#菜单组件" aria-hidden="true">#</a> 菜单组件</h3>`,29),qa={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QMenu.html#PySide6.QtWidgets.QMenu",target:"_blank",rel:"noopener noreferrer"},wa=t('<h4 id="菜单添加项目" tabindex="-1"><a class="header-anchor" href="#菜单添加项目" aria-hidden="true">#</a> 菜单添加项目</h4><p>方法 <code>addAction(action)</code> 向菜单添加命令组件</p><ul><li><code>action</code> 添加命令组件对象, 对于一个命令对象可以被添加到不同组件中</li><li>还有方法 <code>addActions(actions)</code> 接收命令组件对象的列表, 以一次性插入多个命令</li></ul><p>方法 <code>addMenu(menu)</code> 向菜单添加子菜单</p><ul><li><code>menu</code> 子菜单对应的菜单组件对象</li><li>该方法将返回一个特殊的命令组件, 使用方法同 <a href="#%E7%AE%A1%E7%90%86%E8%8F%9C%E5%8D%95">menuAction()</a>, 还可用于菜单项管理方法</li></ul><p>方法 <code>addSeparator()</code> 向菜单添加分割线</p><ul><li>该方法将返回一个特殊的命令组件, 仅用于菜单项管理方法</li></ul><h4 id="菜单样式设置" tabindex="-1"><a class="header-anchor" href="#菜单样式设置" aria-hidden="true">#</a> 菜单样式设置</h4><p>方法 <code>setSeparatorsCollapsible(collapse)</code> 设置是否合并连续的分割线</p><ul><li><code>collapse</code> 布尔值, 开启时合并, 默认为 <code>True</code></li></ul><p>方法 <code>setTearOffEnabled(arg__1)</code> 设置菜单是否可分离</p><ul><li><code>arg__1</code> 布尔值, 开启时菜单可分离, 默认为 <code>False</code></li><li>菜单可分离时, 菜单上将出现一条虚线, 用户可通过点击虚线, 创建一个独立窗口, 内容与菜单相同</li></ul><p>方法 <code>setDefaultAction(arg__1)</code> 设置强调菜单项</p><ul><li><code>arg__1</code> 命令组件, 应当是菜单项或子菜单 (方法 <a href="#%E8%8F%9C%E5%8D%95%E6%B7%BB%E5%8A%A0%E9%A1%B9%E7%9B%AE">addMenu()</a> 返回的命令组件)</li><li>被强调的菜单项, 名称将加粗</li></ul><p>方法 <code>setTitle(arg__1)</code> 设置菜单名称</p><ul><li><code>arg__1</code> 菜单名称, 传入字符串</li><li>即菜单作为子菜单, 按钮, 位于菜单栏时的名称</li><li>同样可通过菜单的构造函数 <code>QMenu(title)</code> 设置菜单名称</li></ul><p>方法 <code>setToolTipsVisible(visible)</code> 设置菜单选项是否显示提示</p><ul><li><code>visible</code> 布尔值, 开启时菜单选项也能显示提示, 默认为 <code>False</code></li></ul><p>关于提示信息, 参见 <a href="#%E7%AE%A1%E7%90%86%E8%8F%9C%E5%8D%95">menuAction()</a>, 通过其返回的命令组件对象的<a href="#%E5%91%BD%E4%BB%A4%E7%BB%84%E4%BB%B6%E6%A0%B7%E5%BC%8F%E8%AE%BE%E7%BD%AE">样式设置</a>实现</p><h4 id="管理菜单" tabindex="-1"><a class="header-anchor" href="#管理菜单" aria-hidden="true">#</a> 管理菜单</h4><p>方法 <code>menuAction()</code> 获取一个包含了菜单的特殊命令组件</p><ul><li>该命令组件可作为<a href="#%E5%B7%A5%E5%85%B7%E6%A0%8F%E6%B7%BB%E5%8A%A0%E9%A1%B9%E7%9B%AE">工具栏项目</a>或<a href="#%E6%99%AE%E9%80%9A%E6%8C%89%E9%92%AE">工具按钮</a>, 此时将体现为一个右侧带有下拉标识的按钮, 点击下拉标识可唤出菜单, 点击按钮等效为触发命令</li><li>通过该命令与<a href="#%E6%99%AE%E9%80%9A%E6%8C%89%E9%92%AE">工具按钮</a>可用于创建菜单按钮</li><li>一般不直接使用此命令的交互方法, 但可通过此命令组件对象设置 <code>toolTip</code> 与 <code>statusTip</code> 等<a href="#%E5%91%BD%E4%BB%A4%E7%BB%84%E4%BB%B6%E6%A0%B7%E5%BC%8F%E8%AE%BE%E7%BD%AE">提示样式</a></li></ul>',22),Fa=e("a",{href:"#%E4%B8%BB%E7%95%8C%E9%9D%A2%E7%BB%84%E4%BB%B6"},"主界面组件",-1),Pa={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QMenuBar.html#PySide6.QtWidgets.QMenuBar",target:"_blank",rel:"noopener noreferrer"},Ta=t('<ul><li>对于菜单栏组件 <code>QMenuBar</code><ul><li>方法 <code>addMenu(menu)</code> 向菜单栏插入菜单, <code>menu</code> 即待插入的菜单组件</li><li>方法 <code>addSeparator()</code> 向菜单栏插入分隔符</li></ul></li><li>对于主界面组件 <code>QMainWindow</code><ul><li>方法 <code>setMenuBar(menubar)</code> 将菜单栏组件注册到主界面, <code>menubar</code> 即待注册的菜单栏组件, 一个主界面只有一个菜单栏</li></ul></li></ul><h3 id="状态栏组件" tabindex="-1"><a class="header-anchor" href="#状态栏组件" aria-hidden="true">#</a> 状态栏组件</h3>',2),Da={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QStatusBar.html#PySide6.QtWidgets.QStatusBar",target:"_blank",rel:"noopener noreferrer"},Wa=t(`<h4 id="状态栏样式设置" tabindex="-1"><a class="header-anchor" href="#状态栏样式设置" aria-hidden="true">#</a> 状态栏样式设置</h4><p>方法 <code>addPermanentWidget(widget, stretch = 0)</code> 在状态栏最右侧添加永久组件</p><ul><li><code>widget</code> 添加的组件, 通常添加<a href="#%E6%A0%87%E7%AD%BE%E7%BB%84%E4%BB%B6">标签组件</a>以呈现当前程序的状态信息</li><li><code>stretch</code> 拉伸系数, 可参见<a href="#%E5%8D%95%E5%90%91%E5%B8%83%E5%B1%80%E5%BC%95%E6%93%8E">单向布局</a></li></ul><p>方法 <code>setSizeGripEnabled(arg__1)</code> 是否在状态栏右下角添加拖动缩放控件</p><ul><li><code>arg__1</code> 布尔值, 开启时添加, 默认为 <code>True</code></li></ul><h4 id="状态栏交互" tabindex="-1"><a class="header-anchor" href="#状态栏交互" aria-hidden="true">#</a> 状态栏交互</h4><p>槽函数 <code>showMessage(text, timeout = 0)</code> 在状态栏显示消息</p><ul><li><code>text</code> 消息内容, 字符串</li><li><code>timeout</code> 消息显示时长, 单位毫秒, 传入 <code>0</code> 将永久显示, 但可能被其他消息覆盖</li></ul><p>槽函数 <code>clearMessage()</code> 清除状态栏显示的消息</p><p>方法 <code>currentMessage()</code> 获取当前状态栏显示的消息</p><p>信号 <code>messageChanged(text)</code> 当状态栏消息改变时发出</p><ul><li>数据 <code>text</code> 最新的状态栏消息字符串, 当消息被清空时为 <code>None</code></li></ul><p>注意, 命令组件的 <a href="#%E5%91%BD%E4%BB%A4%E7%BB%84%E4%BB%B6%E6%A0%B7%E5%BC%8F%E8%AE%BE%E7%BD%AE">setStatusTip</a> 方法也可以在状态栏产生消息<br> 可使用如下示例, 当状态栏空闲时显示固定的消息</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    self<span class="token punctuation">.</span>sbMain<span class="token punctuation">.</span>messageChanged<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>SlotKeepMessage<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@Slot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">SlotKeepMessage</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 当 setStatusTip 没有设置时, 为空字符串</span>
    <span class="token keyword">if</span> text <span class="token operator">==</span> <span class="token boolean">None</span> <span class="token keyword">or</span> text <span class="token operator">==</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>sbMain<span class="token punctuation">.</span>showMessage<span class="token punctuation">(</span><span class="token string">&quot;Ready&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="管理状态栏" tabindex="-1"><a class="header-anchor" href="#管理状态栏" aria-hidden="true">#</a> 管理状态栏</h4><p><a href="#%E4%B8%BB%E7%95%8C%E9%9D%A2%E7%BB%84%E4%BB%B6">主界面组件</a>方法 <code>setStatusBar(statusbar)</code> 注册主界面的状态栏</p><ul><li><code>statusbar</code> 待注册的状态栏组件, 一个主界面只有一个状态栏</li></ul><h2 id="多窗口" tabindex="-1"><a class="header-anchor" href="#多窗口" aria-hidden="true">#</a> 多窗口</h2>`,18),Ma={href:"https://www.pythonguis.com/tutorials/pyside6-dialogs/",target:"_blank",rel:"noopener noreferrer"},La=e("h3",{id:"自定义会话窗口",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#自定义会话窗口","aria-hidden":"true"},"#"),n(" 自定义会话窗口")],-1),Ra={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QDialog.html#PySide6.QtWidgets.QDialog",target:"_blank",rel:"noopener noreferrer"},Ia=t('<p>使用会话窗口时注意</p><ul><li>会话窗口可以直接布局, 因此可以像 <code>QWidget</code> 一样使用<a href="#%E7%BB%84%E4%BB%B6%E5%B8%83%E5%B1%80">组件布局</a>方法确定会话窗口的内容</li><li>一般通过继承 <code>QDialog</code> 的方式, 在构造函数中布局组件, 创建自定义的会话窗口并使用</li><li>会话窗口作为一个独立的子窗口, 可通过<a href="#%E7%AA%97%E5%8F%A3%E4%B8%93%E7%94%A8%E6%96%B9%E6%B3%95">窗口专用方法</a>进行窗口相关设置</li><li>建议指定会话窗口的父组件 (即在构造函数指定 <code>parent</code> 参数), 以得到更好的显示效果</li></ul><p>会话窗口有两种模式</p><ul><li>模态会话窗口 (Modal Dialog), 此类会话窗口用于接收用户输入, 在显示时主界面将被阻塞, 直到用户退出会话</li><li>非模态会话窗口 (Modeless Dialog), 既不阻塞主程序, 又接收用户的命令, 主要用于<a href="#%E8%BF%9B%E5%BA%A6%E6%9D%A1%E4%BC%9A%E8%AF%9D%E7%AA%97%E5%8F%A3">进度条会话窗口</a>或信息显示窗口等</li></ul><h4 id="会话窗口交互" tabindex="-1"><a class="header-anchor" href="#会话窗口交互" aria-hidden="true">#</a> 会话窗口交互</h4><p>方法 <code>open()</code> 以模态会话窗口的方式显示</p><ul><li>当该方法被调用后, <mark>函数将立刻返回</mark>, 但主窗口则会被阻塞直到会话关闭, 通过信号的方式异步获取会话结果</li><li>一个会话窗口对象在被关闭后可以重复打开, 因此一般将会话窗口定义为主窗口的子组件</li><li>注意, 使用 <code>open()</code> 方法时, 应当保证<mark>会话窗口对象必须作为全局或成员变量</mark>, 否则窗口将随局部变量的销毁而提前关闭 <ul><li>对于含有多个窗口的程序, 该方法可能会导致不必要的内存消耗, 为此可改用以下方法降低内存消耗</li><li>首先依然创建成员变量, 但赋值为 <code>None</code>, 仅在显示会话窗口时创建对象并赋值</li><li>当会话窗口退出后, 重新赋 <code>None</code>, 在 Python 中等效于析构组件, 从而释放内存</li></ul></li><li>此外还有方法 <code>exec()</code>, 能阻塞程序以同步获取信号结果, 因此即使是局部变量也可调用, 但一般仅用于<a href="#%E6%B6%88%E6%81%AF%E7%AA%97%E5%8F%A3">消息窗口</a></li></ul><p>槽函数 <code>done(arg__1)</code> 退出会话窗口并返回退出码</p><ul><li><code>arg__1</code> 允许传入整数, 但建议使用 <code>QDialog</code> 下枚举类型 <code>DialogCode</code> 的值, 可用的有 <ul><li><code>DialogCode.Accepted</code> 允许 <ul><li>通常用于表示会话接收到了数据</li><li>也可通过调用槽函数 <code>accept()</code> 发出</li></ul></li><li><code>DialogCode.Rejected</code> 拒绝 <ul><li>通常用于表示会话被拒绝</li><li>当窗口被关闭, <kbd>Esc</kbd> 被按下而关闭等情况, 也将使用该退出码</li><li>也可通过调用槽函数 <code>reject()</code> 发出</li></ul></li></ul></li><li>注意, 由于主窗口被阻塞, 因此该方法应当在自定义的会话窗口类内调用</li><li>通常通过<a href="#%E4%BC%9A%E8%AF%9D%E6%8C%89%E9%92%AE%E7%BB%84%E7%BB%84%E4%BB%B6">会话按钮组组件</a>发出信号</li></ul><p>信号 <code>finished(result)</code> 当会话窗口退出时发出</p>',10),Ga=e("li",null,[n("数据 "),e("code",null,"result"),n(" 窗口退出时发出的整数退出码")],-1),Na=e("code",null,"RegistDialog",-1),Oa=t(`<h4 id="非模会话态窗口" tabindex="-1"><a class="header-anchor" href="#非模会话态窗口" aria-hidden="true">#</a> 非模会话态窗口</h4><p>方法 <code>show()</code> 以非模态会话窗口的方式显示</p><ul><li>该方法的使用注意与 <code>open()</code> 基本相同, 仅存在部分区别</li></ul><p>方法 <code>setModal(modal)</code> 设置会话窗口类型</p><ul><li><code>modal</code> 设置为 <code>True</code> 时窗口强制为模态, 此时方法 <code>show</code> 与 <code>open</code> 等效, 默认为 <code>False</code></li><li>该方法主要用于<a href="#%E6%B6%88%E6%81%AF%E7%AA%97%E5%8F%A3">消息窗口</a>, 因为其强制为模态, 需要通过该方法修改才能以非模态的方式显示</li></ul><p>使用非模态窗口时注意</p><ul><li>非模态会话窗口与主窗口之间一般通过<a href="#%E4%BF%A1%E5%8F%B7%E6%A7%BD%E6%9C%BA%E5%88%B6">信号</a>联系与传递数据</li><li>非模态会话窗口的关闭与显示等效于组件的隐藏与显示, 因此相关判断方法参见<a href="#%E7%BB%84%E4%BB%B6%E7%A6%81%E7%94%A8%E4%B8%8E%E9%9A%90%E8%97%8F">组件显示与隐藏</a></li></ul><p>如果使用<a href="#%E4%BC%9A%E8%AF%9D%E7%AA%97%E5%8F%A3%E4%BA%A4%E4%BA%92">模态窗口</a>的方式, 将组件作为成员变量, 则一个对象仅能管理一个窗口, 无法同时大量创建会话窗口<br> 对于非阻塞的<a href="#%E6%B6%88%E6%81%AF%E7%AA%97%E5%8F%A3">消息窗口</a>, 可能希望能大量创建, 且数量不确定, 因此需要使用以下方式创建临时非模态窗口</p><ul><li>此时需要将 <code>QDialog</code> 组件保存为函数的局部变量, 并且在<a href="#%E7%BB%84%E4%BB%B6%E9%80%9A%E7%94%A8%E6%96%B9%E6%B3%95">构造函数</a>中, 必须指定父组件</li><li>调用组件设置方法 <code>setAttribute(Qt.WidgetAttribute.WA_DeleteOnClose)</code>, 该方法表明该组件将在关闭后自动销毁, 以此防止内存消耗</li></ul><p>临时非模态的消息窗口创建示例如下</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MainWin</span><span class="token punctuation">(</span>QMainWindow<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token punctuation">:</span> QWidget <span class="token operator">|</span> <span class="token boolean">None</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>pbShow <span class="token operator">=</span> QPushButton<span class="token punctuation">(</span><span class="token string">&quot;Click&quot;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>pbShow<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_SlotShowDialog<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>setCentralWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pbShow<span class="token punctuation">)</span>
    
    message_count <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token decorator annotation punctuation">@Slot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">_SlotShowDialog</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        message <span class="token operator">=</span> QMessageBox<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
        <span class="token comment"># 设置为非模态</span>
        message<span class="token punctuation">.</span>setModal<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>

        MainWin<span class="token punctuation">.</span>message_count <span class="token operator">+=</span> <span class="token number">1</span>
        message<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;This is </span><span class="token interpolation"><span class="token punctuation">{</span>MainWin<span class="token punctuation">.</span>message_count<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

        <span class="token comment"># 使组件正确销毁</span>
        message<span class="token punctuation">.</span>setAttribute<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>WidgetAttribute<span class="token punctuation">.</span>WA_DeleteOnClose<span class="token punctuation">)</span>
        message<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="会话按钮组组件" tabindex="-1"><a class="header-anchor" href="#会话按钮组组件" aria-hidden="true">#</a> 会话按钮组组件</h3>`,12),Va={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QDialogButtonBox.html#PySide6.QtWidgets.QDialogButtonBox",target:"_blank",rel:"noopener noreferrer"},za=t(`<h4 id="绘画按钮组交互" tabindex="-1"><a class="header-anchor" href="#绘画按钮组交互" aria-hidden="true">#</a> 绘画按钮组交互</h4><p>该组件将会话窗口的命令主要分为三种, 使用 <code>QDialogButtonBox</code> 下的枚举类型 <code>ButtonRole</code> 表示</p><ul><li><code>ButtonRole.AcceptRole</code> 表示执行会话 <ul><li>该类型的命令将触发组件信号 <code>accepted()</code></li></ul></li><li><code>ButtonRole.RejectRole</code> 表示拒绝会话 <ul><li>该类型的命令将触发组件信号 <code>reject()</code></li></ul></li><li><code>ButtonRole.HelpRole</code> 表示请求会话帮助 <ul><li>该类型的命令将触发组件信号 <code>helpRequested()</code></li></ul></li></ul><p>通过以下示例代码即可在会话窗口与会话按钮组件之间建立联系</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">ExampleDialog</span><span class="token punctuation">(</span>QDialog<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

        buttonBox <span class="token operator">=</span> QDialogButtonBox<span class="token punctuation">(</span><span class="token punctuation">)</span>
        buttonBox<span class="token punctuation">.</span>accepted<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>accept<span class="token punctuation">)</span>
        buttonBox<span class="token punctuation">.</span>rejected<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>reject<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),Xa=e("code",null,"RegistDialog",-1),Ka=t('<h4 id="会画按钮组样式设置" tabindex="-1"><a class="header-anchor" href="#会画按钮组样式设置" aria-hidden="true">#</a> 会画按钮组样式设置</h4><p>方法 <code>addButton(button, role)</code> 向按钮组添加按钮</p><ul><li><code>button</code> 任意按钮组件</li><li><code>role</code> 按钮命令类型, 使用枚举类型 <a href="#%E7%BB%98%E7%94%BB%E6%8C%89%E9%92%AE%E7%BB%84%E4%BA%A4%E4%BA%92">QDialogButtonBox.ButtonRole</a></li></ul><p>方法 <code>setStandardButtons(buttons)</code> 快速添加标准按钮</p>',4),Ha=e("code",null,"buttons",-1),ja=e("code",null,"QDialogButtonBox.StandardButton",-1),Ua=e("code",null,"|",-1),Ja=t("<li><code>StandardButton.Ok</code>, 体现为确认按钮, 对应 <code>AcceptRole</code></li><li><code>StandardButton.Cancel</code>, 体现为取消按钮, 对应 <code>RejectRole</code></li><li><code>StandardButton.Help</code>, 体现为帮助按钮, 对应 <code>HelpRole</code></li><li><code>QDialogButtonBox.Save</code>, 体现为保存按钮, 对应 <code>AcceptRole</code></li><li><code>StandardButton.Discard</code>, 体现为取消保存按钮, 对应 <code>RejectRole</code></li>",5),Ya={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QDialogButtonBox.html#PySide6.QtWidgets.QDialogButtonBox.setStandardButtons",target:"_blank",rel:"noopener noreferrer"},Za=e("li",null,[n("可通过构造函数 "),e("code",null,"QDialogButtonBox(buttons)"),n(" 在创建按钮组的同时添加标准按钮")],-1),$a=t('<p>方法 <code>button(which)</code> 访问标准按钮组件对象</p><ul><li><code>which</code> 被访问按钮的命令类型枚举量, 即传入枚举类型 <code>QDialogButtonBox.StandardButton</code></li><li>当存在时返回对应按钮组件, 否则返回 <code>None</code></li><li>可用于修改标准按钮名称等操作</li></ul><p>方法 <code>setOrientation(orientation)</code> 设置按钮排列方向</p><ul><li><code>orientation</code> 传入<a href="#%E7%BB%84%E4%BB%B6%E6%96%B9%E5%90%91%E6%A0%B7%E5%BC%8F%E5%80%BC">方向样式值</a>, 默认为水平排列按钮</li></ul><h3 id="消息窗口" tabindex="-1"><a class="header-anchor" href="#消息窗口" aria-hidden="true">#</a> 消息窗口</h3>',5),eo={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QMessageBox.html#PySide6.QtWidgets.QMessageBox",target:"_blank",rel:"noopener noreferrer"},no=e("a",{href:"#%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BC%9A%E8%AF%9D%E7%AA%97%E5%8F%A3"},"QDialog",-1),ao=t('<h4 id="消息窗口样式设置" tabindex="-1"><a class="header-anchor" href="#消息窗口样式设置" aria-hidden="true">#</a> 消息窗口样式设置</h4><p>方法 <code>setText(text)</code> 设置消息内容</p><ul><li><code>text</code> 消息内容字符串, 支持<a href="#%E5%AF%8C%E6%96%87%E6%9C%AC%E8%A1%A8%E7%A4%BA">富文本</a></li><li>使用方法 <code>setTextFormat(format)</code> 设置文本样式 (默认自动), 使用可参考<a href="#%E6%A0%87%E7%AD%BE%E5%86%85%E5%AE%B9">标签组件</a>的同名方法</li></ul><p>方法 <code>setIcon(arg__1)</code> 设置消息图标</p><ul><li><code>arg__1</code> 显示的消息图标, 参数类型为枚举类型 <code>QMessageBox.Icon</code>, 常用的有 <ul><li><code>Icon.Question</code> 询问</li><li><code>Icon.Information</code> 信息</li><li><code>Icon.Warning</code> 警告</li><li><code>Icon.Critical</code> 错误</li></ul></li></ul><p>方法 <code>setDetailedText(text)</code> 设置消息的详细内容</p><ul><li><code>text</code> 详细内容的字符串, 默认为空</li><li>当消息的详细内容不为空时, 将有一个详细内容按钮可用于显示消息的详细内容, 总是以一般文本的方式显示</li></ul><p>方法 <code>setStandardButtons(buttons)</code> 设置消息的标准按钮</p><ul><li><code>buttons</code> 即消息的标准按钮, 使用枚举类型 <code>QMessageBox.StandardButton</code> 表示, 常用值以及使用方法与 <a href="#%E4%BC%9A%E7%94%BB%E6%8C%89%E9%92%AE%E7%BB%84%E6%A0%B7%E5%BC%8F%E8%AE%BE%E7%BD%AE">QDialogButtonBox</a> 组件的同名方法类似</li><li>同样有方法 <code>button(which)</code> 可用于访问按钮组件 (具体见 <a href="#%E4%BC%9A%E7%94%BB%E6%8C%89%E9%92%AE%E7%BB%84%E6%A0%B7%E5%BC%8F%E8%AE%BE%E7%BD%AE">QDialogButtonBox</a> 组件)</li></ul><p>构造函数 <code>QMessageBox(icon, title, text, buttons = QMessageBox.StandardButton.NoButton)</code> 可用于快速创建消息窗口</p><ul><li><code>icon</code> 消息窗口大图标, 即 <code>setIcon</code> 方法</li><li><code>title</code> 消息窗口标题, 即 <a href="#%E7%AA%97%E5%8F%A3%E4%B8%93%E7%94%A8%E6%96%B9%E6%B3%95">setWindowTitle</a> 方法</li><li><code>text</code> 消息窗口内容, 即 <code>setText</code> 方法</li><li><code>buttons</code> 消息窗口按钮组, 即 <code>setStandardButtons</code> 方法</li></ul><h4 id="消息窗口交互" tabindex="-1"><a class="header-anchor" href="#消息窗口交互" aria-hidden="true">#</a> 消息窗口交互</h4><p>由于消息窗口组件继承自会话窗口, 因此基本交互方式与<a href="#%E4%BC%9A%E8%AF%9D%E7%AA%97%E5%8F%A3%E4%BA%A4%E4%BA%92">会话窗口交互</a>相同, 但依然存在区别</p><p>消息窗口使用枚举量 <code>QMessageBox.StandardButton</code> 作为退出码, 而不同于会话窗口的 <code>QDialog.DialogCode</code></p><ul><li>通常退出码即用户按下的会话窗口按钮</li><li>当用户关闭会话窗口时退出码为 <code>0</code></li><li>当用户按下 <kbd>Esc</kbd> 时退出码为 <code>StandardButton.Cancel</code></li></ul><p>对于消息窗口, 常用 <code>exec</code> 方法阻塞式的接收用户输入而不是 <code>open</code> 方法<br> 通过 <code>exec</code> 方法的返回值即退出码, 直接进行下一步逻辑判断</p><p>如果希望显示非模态的消息窗口以表示非重要的消息, 可参考<a href="#%E9%9D%9E%E6%A8%A1%E4%BC%9A%E8%AF%9D%E6%80%81%E7%AA%97%E5%8F%A3">示例</a></p><h4 id="内置消息窗口" tabindex="-1"><a class="header-anchor" href="#内置消息窗口" aria-hidden="true">#</a> 内置消息窗口</h4><p><code>QMessageBox</code> 类也具有一系列的静态方法, 可用于表示标准会话窗口</p><p>静态方法 <code>QMessageBox.question(parent, title, text, buttons = ...)</code> 显示询问消息窗口</p><ul><li><code>parent</code> 消息窗口父组件</li><li><code>title</code> 消息窗口标题</li><li><code>text</code> 消息窗口内容</li><li><code>buttons</code> 消息窗口按钮组, 默认已经设置为 <code>StandardButton.Yes</code> 与 <code>StandardButton.No</code></li><li>调用该方法后将相当于创建对象并立刻调用了 <code>exec</code> 方法, 即程序将在此处阻塞直到用户交互, 同时返回 <code>StandardButton</code> 类型的值表示用户选择按钮</li></ul><p>类似的有</p><ul><li><code>QMessageBox.information</code> 创建一般消息窗口, 默认带有 <code>Ok</code> 按钮</li><li><code>QMessageBox.warning</code> 创建一般消息窗口, 默认带有 <code>Ok</code> 按钮</li><li><code>QMessageBox.critical</code> 创建一般错误窗口, 默认带有 <code>Ok</code> 按钮</li></ul><h3 id="标准会话窗口" tabindex="-1"><a class="header-anchor" href="#标准会话窗口" aria-hidden="true">#</a> 标准会话窗口</h3><h4 id="进度条会话窗口" tabindex="-1"><a class="header-anchor" href="#进度条会话窗口" aria-hidden="true">#</a> 进度条会话窗口</h4>',25),oo={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QProgressDialog.html#PySide6.QtWidgets.QProgressDialog",target:"_blank",rel:"noopener noreferrer"},to=e("h4",{id:"文件浏览器会话",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#文件浏览器会话","aria-hidden":"true"},"#"),n(" 文件浏览器会话")],-1),so={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QFileDialog.html#PySide6.QtWidgets.QFileDialog",target:"_blank",rel:"noopener noreferrer"},lo=e("h4",{id:"其他常用标准会话",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#其他常用标准会话","aria-hidden":"true"},"#"),n(" 其他常用标准会话")],-1),io={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QWizard.html#PySide6.QtWidgets.QWizard",target:"_blank",rel:"noopener noreferrer"},co={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QColorDialog.html#PySide6.QtWidgets.QColorDialog",target:"_blank",rel:"noopener noreferrer"},po={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QFontDialog.html#PySide6.QtWidgets.QFontDialog",target:"_blank",rel:"noopener noreferrer"},uo=e("h2",{id:"组件样式",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#组件样式","aria-hidden":"true"},"#"),n(" 组件样式")],-1),ro=e("h3",{id:"文本字体样式-qfont",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#文本字体样式-qfont","aria-hidden":"true"},"#"),n(" 文本字体样式 QFont")],-1),ho=e("p",null,[n("在 Qt 中, 组件字体样式通过 "),e("code",null,"QtGui"),n(" 模块下的字体样式类 "),e("code",null,"QFont"),n(" 表示具体的字体样式")],-1),Eo={href:"https://doc.qt.io/qtforpython-6/PySide6/QtGui/QFont.html#PySide6.QtGui.QFont",target:"_blank",rel:"noopener noreferrer"},Bo=t(`<h4 id="字体样式类" tabindex="-1"><a class="header-anchor" href="#字体样式类" aria-hidden="true">#</a> 字体样式类</h4><p>通过字体样式类 <code>QFont</code> 的方法可以对具体的字体样式进行修改, 常用的有</p><p>方法 <code>setPointSize(arg__1)</code> 设置字体大小</p><ul><li>参数 <code>arg__1</code> 为字体大小, 传入整数, 单位为点 (pt)</li></ul><p>方法 <code>setFamilies(arg__1)</code> 设置字体名称</p><ul><li>参数 <code>arg__1</code> 为字体名称列表, 传入字符串列表 <ul><li>将按顺序使用列表内的字体</li><li>Windows 下字体名称通常即 <code>Fonts</code> 文件夹下字体文件第一行显示的 <code>字体名称</code></li><li>例如 <code>[&quot;Helvetica&quot;, &quot;微软雅黑&quot;]</code> 将以 Helvetica 作为英文字体, 微软雅黑作为中文字体</li></ul></li></ul><p>以下方法用于设置字体修饰, 均以布尔值为参数, <code>True</code> 表示启用</p><ul><li><code>setItalic()</code> 斜体</li><li><code>setOverline()</code> 上划线</li><li><code>setStrikeOut()</code> 删除线</li><li><code>setUnderline()</code> 下划线</li><li><code>setBold()</code> 粗体</li></ul><h4 id="组件字体样式设置" tabindex="-1"><a class="header-anchor" href="#组件字体样式设置" aria-hidden="true">#</a> 组件字体样式设置</h4><p>在具体设置组件字体样式时, 一般先通过组件的 <code>font()</code> 方法获取组件当前字体样式, 在设置后再使用组件的 <code>setFont()</code> 方法, 使修改生效, 例如代码</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>self<span class="token punctuation">.</span>label <span class="token operator">=</span> QLabel<span class="token punctuation">(</span><span class="token string">&quot;Hello World 你好世界&quot;</span><span class="token punctuation">)</span>

tmp_font <span class="token operator">=</span> self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>font<span class="token punctuation">(</span><span class="token punctuation">)</span>
tmp_font<span class="token punctuation">.</span>setFamilies<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;Helvetica&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;微软雅黑&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setFont<span class="token punctuation">(</span>tmp_font<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 <code>font()</code> 与 <code>setFont()</code> 为组件基类 <code>QWidget</code> 的方法, 因此对于绝大部分组件的全局字体均可使用此方法设置</p><h3 id="图片资源-qpixmap" tabindex="-1"><a class="header-anchor" href="#图片资源-qpixmap" aria-hidden="true">#</a> 图片资源 QPixmap</h3><p>在 Qt 中, 图片资源通过 <code>QtGui</code> 模块下的图像处理类 <code>QPixmap</code> 管理</p><p>如 <a href="#%E6%A0%87%E7%AD%BE%E7%BB%84%E4%BB%B6">QLabel</a> 等组件可接收 <code>QPixmap</code> 对象, 以显示图片</p>`,15),ko={href:"https://doc.qt.io/qtforpython-6/PySide6/QtGui/QPixmap.html#PySide6.QtGui.QPixmap.__init__",target:"_blank",rel:"noopener noreferrer"},_o=t('<h4 id="图片加载" tabindex="-1"><a class="header-anchor" href="#图片加载" aria-hidden="true">#</a> 图片加载</h4><p>构造函数 <code>QPixmap(fileName = None)</code></p><ul><li><code>fileName</code> 图片路径, 可以是硬盘路径或资源路径, 如果省略则管理的图像为空</li></ul><p>方法 <code>load(fileName)</code> 可用于加载图片</p><ul><li><code>fileName</code> 图片路径, 可以是硬盘路径或资源路径</li><li>当图片加载失败时返回 <code>False</code>, 成功时返回 <code>True</code></li></ul><p>方法 <code>isNull()</code> 可查看 <code>QPixmap</code> 对象是否有管理图片</p><ul><li>如果没有管理的图片, 则</li></ul><h4 id="图片显示设置" tabindex="-1"><a class="header-anchor" href="#图片显示设置" aria-hidden="true">#</a> 图片显示设置</h4><p>方法 <code>size()</code> 获取当前 <code>QPixmap</code> 对象管理图片的大小</p><ul><li>返回值为 <a href="#%E5%B0%BA%E5%AF%B8%E6%A0%B7%E5%BC%8F%E5%80%BC">QSize</a> 对象</li></ul><p>方法 <code>scaled(s, aspectMode = Qt.IgnoreAspectRatio)</code> 直接修改图片大小</p><ul><li>参数 <code>s</code> 图片的大小, 传入 <a href="#%E5%B0%BA%E5%AF%B8%E6%A0%B7%E5%BC%8F%E5%80%BC">QSize</a> 对象</li><li>参数 <code>aspectMode</code> 缩放方法, 取值为枚举类型 <code>Qt.AspectRatioMode</code>, 可用的有 <ul><li><code>AspectRatioMode.IgnoreAspectRatio</code> 忽略原始比例</li><li><code>AspectRatioMode.KeepAspectRatio</code> 保持原始比例, 但允许空白</li><li><code>AspectRatioMode.KeepAspectRatioByExpanding</code> 保持原始比例, 但允许超出 <code>s</code> 部分被裁剪</li></ul></li><li>注意, <mark>该函数的返回值为修改后的图像处理对象</mark>, 因此可在创建对象同时调用该函数调整图像</li></ul><h4 id="图标资源网站" tabindex="-1"><a class="header-anchor" href="#图标资源网站" aria-hidden="true">#</a> 图标资源网站</h4><p>可通过以下免费网站获取图标资源</p>',14),fo={href:"https://www.remixicon.com/",target:"_blank",rel:"noopener noreferrer"},mo={href:"https://uxwing.com/",target:"_blank",rel:"noopener noreferrer"},bo=t('<h3 id="富文本表示" tabindex="-1"><a class="header-anchor" href="#富文本表示" aria-hidden="true">#</a> 富文本表示</h3><p>在 Qt 中, 允许使用类似 HTML 的方式解析内容以表示富文本<br> 用于 <a href="#%E6%A0%87%E7%AD%BE%E7%BB%84%E4%BB%B6">QLabel</a> 等显示文本内容的组件</p><h4 id="html-富文本" tabindex="-1"><a class="header-anchor" href="#html-富文本" aria-hidden="true">#</a> HTML 富文本</h4><p>常用富文本标签有</p><ul><li>文本修饰 <ul><li><code>b</code> 加粗</li><li><code>i</code> 斜体</li><li><code>u</code> 下划线</li><li><code>s</code> 删除线</li></ul></li><li>字体样式 <ul><li><code>big</code> 大字体</li><li><code>small</code> 小字体</li><li><code>sub</code> 下标</li><li><code>sup</code> 上标</li><li><code>pre</code> 无转义显示</li></ul></li><li>自定义字体样式 <ul><li><code>font</code> 自定义字体样式标签</li><li>字体颜色属性 <code>color</code>, 值为有效的 Qt <a href="#%E6%A0%B7%E5%BC%8F%E5%80%BC%E8%A1%A8%E7%A4%BA">颜色值</a></li><li>字体大小属性 <code>size</code>, 值为整数单位点 (pt)</li><li>字体名称属性 <code>face</code>, 值为字体名称字符串, 如 <code>微软雅黑</code> 表示微软雅黑, 具体可参考 <a href="#%E5%AD%97%E4%BD%93%E6%A0%B7%E5%BC%8F%E7%B1%BB">QFont</a></li></ul></li><li>支持块属性的标签 <ul><li><code>h1 ~ h6</code> 标题</li><li><code>p</code> 段落</li><li><code>div</code> 块</li><li>对齐属性 <code>align</code>, 可取值 <code>left, right, center, justify</code></li></ul></li><li>列表标签 <ul><li><code>ol</code> 有序列表块</li><li><code>ul</code> 无序列表块</li><li><code>li</code> 列表项</li></ul></li><li>格式控制 <ul><li><code>br</code> 换行</li><li><code>hr</code> 横线</li></ul></li><li>图片显示 <ul><li><code>img</code> 图片标签, 通常为自闭和标签</li><li>图片路径属性 <code>src</code>, 应使用标准 Url, 具体参见<a href="#%E9%93%BE%E6%8E%A5%E7%AE%A1%E7%90%86%E7%B1%BB">链接管理类</a></li><li>图片大小属性 <code>height, width</code>, 值为整数单位像素</li></ul></li><li>超链接 <ul><li><code>a</code> 超链接标签</li><li>超链接目标属性 <code>href</code>, 值为字符串, 如果指向文件或网页应使用标准 Url, 具体参见<a href="#%E9%93%BE%E6%8E%A5%E7%AE%A1%E7%90%86%E7%B1%BB">链接管理类</a></li></ul></li></ul>',5),go={href:"https://doc.qt.io/qt-6/richtext-html-subset.html#using-html-markup-in-text-widgets",target:"_blank",rel:"noopener noreferrer"},Ao=t('<h4 id="markdown-富文本" tabindex="-1"><a class="header-anchor" href="#markdown-富文本" aria-hidden="true">#</a> Markdown 富文本</h4><p>除了 HTML, 还可使用 Markdown 表示富文本, 但仅支持部分语法, 常用的有</p><ul><li><code># ~ ######</code> 标题</li><li><code>*, 1.</code> 无序与有序列表</li><li><code>*a*, **a**, ***a***, ~a~, `a`</code> 斜体, 加粗, 斜粗体, 删除线, 代码</li><li><code>___</code> 分割线 (需要在单独一行内)</li><li><code> \\n</code> 换行</li><li><code>[name](link)</code> 超链接, <code>link</code> 同 <code>&lt;a&gt;</code> 标签的 <code>href</code> 参数值</li></ul><p>在 Markdown 富文本模式下, 允许使用 HTML 标签, 如 <code>&lt;br/&gt;</code>, <code>&lt;img&gt;</code> 等</p><h3 id="通用样式值表示" tabindex="-1"><a class="header-anchor" href="#通用样式值表示" aria-hidden="true">#</a> 通用样式值表示</h3><h4 id="颜色样式值" tabindex="-1"><a class="header-anchor" href="#颜色样式值" aria-hidden="true">#</a> 颜色样式值</h4>',6),vo={href:"https://doc.qt.io/qt-6/qcolor-obsolete.html#setNamedColor",target:"_blank",rel:"noopener noreferrer"},Qo=e("li",null,[n("RGB 表示 "),e("code",null,"#RRGGBB")],-1),yo={href:"https://www.w3.org/TR/SVG11/types.html#ColorKeywords",target:"_blank",rel:"noopener noreferrer"},xo=e("h4",{id:"尺寸样式值",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#尺寸样式值","aria-hidden":"true"},"#"),n(" 尺寸样式值")],-1),So={href:"https://doc.qt.io/qtforpython-6/PySide6/QtCore/QSize.html#PySide6.QtCore.QSize",target:"_blank",rel:"noopener noreferrer"},Co=e("code",null,"QCore",-1),qo=e("code",null,"QSize",-1),wo=t('<ul><li>构造函数 <code>QSize(w, h)</code>, 参数 <code>w, h</code> 为整数, 即对象表示大小的宽与高, 单位像素</li><li>通过方法 <code>width(), height()</code> 访问对象表示的宽与高</li><li>允许对 <code>QSize</code> 类的对象做数乘运算, 以缩放大小</li></ul><h4 id="键盘按键与快捷键样式值" tabindex="-1"><a class="header-anchor" href="#键盘按键与快捷键样式值" aria-hidden="true">#</a> 键盘按键与快捷键样式值</h4>',2),Fo={href:"https://doc.qt.io/qtforpython-6/PySide6/QtCore/Qt.html#PySide6.QtCore.Qt.Key",target:"_blank",rel:"noopener noreferrer"},Po=e("ul",null,[e("li",null,[n("通过枚举类型 "),e("code",null,"Qt.Key"),n(" 表示键盘按键, 例如 "),e("code",null,"Qt.Key.Key_Control"),n(", 关于所有按键参见文档")]),e("li",null,[n("键盘按键值之间可通过或运算 "),e("code",null,"|"),n(" 组合")])],-1),To={href:"https://doc.qt.io/qtforpython-6/PySide6/QtGui/QKeySequence.html#PySide6.QtGui.QKeySequence",target:"_blank",rel:"noopener noreferrer"},Do=e("code",null,"QGui",-1),Wo=e("code",null,"QKeySequence",-1),Mo=e("li",null,[n("Qt 将各个操作系统下常用的快捷键组合定义为了模块 "),e("code",null,"QKeySequence.StandardKey"),n(" 下的常量")],-1),Lo=e("li",null,[n("使用时以这些常量为参数传入 "),e("code",null,"QKeySequence"),n(" 的构造函数")],-1),Ro=e("code",null,"QKeySequence.StandardKey.Undo",-1),Io={href:"https://doc.qt.io/qtforpython-6/PySide6/QtGui/QKeySequence.html#standard-shortcuts",target:"_blank",rel:"noopener noreferrer"},Go=e("li",null,[n("自定义组合 "),e("ul",null,[e("li",null,[n("将键盘按键 (具体见上) 之间的或运算 "),e("code",null,"|"),n(" 得到的按键组合值作为参数初始化 "),e("code",null,"QKeySequence"),n(", 以此可表示自定义的按键组合")])])],-1),No={href:"https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QKeySequenceEdit.html#PySide6.QtWidgets.QKeySequenceEdit",target:"_blank",rel:"noopener noreferrer"},Oo=e("h4",{id:"对齐样式值",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#对齐样式值","aria-hidden":"true"},"#"),n(" 对齐样式值")],-1),Vo={href:"https://doc.qt.io/qtforpython-6/PySide6/QtCore/Qt.html#PySide6.QtCore.Qt.AlignmentFlag",target:"_blank",rel:"noopener noreferrer"},zo=e("code",null,"Qt.AlignmentFlag",-1),Xo=t('<ul><li>水平方向设置 <code>AlignmentFlag.AlignXXX</code>, 其中 <code>XXX</code> 可以是 <ul><li><code>Left, Right</code> 左, 右对齐</li><li><code>HCenter</code> 水平居中</li><li><code>Justify</code> 水平拉伸至两端</li></ul></li><li>垂直方向设置 <code>AlignmentFlag.AlignXXX</code>, 其中 <code>XXX</code> 可以是 <ul><li><code>Top, Bottom</code> 上, 下对齐</li><li><code>VCenter</code> 竖直居中</li><li><code>Baseline</code> 基线对齐</li></ul></li><li>双方向设置 <ul><li>通过与运算符 <code>|</code> 可以拼接水平与垂直方向的设置</li><li><code>AlignmentFlag.AlignCenter</code> 内容居中</li></ul></li></ul><h4 id="组件方向样式值" tabindex="-1"><a class="header-anchor" href="#组件方向样式值" aria-hidden="true">#</a> 组件方向样式值</h4>',2),Ko={href:"https://doc.qt.io/qtforpython-6/PySide6/QtCore/Qt.html#PySide6.QtCore.Qt.Orientation",target:"_blank",rel:"noopener noreferrer"},Ho=e("code",null,"Qt.Orientation",-1),jo=e("ul",null,[e("li",null,[e("code",null,"Orientation.Horizontal"),n(" 表示水平方向")]),e("li",null,[e("code",null,"Orientation.Vertical"),n(" 表示垂直方向")])],-1),Uo=e("h4",{id:"链接管理类",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#链接管理类","aria-hidden":"true"},"#"),n(" 链接管理类")],-1),Jo={href:"https://doc.qt.io/qtforpython-6/PySide6/QtCore/QUrl.html#PySide6.QtCore.QUrl",target:"_blank",rel:"noopener noreferrer"},Yo=t('<ul><li>通过构造类创造链接 <code>QUrl(url)</code>, 参数 <code>url</code> 为链接字符串, 对于 PySide6, 大部分情况下直接使用字符串代替 <code>QUrl</code> 也是允许的</li><li>Qt 中的链接应当带有协议与路径组成 <code>协议:路径</code> 的标准 Url 格式 <ul><li>对于本地文件, 应使用 <code>file:&lt;文件路径&gt;</code> 访问, 使用斜杠 <code>/</code> 划分文件夹, 以 <code>/</code> 开头表示绝对路径</li><li>对于网页, 应使用 <code>http</code> 或 <code>https</code> 协议开头</li></ul></li><li>方法 <code>isValid()</code> 当类管理的链接指向一个有效的文件时, 返回 <code>True</code></li><li>方法 <code>toString()</code> 可获取原始链接字符串</li></ul><h3 id="qss-文件" tabindex="-1"><a class="header-anchor" href="#qss-文件" aria-hidden="true">#</a> QSS 文件</h3>',2);function Zo($o,et){const o=i("ExternalLinkIcon"),s=i("RouterLink");return d(),p("div",null,[h,E,B,e("ul",null,[e("li",null,[e("a",k,[n("https://doc.qt.io/qtforpython-6/tutorials/index.html"),a(o)])]),e("li",null,[e("a",_,[n("https://www.pythonguis.com/pyqt6-tutorial/"),a(o)])])]),e("p",null,[n("PySide6 官方文档 "),e("a",f,[n("https://doc.qt.io/qtforpython-6/api.html"),a(o)])]),m,e("p",null,[n("参考 "),e("a",b,[n("https://www.pythonguis.com/tutorials/pyside6-creating-your-first-window/"),a(o)])]),g,e("blockquote",null,[e("p",null,[e("a",A,[n("https://doc.qt.io/qtforpython-6/tutorials/basictutorial/signals_and_slots.html"),a(o)]),v,e("a",Q,[n("https://www.pythonguis.com/tutorials/pyside6-signals-slots-events/"),a(o)])])]),y,x,S,e("p",null,[n("关于信号槽机制使用注意参见"),a(s,{to:"/coding/py/pyqt/examples.html#%E6%9E%9A%E4%B8%BE%E9%87%8F%E7%BB%91%E5%AE%9A%E6%8C%89%E9%92%AE%E7%BB%84"},{default:l(()=>[n("示例")]),_:1})]),C,e("ul",null,[q,w,F,P,T,e("li",null,[n("习惯上将通过示例方法, 将信号附带的组件最新状态保存在一个成员变量内但注意 "),e("ul",null,[e("li",null,[n("Python 的 "),a(s,{to:"/coding/py/base/base.html#lambda-%E8%A1%A8%E8%BE%BE"},{default:l(()=>[n("Lambda 表达式")]),_:1}),n("内不允许赋值")]),D])]),W]),M,e("p",null,[n("信号定义类 "),e("a",L,[n("Signal"),a(o)]),n(" 与槽修饰器 "),e("a",R,[n("Slot"),a(o)]),n(" 均位于 "),I,n(" 模块下")]),G,e("ul",null,[N,e("li",null,[n("变长参数 "),O,n(" 表明信号附带数据的类型, 以 "),a(s,{to:"/coding/py/base/objective.html#type-hint"},{default:l(()=>[n("Python 类型")]),_:1}),n("为值 "),V]),z,e("li",null,[n("注意, Qt 中不是只有组件具有信号, 只要类继承自 "),X,n(" 及其子类, 就可以使用信号机制, 例如"),a(s,{to:"/coding/py/pyqt/advance.html#qt-%E5%AE%9A%E6%97%B6%E5%99%A8"},{default:l(()=>[n("计时器")]),_:1})])]),K,e("p",null,[n("在 Python 中, 也允许使用 "),a(s,{to:"/coding/py/base/base.html#lambda-%E8%A1%A8%E8%BE%BE"},{default:l(()=>[n("Lambda 表达式")]),_:1}),n("或嵌套函数作为槽, 但建议仅在简单的数据转换场合使用"),H,n(" 使用可参考 "),e("a",j,[n("https://www.pythonguis.com/tutorials/pyside6-transmitting-extra-data-qt-signals/"),a(o)])]),U,J,e("ul",null,[e("li",null,[n("在"),e("a",Y,[n("官方组件文档"),a(o)]),n("打开所需查看的组件")]),Z]),$,e("ul",null,[e("li",null,[n("对于大部分事件回调函数, 都是组件基类的以命名以 "),ee,n(" 为结尾的虚函数, 可在"),e("a",ne,[n("官方文档"),a(o)]),n("的 "),ae,n(" 中查询")]),oe,te,se]),le,e("p",null,[n("参考 "),e("a",ie,[n("https://www.pythonguis.com/tutorials/pyside6-widgets/"),a(o)])]),e("ul",null,[e("li",null,[n("关于 Qt 提供的所有组件及其分类参见 "),e("a",ce,[n("https://doc.qt.io/qtforpython-6/overviews/widget-classes.html#widgets-classes"),a(o)])]),e("li",null,[n("本小节主要介绍 Qt 中的基本组件 "),e("a",de,[n("https://doc.qt.io/qtforpython-6/overviews/widget-classes.html#basic-widget-classes"),a(o)])])]),pe,e("p",null,[n("组件基类 "),e("a",ue,[n("QWidget"),a(o)]),n(" 是 Qt 中所有组件的基类, 因此该组件的功能为所有组件通用")]),re,e("p",null,[n("标签组件 "),e("a",he,[n("QLabel"),a(o)]),n(", 可用于显示一段文本, 富文本或图片")]),Ee,e("p",null,[n("抽象按钮组件 "),e("a",Be,[n("QAbstractButton"),a(o)]),n(" 是 Qt 中一系列按钮组件的基类, 因此该组件的功能在按钮组件上同样存在")]),ke,e("ul",null,[e("li",null,[n("普通按钮组件 "),e("a",_e,[n("QPushButton"),a(o)]),n(" 最基础的按钮, 具有边框, 能够显示图标与内容的按钮 "),fe]),e("li",null,[n("链接按钮组件 "),e("a",me,[n("QCommandLinkButton"),a(o)]),n(" 具有图标, 标题与描述三个部分的按钮, 专门用于安装向导, 项目选择等场景的无边框大按钮 "),be]),e("li",null,[n("工具按钮组件 "),e("a",ge,[n("QToolButton"),a(o)]),n(" 仅具有图标的按钮, 没有边框, 视觉反馈较轻, 一般用于应用工具栏中的按钮 "),Ae])]),ve,e("p",null,[n("复选框组件 "),e("a",Qe,[n("QCheckBox"),a(o)]),n(" 用于表示可与其他选项共存的矩形选框, 当被勾选时选框上将出现对勾, 选框后允许附带"),ye]),xe,e("p",null,[n("单选框组件 "),e("a",Se,[n("QRadioButton"),a(o)]),n(" 用于表示可与其他选项互斥的圆形选框, 当被勾选时选框上将出现对勾, 选框后允许附带"),Ce,n(", 注意该组件仅具有两个状态")]),e("p",null,[n("单选框如果要实现互斥效果, 还需要配合选框组组件 "),e("a",qe,[n("QButtonGroup"),a(o)]),n(", 该组件没有视觉效果, 仅用于管理选框组, 也可用于管理"),we]),Fe,e("p",null,[n("输入栏组件 "),e("a",Pe,[n("QLineEdit"),a(o)]),n(" 能够提供一个单行可供用户编辑与输入的文本框, 且支持对应系统下的编辑快捷键")]),Te,e("ul",null,[De,e("li",null,[n("如果希望通过一个信号监控验证是否通过, 可参见"),a(s,{to:"/coding/py/pyqt/examples.html#%E7%99%BB%E5%BD%95%E4%BC%9A%E8%AF%9D%E7%A8%8B%E5%BA%8F"},{default:l(()=>[n("示例")]),_:1}),n("的类 "),We])]),Me,e("ul",null,[e("li",null,[n("需要通过继承验证器基类 "),e("a",Le,[n("QValidator"),a(o)]),n(" 以创建自定义验证器")]),Re,e("li",null,[n("可参见"),a(s,{to:"/coding/py/pyqt/examples.html#%E7%99%BB%E5%BD%95%E4%BC%9A%E8%AF%9D%E7%A8%8B%E5%BA%8F"},{default:l(()=>[n("示例")]),_:1}),n("的类 "),Ie])]),Ge,e("p",null,[n("下拉栏组件 "),e("a",Ne,[n("QComboBox"),a(o)]),n(" 能够提供一个单行可供用户从卡展开的提供选项中选择作为输入的组件, 通过设置也允许用户直接输入")]),Oe,e("ul",null,[Ve,e("li",null,[ze,n(" 获取指定索引对应的选项文本 "),e("ul",null,[Xe,e("li",null,[n("对于可输入下拉栏应使用此方法识别选项, 可配合 Python 的 "),a(s,{to:"/coding/py/base/base.html#%E7%89%B9%E6%AE%8A%E8%BF%90%E7%AE%97%E7%AC%A6"},{default:l(()=>[n("in 运算符")]),_:1}),n(" 使用")])])])]),Ke,He,je,e("p",null,[n("数值微调栏组件 "),e("a",Ue,[n("QSpinBox"),a(o)]),n(" 与"),Je,n("类似, 但专门用于整数数值的输入, 且在右侧提供了微调按钮以及上下按键用于调整数值")]),Ye,e("ul",null,[e("li",null,[n("浮点数微调栏 "),e("a",Ze,[n("QDoubleSpinBox"),a(o)]),$e]),e("li",null,[n("时间微调栏 "),e("a",en,[n("QDateTimeEdit"),a(o)]),e("ul",null,[nn,e("li",null,[n("输入日期时, 推荐使用 "),e("a",an,[n("QCalendarWidget"),a(o)]),n(" 代替")])])])]),e("p",null,[n("具体使用见官方示例 "),e("a",on,[n("https://doc.qt.io/qtforpython-6/overviews/qtwidgets-widgets-spinboxes-example.html#spin-boxes-example"),a(o)])]),tn,e("p",null,[n("滑条组件 "),e("a",sn,[n("QSlider"),a(o)]),n(" 提供了一个滑动条, 通过拖拽滑动条以实现"),ln,n(", 可用于表示范围较小的整数值, 或具有大小关系的选项")]),cn,e("p",null,[n("滑条组件 "),e("a",dn,[n("QProgressBar"),a(o)]),n(" 提供了一个进度条, 进度条可通过程序控制, 用于显示任务的执行进度")]),pn,e("p",null,[n("文本浏览器组件 "),e("a",un,[n("QTextBrowser"),a(o)]),n(" 提供了一个文本区域专门用于显示 "),rn,n(" 与 "),hn,n(" 等富文本, 且可选中文本内容, 并使用各种快捷键如 "),En,n(" + 滚轮缩放内容")]),e("ul",null,[Bn,e("li",null,[n("该组件继承自 "),e("a",kn,[n("QTextEdit"),a(o)]),n(" 此处仅介绍与文本显示有关的方法 "),_n])]),fn,e("p",null,[n("文本框组件 "),e("a",mn,[n("QPlainTextEdit"),a(o)]),n(" 提供了一个文本区域, 可用于用户编辑文本, 或显示大段可复制的文本")]),bn,e("p",null,[n("组件区组件 "),e("a",gn,[n("QGroupBox"),a(o)]),n(" 提供了一个带有边框与标题标签的矩形区域, 可在其中布局组件, 以展示不同功能的组件区")]),An,e("p",null,[n("选项卡组件 [QTabWidget]"),e("a",vn,[n("https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QTabWidget.html#PySide6.QtWidgets.QTabWidget"),a(o)]),n(" 提供了一个选项卡与空界面, 可以在空界面中布局组件, 通过点击选项卡切换界面")]),Qn,e("ul",null,[e("li",null,[n("选项卡组件 "),e("a",yn,[n("QTabBar"),a(o)]),n(", 具有相似的"),xn]),e("li",null,[n("堆叠界面组件 "),e("a",Sn,[n("QStackedWidget"),a(o)]),n(", 具有相似的"),Cn])]),qn,e("ul",null,[e("li",null,[e("a",wn,[n("https://www.pythonguis.com/tutorials/pyside6-layouts/"),a(o)])]),e("li",null,[e("a",Fn,[n("https://doc.qt.io/qtforpython-6/overviews/layout.html#layout-management"),a(o)])]),e("li",null,[e("a",Pn,[n("https://zhuanlan.zhihu.com/p/654642680"),a(o)])]),e("li",null,[n("组件布局示例 "),e("a",Tn,[n("https://doc.qt.io/qtforpython-6/overviews/layout.html#layout-examples"),a(o)])])]),Dn,Wn,Mn,e("p",null,[n("关于组件布局的代码编写方法参见"),a(s,{to:"/coding/py/pyqt/examples.html#%E6%96%87%E6%9C%AC%E8%BE%93%E5%85%A5%E6%B8%B2%E6%9F%93%E7%A8%8B%E5%BA%8F"},{default:l(()=>[n("示例")]),_:1})]),Ln,e("ul",null,[e("li",null,[n("在布局时 "),e("ul",null,[Rn,e("li",null,[n("对于几个组件的简单组合, 还可考虑通过继承特定组件引擎的方式布局, "),In,n(", 可参见"),a(s,{to:"/coding/py/pyqt/examples.html#%E7%99%BB%E5%BD%95%E4%BC%9A%E8%AF%9D%E7%A8%8B%E5%BA%8F"},{default:l(()=>[n("示例")]),_:1}),n("的类 "),Gn])])]),Nn,On]),Vn,e("p",null,[n("布局引擎均具有基类 "),e("a",zn,[n("QLayout"),a(o)]),n(", 基类的方法即所有布局引擎通用的布局设置, 常用的有")]),Xn,e("p",null,[n("布局引擎 "),e("a",Kn,[n("QBoxLayout"),a(o)]),n(" 以指定的方向排列布局, 子组件将按指定方向排列, 垂直方向对齐"),Hn,n(" 通过组合两个方向的布局即可实现双向复杂的布局, 且单项布局支持弹性空间, 因此适合作为程序整体布局的基础")]),jn,e("p",null,[n("布局引擎 "),e("a",Un,[n("QGridLayout"),a(o)]),n(" 将可用空间划分为指定行列的网格, 并将子组件布局在特定位置")]),Jn,e("p",null,[n("布局引擎 "),e("a",Yn,[n("QFormLayout"),a(o)]),n(" 专门用于有多行字段标签加输入组件的表单呈现, 可自动实现对齐与显示风格设置")]),Zn,$n,e("ul",null,[ea,e("li",null,[na,n(" 输入组件 "),e("ul",null,[aa,oa,e("li",null,[ta,n(", 参见"),a(s,{to:"/coding/py/pyqt/examples.html#%E7%99%BB%E5%BD%95%E4%BC%9A%E8%AF%9D%E7%A8%8B%E5%BA%8F"},{default:l(()=>[n("示例")]),_:1}),n("的类 "),sa])])]),la]),ia,e("p",null,[n("参考教程 "),e("a",ca,[n("https://www.pythonguis.com/tutorials/pyside6-actions-toolbars-menus/"),a(o)])]),e("p",null,[n("本小节主要介绍与标准应用程序主界面, 以及界面元素相关的组件, 属于分类 "),e("a",da,[n("https://doc.qt.io/qtforpython-6/overviews/widget-classes.html#main-window-and-related-classes"),a(o)])]),pa,e("p",null,[n("Qt 提供了主界面组件 "),e("a",ua,[n("QMainWindow"),a(o)]),n(" 提供了一个标准的应用界面以及一系列相关使用函数存放标准界面的各个元素")]),ra,ha,Ea,Ba,e("ul",null,[ka,e("li",null,[n("除此之外还有"),e("a",_a,[n("侧边栏组件"),a(o)]),n(" (程序界面侧边的子界面) 与"),e("a",fa,[n("多文档界面"),a(o)]),n(" (将各个文档抽象为主界面的一个窗口) 等高级应用, 此处不介绍")])]),ma,e("p",null,[n("在一个应用中, 通常存在一系列固定的命令, 这些命令通常以工作栏按钮, 菜单栏内选项等方式呈现, 且同一个命令可能在不同位置出现"),ba,n(" 在 Qt 中, 使用命令组件 "),e("a",ga,[n("QAction"),a(o)]),n(", 将这些命令统一为一个抽象组件, "),Aa,n(", 即可插入不同位置而共享样式设置")]),va,e("p",null,[n("同样需要先使用命令组组件 "),e("a",Qa,[n("QActionGroup"),a(o)]),n(" 管理互斥的命令, 该组件同样位于模块 "),ya,n(" 下")]),xa,e("p",null,[n("工作栏组件 "),e("a",Sa,[n("QToolBar"),a(o)]),n(" 为一个以图标为主, 位于界面主体上方或两侧的可浮动栏, 可用于存放各种操作命令")]),Ca,e("p",null,[n("菜单组件 "),e("a",qa,[n("QMenu"),a(o)]),n(" 即一般应用程序中的下拉菜单, 需要通过与不同组件的绑定才能发挥作用")]),wa,e("p",null,[n("在"),Fa,n("中, 需要先创建菜单栏组件 "),e("a",Pa,[n("QMenuBar"),a(o)]),n(", 首先将菜单插入菜单栏, 在将菜单栏设置为主界面的菜单栏")]),Ta,e("p",null,[n("状态栏组件 "),e("a",Da,[n("QStatusBar"),a(o)]),n(" 为一个位于界面最底部, 用于显示当前程序状态的横向栏")]),Wa,e("p",null,[n("参考 "),e("a",Ma,[n("https://www.pythonguis.com/tutorials/pyside6-dialogs/"),a(o)])]),La,e("p",null,[n("会话窗口组件基类 "),e("a",Ra,[n("QDialog"),a(o)]),n(" 可用于创建会话窗口, 作为程序的子窗口接收用户信息并返回")]),Ia,e("ul",null,[Ga,e("li",null,[n("对于重复打开的会话窗口, 由于对象仅创建一次, 因此可能需要专门的函数的退出会话时清空已有数据, 可参考"),a(s,{to:"/coding/py/pyqt/examples.html#%E7%99%BB%E5%BD%95%E4%BC%9A%E8%AF%9D%E7%A8%8B%E5%BA%8F"},{default:l(()=>[n("示例")]),_:1}),n("的类 "),Na])]),Oa,e("p",null,[n("会话按钮组组件 "),e("a",Va,[n("QDialogButtonBox"),a(o)]),n(" 提供了一个带有多个按钮的子布局, 可用于呈现与管理会话窗口中常见的命令, 因此通常作为会话窗口的子组件")]),za,e("p",null,[n("通常会话窗口在用于接收数据时, 还会使用一个槽函数验证用户输入是否满足要求, 可参考"),a(s,{to:"/coding/py/pyqt/examples.html#%E7%99%BB%E5%BD%95%E4%BC%9A%E8%AF%9D%E7%A8%8B%E5%BA%8F"},{default:l(()=>[n("示例")]),_:1}),n("的类 "),Xa]),Ka,e("ul",null,[e("li",null,[Ha,n(" Qt 将一系列常用会话命令作为标准按钮, 通过枚举类型 "),ja,n(" 以 "),Ua,n(" 运算组合表示按钮组中的各个命令, 常用的有 "),e("ul",null,[Ja,e("li",null,[n("更多参见"),e("a",Ya,[n("官网"),a(o)])])])]),Za]),$a,e("p",null,[n("消息窗口 "),e("a",eo,[n("QMessageBox"),a(o)]),n(" 继承自会话窗口组件 "),no,n(", 用于表示一系列标准的, 仅包含按钮与消息的特殊会话窗口")]),ao,e("p",null,[e("a",oo,[n("QProgressDialog"),a(o)])]),to,e("p",null,[e("a",so,[n("QFileDialog"),a(o)])]),lo,e("ul",null,[e("li",null,[e("a",io,[n("QWizard"),a(o)]),n(" 安装向导")]),e("li",null,[e("a",co,[n("QColorDialog"),a(o)]),n(" 颜色选择器")]),e("li",null,[e("a",po,[n("QFontDialog"),a(o)]),n(" 字体选择器")])]),uo,ro,ho,e("blockquote",null,[e("p",null,[n("官方文档 "),e("a",Eo,[n("https://doc.qt.io/qtforpython-6/PySide6/QtGui/QFont.html#PySide6.QtGui.QFont"),a(o)])])]),Bo,e("blockquote",null,[e("p",null,[n("官方文档 "),e("a",ko,[n("https://doc.qt.io/qtforpython-6/PySide6/QtGui/QPixmap.html#PySide6.QtGui.QPixmap.__init__"),a(o)])])]),_o,e("ul",null,[e("li",null,[e("a",fo,[n("https://www.remixicon.com/"),a(o)])]),e("li",null,[e("a",mo,[n("https://uxwing.com/"),a(o)])])]),bo,e("p",null,[n("对于表格等其他标签见"),e("a",go,[n("官方文档"),a(o)])]),Ao,e("p",null,[e("a",vo,[n("颜色值"),a(o)]),n(", 通常为一个字符串, 常用的有")]),e("ul",null,[Qo,e("li",null,[n("关键字表示, 可用的关键字参见"),e("a",yo,[n("文档"),a(o)])])]),xo,e("p",null,[e("a",So,[n("尺寸值"),a(o)]),n(", 通过模块 "),Co,n(" 下的 "),qo,n(" 类表示长宽方向的大小结构体")]),wo,e("ul",null,[e("li",null,[e("a",Fo,[n("键盘按键"),a(o)]),Po]),e("li",null,[e("a",To,[n("快捷键"),a(o)]),n(", 通过模块 "),Do,n(" 下的 "),Wo,n(" 表示按键组合 "),e("ul",null,[e("li",null,[n("预定义组合 "),e("ul",null,[Mo,Lo,e("li",null,[n("例如 "),Ro,n(" 表示回到上一步的快捷键, 更多组合"),e("a",Io,[n("参见"),a(o)])])])]),Go,e("li",null,[n("Qt 提供组件 "),e("a",No,[n("QKeySequenceEdit"),a(o)]),n(" 可用于接收用户输入的按键组合")])])])]),Oo,e("p",null,[e("a",Vo,[n("对齐设置"),a(o)]),n(", 通过枚举类型 "),zo,n(" 下的值表示")]),Xo,e("p",null,[e("a",Ko,[n("组件方向设置"),a(o)]),n(", 通过枚举类型 "),Ho,n(" 下的值表示")]),jo,Uo,e("p",null,[n("Qt 中使用类 "),e("a",Jo,[n("QUrl"),a(o)]),n(" 管理链接")]),Yo])}const ot=c(r,[["render",Zo],["__file","base.html.vue"]]);export{ot as default};
