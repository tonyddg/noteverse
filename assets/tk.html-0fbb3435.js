import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as l,c as i,b as n,d as a,a as o,e}from"./app-8c5ce49e.js";const p={},d=n("h1",{id:"简单-gui-开发-tkinder-笔记",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#简单-gui-开发-tkinder-笔记","aria-hidden":"true"},"#"),a(" 简单 GUI 开发 tkinder 笔记")],-1),u={href:"https://blog.csdn.net/qq_48979387/article/details/125706562",target:"_blank",rel:"noopener noreferrer"},r=e(`<h2 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h2><h3 id="使用模块" tabindex="-1"><a class="header-anchor" href="#使用模块" aria-hidden="true">#</a> 使用模块</h3><p>使用 Python 下的 tkinter 模块完成简单的 GUI 开发<br> 该模块通常为 Python 的自带模块, 因此不需要额外安装</p><p>习惯上使用 <code>import tkinter as tk</code> 的方式导入模块<br> 使用时通过属性 <code>tk.TkVersion</code> 检查版本是否为 <code>8.5</code> 以上</p><h3 id="根窗口对象" tabindex="-1"><a class="header-anchor" href="#根窗口对象" aria-hidden="true">#</a> 根窗口对象</h3><h4 id="创建根窗口对象" tabindex="-1"><a class="header-anchor" href="#创建根窗口对象" aria-hidden="true">#</a> 创建根窗口对象</h4><p>tkinter 的基础为根窗口对象, 通过在根窗口中布局组件, 完成 GUI<br> 最好同时只创建一个根窗口</p><p>以下为创建根窗口对象的基本方法</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk

<span class="token comment"># 创建根窗口对象</span>
root <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 进入根窗口主循环, 接管程序用于显示窗口, 直到退出</span>
root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="根窗口对象设置" tabindex="-1"><a class="header-anchor" href="#根窗口对象设置" aria-hidden="true">#</a> 根窗口对象设置</h4><p>通过根窗口对象的成员函数以设置根窗口对象的属性<br> 以下为常用的设置</p><ul><li><code>root.title(string: None | str)</code> 设置与获取当前窗口的标题 <ul><li>当没有给出参数时, 仅返回当前窗口的标题</li></ul></li><li><code>root.geometry(newGeometry: None | str)</code> 设置与获取当前窗口的默认大小 <ul><li>单位为像素, 设置的基本格式为 <code>&lt;宽度&gt;x&lt;高度&gt;</code> (注意格式中间为字符 <code>x</code>)</li><li>给出空字符串时, 将采用自适应大小</li><li>当没有给出参数时, 仅返回当前窗口的大小</li></ul></li><li><code>root.resizeable(width: None | bool, height: None | bool)</code> 设置窗口的宽度与高度是否可变 <ul><li>设置为 <code>False</code> 时, 该方向的长度不可变</li><li>默认情况下窗口的长度与宽度均可变</li></ul></li><li><code>root.minsize(width, height) / maxsize(width, height)</code> 设置窗口的最小大小与最大大小</li><li><code>root.state(newstate : None | str)</code> 获取与设置窗口的状态, 可用的有 <ul><li><code>normal</code> 正常</li><li><code>iconic</code> 最小化</li><li><code>withdrawn</code> 隐藏 (不会显示, 需要通过该方法修改状态复原)</li><li><code>zoomed</code> 最大化</li></ul></li><li><code>root.iconbitmap(bitmap : str)</code> 设置窗口图标 <ul><li>以图标文件 <code>.ico</code> 的路径为参数</li></ul></li><li><code>root.destroy()</code> 销毁窗口</li><li><code>root.mainloop()</code> 窗口主循环</li></ul><h3 id="组件对象" tabindex="-1"><a class="header-anchor" href="#组件对象" aria-hidden="true">#</a> 组件对象</h3><p>将放置在根窗口上的物件称为组件<br> 对于大部分的组件, 通常有以下通用的对象<br> 注意, 根窗口也可视为一个特殊的组件, 因此以下配置在根窗口对象上也适用</p><h4 id="基本属性" tabindex="-1"><a class="header-anchor" href="#基本属性" aria-hidden="true">#</a> 基本属性</h4><p>组件有以下常用的通用基本属性</p><ul><li><code>master</code> 组件的父容器对象 <ul><li>一般即<a href="#%E6%A0%B9%E7%AA%97%E5%8F%A3%E5%AF%B9%E8%B1%A1">根窗口对象</a></li><li>也可以是其他<a href="#%E5%AE%B9%E5%99%A8%E7%BB%84%E4%BB%B6">容器组件</a></li></ul></li><li><code>name</code> 组件的内部名称</li><li><code>relief</code> 组件边框样式</li><li><code>font</code> 组件文字样式 (用于含文字的组件)</li><li><code>cursor</code> 光标样式 (当鼠标到组件上时光标修改)</li><li><code>fg / foreground</code> 组件文字颜色 (用于含文字的组件)</li><li><code>bg / background</code> 组件背景颜色</li><li><code>state</code> 组件状态, 基本状态有 <code>tk.NORMAL</code> (普通), <code>tk.DISABLE</code> (禁用), 对于其他组件还有一些特殊状态</li><li><code>width</code> 组件宽度, 单位像素 <ul><li>对于含子组件的<a href="#%E5%AE%B9%E5%99%A8%E7%BB%84%E4%BB%B6">容器</a>仅在设置 <code>widget.propagate(False)</code> 后生效</li><li>对于部分文本组件如<a href="#%E8%BE%93%E5%85%A5%E7%BB%84%E4%BB%B6">输入组件</a>与<a href="#%E5%88%97%E8%A1%A8%E6%A1%86%E7%BB%84%E4%BB%B6">列表框组件</a>, 单位是文本的宽度</li></ul></li><li><code>height</code> 组件高度, 单位像素 <ul><li>对于含子组件的<a href="#%E5%AE%B9%E5%99%A8%E7%BB%84%E4%BB%B6">容器</a>仅在设置 <code>widget.propagate(False)</code> 后生效</li><li>对于部分文本组件如<a href="#%E8%BE%93%E5%85%A5%E7%BB%84%E4%BB%B6">输入组件</a>, <a href="#%E6%96%87%E6%9C%AC%E7%BB%84%E4%BB%B6">文本组件</a>与<a href="#%E5%88%97%E8%A1%A8%E6%A1%86%E7%BB%84%E4%BB%B6">列表框组件</a>, 单位是文本的行数</li></ul></li></ul><p>组件基本属性确定后, 即可使用组件的属性初始化组件对象<br> 一般的初始化方法有</p><ul><li>通过配置字典初始化<br><code>widget = tk.XXWidget(master, cnf = {&quot;name&quot; : &quot;Example&quot; ...})</code></li><li>通过参数初始化<br><code>widget = tk.XXWidget(master, name = &quot;Example&quot;, ...)</code></li><li>两种方法也可以混合使用, 推荐使用 <code>cnf</code> 表示通用的属性, 使用具体参数表示具体属性</li></ul><h4 id="组件样式" tabindex="-1"><a class="header-anchor" href="#组件样式" aria-hidden="true">#</a> 组件样式</h4><p>使用组件属性 <code>relief</code> 设置外边框<br> 常用的组件外边框样式有</p><ul><li><code>tk.FLAT</code> 无边框, 默认</li><li><code>tk.SOLID</code> 有边框, 可通过组件的 <code>bd</code> 属性修改边框宽度</li><li><code>tk.GROOVE</code> 沟槽, 可表示容器边框</li><li><code>tk.RAISED</code> 凸出, 可表示可点击的组件</li><li><code>tk.SUNKEN</code> 凹陷, 可表示点下的组件</li></ul><p>使用组件属性 <code>font</code> 设置文字样式<br> 文字样式通常使用一个三元组定义 <code>font = (&quot;&lt;字体名&gt;&quot;, &lt;字号&gt;[, &quot;&lt;字体样式1&gt;&quot;[, &quot;&lt;字体样式2&gt;&quot;, ...]])</code><br> 例如 <code>(&quot;黑体&quot;, 20, &quot;bold&quot;)</code>, 其中</p><ul><li>如果希望使用默认字体, 则传入空字符串即可</li><li>默认的字体大小为 10</li><li>常用的文字样式有 <ul><li><code>bold</code> 加粗</li><li><code>italic</code> 斜体</li><li><code>underline</code> 下划线</li><li><code>overstrike</code> 删除线</li></ul></li></ul>`,24),k=n("code",null,"fg",-1),h=n("br",null,null,-1),b=n("code",null,"#<rrggbb>",-1),m={href:"https://blog.csdn.net/qq_48979387/article/details/126447139",target:"_blank",rel:"noopener noreferrer"},v=e(`<p>使用组件属性 <code>cursor</code> 设置当鼠标到组件上时光标的样式<br> 使用字符串表示, 常用的有</p><ul><li><code>arrow</code> 正常</li><li><code>xterm</code> 可输入</li><li><code>hand2</code> 可点击</li><li><code>watch</code> 等待</li></ul><h4 id="组件方法" tabindex="-1"><a class="header-anchor" href="#组件方法" aria-hidden="true">#</a> 组件方法</h4><p>通过组件的方法可以控制组件<br> 常用的方法有</p><ul><li><code>widget.cget(key : str)</code> 获取组件名为 <code>key</code> 的属性</li><li><code>widget.configure(**kwargs)</code> 设置组件属性</li><li><code>widget.destroy()</code> 销毁组件</li><li><code>widget.focus_set()</code> 使组件获取用户焦点</li><li><code>widget.focus_get()</code> 判断组件是否获得用户的焦点</li></ul><p>事件与任务</p><ul><li><code>widget.bind() / unbind()</code> 绑定 / 解绑事件 (具体见<a href="#%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A">事件绑定</a>)</li><li><code>id = widget.after(time, callback, *args)</code> 等待 <code>time</code> 后执行回调函数 <ul><li><code>time</code> 等待时间, 单位为 ms</li><li><code>callback</code> 回调函数</li><li><code>*args</code> 交给回调函数的参数</li><li>返回值 <code>id</code> 为设置标识符, 通过 <code>widget.after_cancel(id)</code> 取消任务</li></ul></li></ul><p>对于组件在现实时的状态, 需要通过以下方法读取</p><ul><li><code>widget.winfo_width() / winfo_height()</code> 获取组件当前宽度 (高度), 需要先布局组件</li><li><code>widget.winfo_viewable()</code> 当组件在布局中时, 返回 <code>True</code></li></ul><h4 id="组件布局" tabindex="-1"><a class="header-anchor" href="#组件布局" aria-hidden="true">#</a> 组件布局</h4><p>组件布局的本质为一类特殊的组件对象方法<br><mark>只有调用了布局方法, 组件才会显示在容器上</mark><br> 以下介绍常用的布局方法</p><ul><li>简单布局 用于简单的布局, 通常可配合<a href="#%E5%AE%B9%E5%99%A8%E7%BB%84%E4%BB%B6">容器组件</a>使用 <code>widget.pack(side = tk.TOP, anchor = tk.CENTER, expand = False, fill = tk.NONE, padx = 0, pady = 0)</code><ul><li><code>side</code> 组件排列对齐方向, 多个同方向的组件将按顺序向反方向排列, 可用参数有 <ul><li><code>tk.TOP</code> 向容器上边对齐</li><li><code>tk.BOTTOM</code> 向容器下边对齐</li><li><code>tk.LEFT</code> 向容器左边对齐</li><li><code>tk.RIGHT</code> 向容器右边对齐</li></ul></li><li><code>anchor</code> 组件锚点, 即有多余空间时, 向空间的那个方向对齐, 可用参数有 <ul><li>由 <code>N, S, W, E</code> 单个或两两组合而来的八个方向</li><li><code>tk.CENTER</code> 向可用空间居中对齐</li></ul></li><li><code>expand</code> 启用时组件将<mark>使可用空间 (不是组件大小) 尽量大</mark>且自适应窗口变化, 当启用时, 布局将根据窗口大小变化实时调整</li><li><code>fill</code> 组件填充方式, 决定组件是否要占据整个可用空间, 可用参数有 <ul><li><code>tk.X</code> 仅组件的 x 方向填充整个可用空间</li><li><code>tk.Y</code> 仅组件的 y 方向填充整个可用空间</li><li><code>tk.BOTH</code> 组件的 x, y 方向填充整个可用空间</li><li><code>tk.NONE</code> 组件仅占据必要的空间</li></ul></li><li><code>padx, pady</code> 组件与最大可用空间边界之间的边距 <ul><li>使用单个数字时, 左右 (上下) 两侧使用相同的边距</li><li>使用两个数字的元组时, 分别表示左右 (上下) 两侧边距</li><li>建议所有组件之间都有 <code>padx=5, pady=5</code> 的边距, 可通过定义 <code>commandPad={&quot;padx&quot; : ...}</code> 作为所有布局的 <code>cnf</code> 参数</li></ul></li><li>除了上述方法, 也可使用 <code>widget.pack(cnf = {...}, **kwargs)</code> 的方法配置组件间的通用的属性, 便于统一布局</li><li>使用 <code>widget.pack_configure()</code> 可重新设置组件布局</li></ul></li><li>网格布局 用于精确的布局 <code>widget.grid(row : int, column : int, rowspan : int, columnspan : int, sticky = tk.CENTER, padx = 0, pady = 0)</code><ul><li><code>row, column</code> 组件左上角所在的网格位置 (从 <code>0</code> 开始计)</li><li><code>rowspan, columnspan</code> 组件的跨行, 跨列数</li><li><code>sticky</code> 网格内组件撑大至与网格的特定边缘相连 <ul><li>由模块 <code>tk</code> 下, 由 <code>N, S, W, E</code> 的任意组合, 表示需要相连的边缘</li><li><mark><code>tk.NSEW</code> 可使网格中的组件撑满整个网格</mark> (注意不是 <code>tk.CENTER</code>)</li></ul></li><li><code>padx, pady</code> 与 <code>widget.pack</code> 中的 <code>padx, pady</code> 类似</li><li>类似的可使用 <code>widget.grid(cnf = {...}, **kwargs)</code> 的方法配置, 可以使用 <code>widget.grid_configure()</code> 可重新设置组件布局</li><li>默认情况下, 网格各行与列的宽度将根据其中的组件大小确定<br> 如果希望确定网格各行 (列) 之间宽度的比例, 则需要对<mark>网格布局中的父容器</mark>通过以下成员进行设置<br><code>frame.grid_columnconfigure(index : int | List | Tuple, weight, minisize)</code> (设置行的 <code>grid_rowconfigure</code> 同理) <ul><li><code>index</code> 被设置列的索引, 从 0 开始, 可以传入列表或元组以设置多个列</li><li><code>weight</code> 宽度大小, 实际为比例值, 将根据这一比例撑满父容器<br> 只有启用此设置后网格才将撑满整个父容器, 并且即使只有一列, 要撑满父容器也要启用此设置</li><li><code>minisize</code> 最小宽度, 单位为像素</li></ul></li></ul></li><li>定位布局 较少使用, 不介绍<br><code>widget.place()</code></li><li>组件的隐藏与显示 <ul><li>对于 <code>pack</code> 与 <code>place</code> 布局 <ul><li>调用 <code>widget.forget()</code> 将组件从布局中隐藏 (移除)</li><li>调用 <code>widget.pack() / palce()</code> 即可恢复</li></ul></li><li>对于 <code>grid</code> 布局 <ul><li>调用 <code>widget.grid_remove()</code> 将组件从布局中隐藏, 且不改变布局的网格结构</li><li>调用 <code>widget.forget()</code> 将同时改变布局的网格结构</li><li>调用 <code>widget.grid()</code> 可恢复 (使用 <code>widget.grid_remove()</code> 隐藏)</li></ul></li></ul></li></ul><h2 id="常用组件" tabindex="-1"><a class="header-anchor" href="#常用组件" aria-hidden="true">#</a> 常用组件</h2><h3 id="标签组件" tabindex="-1"><a class="header-anchor" href="#标签组件" aria-hidden="true">#</a> 标签组件</h3><p>标签组件类 <code>tk.Label</code> 可用于放置最简单的图片以及文字信息</p><h4 id="文字内容设置" tabindex="-1"><a class="header-anchor" href="#文字内容设置" aria-hidden="true">#</a> 文字内容设置</h4><p>文字内容</p><ul><li>通常文字内容<br> 设置 <code>text</code> 属性即可设置组件的显示文本</li><li>可变文字内容<br> 设置 <code>textvariable</code> 属性可将显示文本与 tkinter 的<a href="#%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1">变量对象</a>绑定<br> 文字内容将随变量对象的改变而刷新</li></ul><p>文字显示</p><ul><li>文字字体<br> 见<a href="#%E7%BB%84%E4%BB%B6%E6%A0%B7%E5%BC%8F">组件样式</a></li><li>多行文字对齐 (文本内使用 <code>\\n</code> 可换行)<br> 设置 <code>justify</code> 属性可修改文本的对齐方式 <ul><li><code>tk.CENTER</code> 居中对齐 (默认方式)</li><li><code>tk.LEFT</code> 向容器左边对齐</li><li><code>tk.RIGHT</code> 向容器右边对齐</li></ul></li></ul><h4 id="图片内容设置" tabindex="-1"><a class="header-anchor" href="#图片内容设置" aria-hidden="true">#</a> 图片内容设置</h4><h5 id="内置图片" tabindex="-1"><a class="header-anchor" href="#内置图片" aria-hidden="true">#</a> 内置图片</h5><p>设置 <code>image</code> 属性可引入内置的图片<br> 内置图片名使用字符串表示, 常用的有</p><ul><li><code>::tk::icons::error</code> 错误</li><li><code>::tk::icons::information</code> 信息</li><li><code>::tk::icons::question</code> 问题</li><li><code>::tk::icons::warning</code> 警告</li></ul><h5 id="自定义图片" tabindex="-1"><a class="header-anchor" href="#自定义图片" aria-hidden="true">#</a> 自定义图片</h5><p>同样使用 <code>image</code> 属性引入图片<br> 对于自定义图片则应使用图片对象, 以及第三方工具<br> 以下为一个借助 pillow 模块显示图片的方法</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token punctuation">,</span> ImageTk
<span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk

<span class="token comment"># 注意, 图片对象应定义为全局变量或全局类的成员</span>
<span class="token comment"># 防止被 Python 的垃圾回收机制销毁</span>
image <span class="token operator">=</span> ImageTk<span class="token punctuation">.</span>PhotoImage<span class="token punctuation">(</span>Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;monster.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
lbPic <span class="token operator">=</span> tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span> image<span class="token operator">=</span>image<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">&quot;It&#39;s a monster.&quot;</span><span class="token punctuation">,</span> compound<span class="token operator">=</span><span class="token string">&quot;top&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="图文混合显示" tabindex="-1"><a class="header-anchor" href="#图文混合显示" aria-hidden="true">#</a> 图文混合显示</h5><p>如果要同时显示图片和文字, 除了均进行设置外<br> 还需要设置属性 <code>compound</code> 以确定文字相对图片的位置 (如果没有设置, 将无法显示文字)<br> 可用的设置有</p><ul><li><code>tk.TOP</code> 文字在图片上方</li><li><code>tk.BOTTOM</code> 文字在图片下方</li><li><code>tk.LEFT</code> 文字在图片左侧</li><li><code>tk.RIGHT</code> 文字在图片右侧</li><li><code>tk.NONE</code> 不显示文字</li></ul><h3 id="按钮组件" tabindex="-1"><a class="header-anchor" href="#按钮组件" aria-hidden="true">#</a> 按钮组件</h3><p>按钮组件类 <code>tk.Button</code> 可用于简单交互</p><h4 id="内容设置" tabindex="-1"><a class="header-anchor" href="#内容设置" aria-hidden="true">#</a> 内容设置</h4><p>按钮的内容与<a href="#%E6%A0%87%E7%AD%BE%E7%BB%84%E4%BB%B6">标签组件</a>完全一致<br> 可通过与标签组件相同的属性设置按钮</p><h4 id="简单交互" tabindex="-1"><a class="header-anchor" href="#简单交互" aria-hidden="true">#</a> 简单交互</h4><p>使用按钮属性 <code>command</code> 与回调函数绑定<br> 当按钮被<mark>按下后松开时</mark>, 将调用绑定的回调函数</p><ul><li>通过<a href="#%E5%9F%BA%E6%9C%AC%E5%B1%9E%E6%80%A7">基本属性</a> <code>state</code> 即可禁用按钮</li><li>通过调用按钮组件的成员函数 <code>button.invoke()</code> , 当按钮未被禁用时将调用其回调函数 (类似点击按钮)</li></ul><h4 id="长按触发" tabindex="-1"><a class="header-anchor" href="#长按触发" aria-hidden="true">#</a> 长按触发</h4><p>除了通过点击的方式触发按钮, 还可使用长按的方式触发按钮<br> 此时需要设置以下属性</p><ul><li><code>repeatdelay</code> 长按触发的等待时间, 单位为 ms</li><li><code>repeatinterval</code> 长按触发时, 执行回调函数的间隔, 单位为 ms</li></ul><h3 id="容器组件" tabindex="-1"><a class="header-anchor" href="#容器组件" aria-hidden="true">#</a> 容器组件</h3><p>容器组件为一类用于容纳其他组件的组件, 通过容器组件可以让排版更加简单</p><h4 id="简单容器" tabindex="-1"><a class="header-anchor" href="#简单容器" aria-hidden="true">#</a> 简单容器</h4><p>简单容器组件类 <code>tk.Frame</code><br> 该组件仅有除 <code>font</code> 外的<a href="#%E5%9F%BA%E6%9C%AC%E5%B1%9E%E6%80%A7">基本属性</a>, 并且没有任何修饰 (可通过 <code>relief</code> 属性添加边框)<br> 但可以作为其他组件的父容器</p><p>容器还具有以下特点</p><ul><li>当容器从布局上移除时, 其中的组件也将一并移除</li><li>使用容器的成员函数 <code>frame.winfo_children()</code>, 可迭代遍历容器中的组件</li></ul><h4 id="标签容器" tabindex="-1"><a class="header-anchor" href="#标签容器" aria-hidden="true">#</a> 标签容器</h4><p>除了简单容器, 还有标签容器组件类 <code>tk.LabelFrame</code><br> 该组件除了与简单容器相同外, 还具有边框与一个位于边框上的标签</p><ul><li>与标签组件不同, 标签容器的标签仅能通过 <code>text</code> 与 <code>font</code> 属性设置标签的内容与字体</li><li>如果要显示其他内容, 则需要设置 <code>labelwidget</code>, 该属性接收一个未布局的, 与标签容器位于同一父容器的任意组件, 该组件将代替原来的标签</li><li>通过 <code>labelanchor</code> 属性设置标签的位置, 可选参数有由模块 <code>tk</code> 下, 由 <code>N, S, W, E</code> 单个或两两组合而来的八个方向</li></ul><h4 id="可调容器" tabindex="-1"><a class="header-anchor" href="#可调容器" aria-hidden="true">#</a> 可调容器</h4><p>此外还有可调容器组件 <code>tk.PanedWindow</code><br> 该容器内的组件将不使用一般的排版方法, 而是沿特定方向排列, 并且可沿排列方向手动拖动组件边界以改变组件宽度</p><p>对于可调容器内的组件布局时, 不使用一般的<a href="#%E7%BB%84%E4%BB%B6%E5%B8%83%E5%B1%80">组件布局</a><br> 而需要通过其成员函数 <code>panedwindow.add(widget[, minsize, width, height, padx, pady, sticky])</code> 布局</p><ul><li><code>widget</code> 进入布局的组件, 按从上到下, 从左到右排列</li><li><code>minsize</code> 组件在可调节方向上的最小大小</li><li><code>width, height</code> 组件的初始大小</li><li><code>padx, pady</code> 组件间的边距, 与<a href="#%E7%BB%84%E4%BB%B6%E5%B8%83%E5%B1%80">其他布局</a>的同名参数相同</li><li><code>sticky</code> 与 <a href="#%E7%BB%84%E4%BB%B6%E5%B8%83%E5%B1%80">grid 布局</a>的同名参数相同</li></ul><h4 id="容器使用技巧" tabindex="-1"><a class="header-anchor" href="#容器使用技巧" aria-hidden="true">#</a> 容器使用技巧</h4><p>容器的默认大小为 0, 因此直接使用容器时, 将无法看到容器组件<br> 容器默认将根据其中的组件自动变化大小<br> 为了应对以上问题有以下可用的技巧</p><ul><li>在 <a href="#%E7%BB%84%E4%BB%B6%E5%B8%83%E5%B1%80">pack 布局</a>中 (可参考例子<a href="#%E7%AE%80%E5%8D%95%E7%94%A8%E6%88%B7%E9%AA%8C%E8%AF%81%E7%95%8C%E9%9D%A2">简单用户验证界面</a>) <ul><li>存在确定大小的容器时, 使用<a href="#%E5%9F%BA%E6%9C%AC%E5%B1%9E%E6%80%A7">基本属性</a> <code>width</code> 与 <code>height</code> 确定容器大小, 并调用方法 <code>frame.propagate(False)</code> 固定容器大小</li><li>不存在时, 可定义一个 <code>width</code> 为确定值, <code>height = 0</code> 的空容器撑大空间 (反过来相同)</li><li>剩余容器合理使用 <code>fill</code> 属性撑满剩余空间</li></ul></li><li>在 <a href="#%E7%BB%84%E4%BB%B6%E5%B8%83%E5%B1%80">grid 布局</a>中 (可参考例子<a href="#%E5%9F%BA%E4%BA%8E%E7%BD%91%E6%A0%BC%E7%9A%84%E4%BA%A4%E4%BA%92%E7%95%8C%E9%9D%A2">基于网格的交互界面</a>)<br> 设置父容器的行列比例 <code>weight</code> (即使仅有一行或一列), 并设置 <code>sticky = tk.NSEW</code> 使容器撑满网格</li></ul><h3 id="输入组件" tabindex="-1"><a class="header-anchor" href="#输入组件" aria-hidden="true">#</a> 输入组件</h3><p>输入组件类 <code>tk.Enter</code> 即一个单行的输入栏<br> 该组件可用于接收输入的字符串数据</p><ul><li>属性 <code>font</code> 可设置输入栏内文字的样式</li><li>属性 <code>show</code> 可设置替代输入内容显示的字符 (常用于密码输入)</li></ul><h4 id="只读状态" tabindex="-1"><a class="header-anchor" href="#只读状态" aria-hidden="true">#</a> 只读状态</h4><p>输入组件的基本属性 <code>state</code> 除了两个基础的状态, 还有只读状态 <code>readonly</code><br> 在三个状态的表现为</p><ul><li><code>tk.NORMAL</code> 正常输入内容</li><li><code>tk.DISABLE</code> 无法输入内容, 且无法复制</li><li><code>&quot;readonly&quot;</code> 无法输入内容, 但可以复制其中的内容</li></ul><h4 id="获取输入" tabindex="-1"><a class="header-anchor" href="#获取输入" aria-hidden="true">#</a> 获取输入</h4><p>使用成员函数 <code>enter.get()</code> 可获取当前输入组件内的内容<br> 通过成员 <code>enter.delete(0, &quot;end&quot;)</code> 可清空输入</p><p>除此之外, 也可以设置属性 <code>textvariable</code> 将内容与 tkinter 的<a href="#%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1">变量对象</a>绑定<br> 此时, 通过设置 <code>val.set(&quot;&quot;)</code> 即可清空输入</p><h4 id="输入验证" tabindex="-1"><a class="header-anchor" href="#输入验证" aria-hidden="true">#</a> 输入验证</h4><ul><li>使用 <code>validate</code> 属性表示进行验证的时机, 常用参数有 <ul><li><code>none</code> 不进行验证</li><li><code>focus</code> 获得或失去焦点时验证</li><li><code>focusout</code> 失去焦点时验证</li><li><code>focusin</code> 获得焦点时验证</li><li><code>force</code> 绑定变量被修改</li><li><code>key</code> 内容更改时验证, 且不满足验证条件的修改不会插入文本框</li><li><code>all</code> 以上任意情况</li></ul></li><li>使用 <code>validatecommand</code> 属性绑定验证函数 <ul><li>可以直接传入验证函数</li><li>也可以传入一个 <code>(callback, str1, str2, ...)</code> 的元组, 表示额外传入验证函数的参数<br> 注意, 其中的 callback 需要使用 <code>root.register(...)</code> 包裹, 其中 <code>root</code> 可以是任意组件, 一般是父容器<br> 其中 <code>str</code> 为字符串, 常用有 <ul><li><code>%P</code> 文本框当前内容</li><li><code>%s</code> 文本框上一次内容</li><li><code>%V</code> 触发验证的原因 (值即 <code>validate</code> 的参数)</li></ul></li></ul></li><li>使用 <code>invalidcommand</code> 属性绑定验证失败时的回调函数 (该函数应返回布尔值, 但含义未知)</li></ul><h4 id="数值输入组件" tabindex="-1"><a class="header-anchor" href="#数值输入组件" aria-hidden="true">#</a> 数值输入组件</h4><p>数值输入组件类 <code>tk.Spinbox</code> 具有与一般输入组件相同的属性<br> 此外还在右侧有上下调节按钮 (注意, 即使是 <a href="#%E5%8F%AA%E8%AF%BB%E7%8A%B6%E6%80%81">readonly 状态</a>, 依然可通过此方法被调节)</p><p>相比一般输入组件, 还具有以下属性</p><ul><li><code>from_</code> 箭头调节的最小数值</li><li><code>to</code> 箭头调节的最大数值</li><li><code>format</code> 调节数值的显示合适, 使用 <code>%a.bf</code> 格式化</li><li><code>increment</code> 箭头调节步长</li></ul><h3 id="选择组件" tabindex="-1"><a class="header-anchor" href="#选择组件" aria-hidden="true">#</a> 选择组件</h3><h4 id="多选框组件" tabindex="-1"><a class="header-anchor" href="#多选框组件" aria-hidden="true">#</a> 多选框组件</h4><p>多选框组件类 <code>Checkbutton</code> 可表示独立的, 可取消勾选的选项</p><p>常用的属性有</p><ul><li><code>variable</code> 与多选框选择状态绑定的<a href="#%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1">变量对象</a><ul><li>一般为 <code>tk.BooleanVar</code> 类型, 默认选中时为 <code>True</code>, 未选中时为 <code>False</code></li><li>可通过<a href="#%E5%8F%98%E9%87%8F%E8%BF%BD%E8%B8%AA">变量追踪</a>的方式, 以 <code>write</code> 模式检测选项是否被修改</li></ul></li><li><code>indicatoron</code> 多选框样式 <ul><li><code>True</code> 通常的勾选框样式 (默认)</li><li><code>False</code> 按钮盒样式</li></ul></li><li><code>text, font</code> 多选框文字及字体</li></ul><p>可通过组件的成员函数控制组件状态</p><ul><li><code>checkbutton.select()</code> 选中多选框</li><li><code>checkbutton.deselect()</code> 取消选中多选框</li><li><code>checkbutton.toogle()</code> 切换选中状态</li></ul><h4 id="单选框组件" tabindex="-1"><a class="header-anchor" href="#单选框组件" aria-hidden="true">#</a> 单选框组件</h4><p>单选框组件类 <code>Radiobutton</code> 可表示相互制约的选项</p><p>常用属性有</p><ul><li><code>value</code> 单选框被选中时, 变量对象设置的值</li><li><code>variable</code> 与单选框选择状态绑定的<a href="#%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1">变量对象</a><ul><li>当多个单选框绑定同一个变量对象时, 将相互制约, 只能选择其中一个</li><li>注意 <code>variable</code> 绑定变量的初值必须是其中一个单选框的值, 否则将显示异常</li><li>可通过<a href="#%E5%8F%98%E9%87%8F%E8%BF%BD%E8%B8%AA">变量追踪</a>的方式, 以 <code>write</code> 模式检测选项是否被修改</li></ul></li><li><code>text, font</code> 单选框文字及字体</li></ul><h3 id="菜单组件" tabindex="-1"><a class="header-anchor" href="#菜单组件" aria-hidden="true">#</a> 菜单组件</h3><p>菜单组件类 <code>Menu</code> 可用于定义菜单<br> 与一般组件不同, 菜单组件不需要布局, 且一般以根窗口对象为父容器</p><p>菜单组件的选项 <code>tearoff</code> 为是否允许菜单分离为独立窗口, 默认开启<br> 由于存在问题, 因此一般建议设置为 <code>False</code> 禁用</p><h4 id="菜单内容" tabindex="-1"><a class="header-anchor" href="#菜单内容" aria-hidden="true">#</a> 菜单内容</h4><p>通过以下菜单对象的成员函数添加菜单内容<br> 将按添加顺序排列</p><ul><li><code>menu.add_command(label, command[, accelerator, underline, state])</code> 添加菜单项 <ul><li><code>label</code> 菜单项名称</li><li><code>command</code> 选择菜单项后触发的回调函数</li><li><code>accelerator</code> 菜单项说明, 一般用于说明快捷键 (并不会真正添加, 还需要通过<a href="#%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A">事件绑定</a>实现)</li><li><code>underline</code> 布尔型选型, 默认关闭, 使菜单可通过 <kbd>Alt</kbd> + 菜单名的首字母快速选择</li><li><code>state</code> 菜单项的状态, 设置为 <code>tk.DISABLED</code> 即可禁用菜单项</li></ul></li><li><code>menu.add_cascade(label, menu[, accelerator, underline, state])</code> 添加分层菜单项 <ul><li><code>menu</code> 分层菜单下的子菜单组件</li><li>其他同名参数与 <code>menu.add_command()</code> 含义相同</li></ul></li><li><code>menu.add_separator()</code> 添加划分线</li></ul><p>使用 <code>menu.entryconfig(index, **kwargs)</code> 可设置菜单项的属性</p><ul><li><code>index</code> 菜单项的索引, 即添加顺序, 也可使用字符串 <code>end</code> 表示最后添加的菜单项</li><li><code>**kwargs</code> 菜单项的属性, 与添加菜单项时相同</li></ul><h4 id="插入菜单" tabindex="-1"><a class="header-anchor" href="#插入菜单" aria-hidden="true">#</a> 插入菜单</h4><ul><li>窗口菜单, 即窗口下的菜单栏<br> 通过设置根窗口对象的属性 <code>menu</code> 为指定的菜单对象添加<br> 例如 <code>root.config(menu = ...)</code></li><li>右键菜单<br> 通过菜单组件成员函数 <code>menu.post(x, y)</code> 在指定位置显示菜单 (<code>x, y</code> 为相对屏幕的位置)<br> 通过与<a href="#%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A">右键事件绑定</a>实现右键菜单的效果<br> 例如 <code>root.bind(&quot;&lt;Button-3&gt;&quot;, lambda event: menu.post(event.x_root, event.y_root))</code></li></ul><h4 id="弹出菜单" tabindex="-1"><a class="header-anchor" href="#弹出菜单" aria-hidden="true">#</a> 弹出菜单</h4><p>弹出组件类 <code>Menubutton</code> 可定义一个弹出菜单按钮</p><p>该组件主要有以下参数</p><ul><li><code>text</code> 菜单按钮文字</li><li><code>menu</code> 绑定弹出的菜单组件</li><li><code>direction</code> 菜单弹出方向, 可用参数有 <ul><li><code>below</code> 向下弹出 (默认)</li><li><code>right</code> 向右弹出</li><li><code>above</code> 向上弹出</li></ul></li></ul><h3 id="列表框组件" tabindex="-1"><a class="header-anchor" href="#列表框组件" aria-hidden="true">#</a> 列表框组件</h3><p>列表框组件类 <code>Listbox</code></p><h4 id="列表框属性" tabindex="-1"><a class="header-anchor" href="#列表框属性" aria-hidden="true">#</a> 列表框属性</h4><ul><li><code>width</code> 列表项的单行文字长度 (与一般组件属性不同)</li><li><code>height</code> 列表项高度, 单位为列表项的高度 (与一般组件属性不同)</li><li><code>selectmode</code> 选择模式, 使用字符串表示 <ul><li><code>tk.BROWSE</code> 单选模式, 一次只能选中一个列表项, 默认模式</li><li><code>tk.EXTENDED</code> 多选模式, 需要结合 <kbd>Shift</kbd> 进行多选</li><li><code>tk.MULTIPLE</code> 多选模式, 不需要而外按键</li></ul></li></ul><h4 id="列表修改与信息获取" tabindex="-1"><a class="header-anchor" href="#列表修改与信息获取" aria-hidden="true">#</a> 列表修改与信息获取</h4><ul><li><code>listbox.insert(index, element)</code> 添加列表项 <ul><li><code>index</code> 添加位置的索引, 使用 <code>tk.END</code> 表示末尾</li><li><code>element</code> 列表内容</li></ul></li><li><code>listbox.delete(first, last)</code> 删除列表项 <ul><li><code>first</code> 开始删除位置的索引</li><li><code>last</code> 停止删除位置的索引, 取 <code>None</code> 表示仅删除 <code>first</code> 索引的列表项</li></ul></li><li><code>listbox.get(first)</code> 获取指定索引位置列表项的内容</li><li><code>listbox.size()</code> 获取列表框中的列表项总数</li><li><code>listbox.curselection()</code> 获取被选中的列表项 <ul><li>有任意选项被选中时返回一个由选中列表项组索引成的元组 (即使只有一个选中也返回元组)</li><li>没有选项选中时, 返回 <code>None</code> (因此最好先判断是否有选中的选项)</li></ul></li></ul><h4 id="列表框交互事件" tabindex="-1"><a class="header-anchor" href="#列表框交互事件" aria-hidden="true">#</a> 列表框交互事件</h4><p>列表交互事件为一个特殊的<a href="#%E8%99%9A%E6%8B%9F%E4%BA%8B%E4%BB%B6">虚拟事件</a> <code>&lt;&lt;ListboxSelect&gt;&gt;</code><br> 通过与列表对象绑定该事件, 可在列表选项被选择时触发</p><h4 id="绑定侧边滚动条" tabindex="-1"><a class="header-anchor" href="#绑定侧边滚动条" aria-hidden="true">#</a> 绑定侧边滚动条</h4><p>绑定滚动条前首先要定义滚动条组件 <code>tk.Scrollbar(master, orient)</code></p><ul><li><code>master</code> 滚动条的父容器, 一般与要绑定的组件使用同一父容器</li><li><code>orient</code> 滚动条方向, 参数有水平 <code>tk.HORIZONTAL</code> 与垂直 <code>tk.VERTICAL</code> (默认)</li></ul><p>只有继承自 <code>XView</code> 或 <code>YView</code> 的组件即支持滚动条, 如列表框 <code>Listbox</code></p><ul><li>使用绑定组件的 <code>y/xscrollcommand</code> 属性与滚动条的成员函数 <code>set</code> 绑定<br> 然后使用滚动条的 <code>command</code> 属性与组件的成员函数 <code>yview</code> 绑定<br> 例如 <ul><li><code>listbox.configure(yscrollcommand = scrollbar.set)</code></li><li><code>scrollbar.configure(command = listbox.yview)</code></li></ul></li><li>滚动条也需要<a href="#%E7%BB%84%E4%BB%B6%E5%B8%83%E5%B1%80">布局</a>, 通常使用一个容器包裹滚动条与绑定的组件, 并使用 <code>pack</code> 的 <code>fill</code> 属性布局</li></ul><h3 id="滑动条组件" tabindex="-1"><a class="header-anchor" href="#滑动条组件" aria-hidden="true">#</a> 滑动条组件</h3><p>滑动条组件类 <code>Scale</code></p><h4 id="滑动条样式与范围" tabindex="-1"><a class="header-anchor" href="#滑动条样式与范围" aria-hidden="true">#</a> 滑动条样式与范围</h4><p>通过以下属性可设置滑动条的样式</p><ul><li><code>orient</code> 滑动条方向, 参数有水平 <code>tk.HORIZONTAL</code> 与垂直 <code>tk.VERTICAL</code> (默认)</li><li><code>label</code> 在滑动条边上显示文字标签</li><li><code>showvalue</code> 是否显示当前数值, 更推荐通过追踪滑条变量的方式修改标签实现这一功能, 例如<br><code>v.trace_add(&quot;write&quot;, lambda *args : sc.configure(label = &quot;value: {}&quot;.format(v.get())))</code></li><li><code>tickinterval</code> 显示刻度, 参数值为刻度的间隔</li></ul><p>设置滑条值</p><ul><li><code>from_</code> 滑动条的最小值</li><li><code>to</code> 滑动条的最大值</li><li><code>resolution</code> 滑动条的最小步长</li><li><code>variable</code> 将滑条值与<a href="#%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1">变量对象绑定</a> (一般为 <code>tk.DoubleVar</code> 类型)</li></ul><h4 id="滑动条交互" tabindex="-1"><a class="header-anchor" href="#滑动条交互" aria-hidden="true">#</a> 滑动条交互</h4><ul><li>通过滑动条的 <code>command</code> 属性可为滑动条绑定一个回调函数, 当滑条值改变时将调用该回调函数<br> 回调函数接收一个参数为当前滑条值</li><li>也可直接<a href="#%E5%8F%98%E9%87%8F%E8%BF%BD%E8%B8%AA">追踪</a>滑动条的绑定变量</li></ul><h3 id="文本组件" tabindex="-1"><a class="header-anchor" href="#文本组件" aria-hidden="true">#</a> 文本组件</h3><p>文本组件类 <code>Text</code> 可用于输入多段文本, 也可用于展示文本<br> 除了文本, 还可以插入图片, 可交互的标签等内容</p><h4 id="文本组件属性" tabindex="-1"><a class="header-anchor" href="#文本组件属性" aria-hidden="true">#</a> 文本组件属性</h4><ul><li><code>width</code> 列表项的单行文字长度 (与一般组件属性不同)</li><li><code>height</code> 列表项高度, 单位为列表项的高度 (与一般组件属性不同)</li><li><code>padx, pady</code> 文本内容与文本框的边距</li><li><code>wrap</code> 换行方式, 常用的有 <ul><li><code>tk.NONE</code> 不自动换行</li><li><code>tk.CHAR</code> 按字符换行</li><li><code>tk.WORD</code> 按单词换行</li></ul></li><li><code>xscrollcommand, yscrollcommand</code> 用于与<a href="#%E7%BB%91%E5%AE%9A%E4%BE%A7%E8%BE%B9%E6%BB%9A%E5%8A%A8%E6%9D%A1">滚动条绑定</a></li><li><code>undo</code> 允许用户通过 <kbd>Ctrl</kbd> + <kbd>Z</kbd> 完成撤销, 默认为 <code>False</code></li><li><code>state</code> 文本组件只有 <code>tk.NORMAL</code> 与 <code>tk.DISABLE</code> 没有只读模式, 但可通过</li></ul><h4 id="文本内容读取与编辑" tabindex="-1"><a class="header-anchor" href="#文本内容读取与编辑" aria-hidden="true">#</a> 文本内容读取与编辑</h4><p>文本组件的文本内容的保存方式为按行与列数 (行索引) 的方式保存<br> 索引文本内容时使用字符串 <code>&lt;行数&gt;.&lt;列数&gt;</code> 表示 (注意中间使用 <code>.</code> 分隔)<br> 其中行数索引从 1 开始, 列数索引从 0 开始, <a href="#%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87">图片</a>占据一个文本位置<br> 可使用一些特殊字符表示特殊的位置, 常用有</p><ul><li><code>end</code> 结尾位置</li><li><code>insert</code> 光标所在位置</li><li><code>sel.first / sel.last</code> 被选中字符的开始与结束位置</li><li><code>&lt;tag&gt;.first / &lt;tag&gt;.last</code> <a href="#%E6%8F%92%E5%85%A5%E6%A0%87%E7%AD%BE">标签</a>的开始与结束位置</li></ul><p>获取文本使用如下成员函数</p><ul><li><code>text.get(index1, index2)</code> 即可获取两个索引之间的内容</li><li><code>text.dump(index1, index2)</code> 将以一个元组列表的方式, 返回两个索引之间的内容<br> 元组的基本形式为 <code>(&lt;type&gt;, &lt;content&gt;, &lt;index&gt;)</code><ul><li><code>type</code> 内容类型, 使用字符串表示, 常用有 <ul><li><code>text</code> 文本</li><li><code>tagon / tagoff</code> 标签起始与结束</li><li><code>image</code> 图片</li></ul></li><li><code>content</code> 文本内容或元素名称</li><li><code>index</code> 起始位置索引</li></ul></li><li><code>text.search()</code> 内容搜索, 此处不介绍</li></ul><p>编辑文本使用如下成员函数</p><ul><li><code>text.insert(index, content[, tag])</code> 插入内容 <ul><li><code>index</code> 插入位置的索引</li><li><code>content</code> 插入内容</li><li><code>tag</code> 将插入使用一个<a href="#%E6%8F%92%E5%85%A5%E6%A0%87%E7%AD%BE">标签</a>修饰, 不存在时将自动创建</li></ul></li><li><code>text.delete(start, end)</code> 删除指定位置的内容</li><li><code>text.replace(start, end, content)</code> 替换指定位置的内容</li><li><code>text.edit_reset()</code> 清空文本内容</li></ul><p>当允许撤销时 (属性 <code>undo = True</code>)</p><ul><li><code>text.edit_undo()</code> 撤销上次修改</li><li><code>text.edit_redo()</code> 重做上次撤销</li></ul><h4 id="插入图片" tabindex="-1"><a class="header-anchor" href="#插入图片" aria-hidden="true">#</a> 插入图片</h4><p>使用文本组件的成员函数 <code>text.image_create(index[, align, image, padx, pady])</code> 插入图片</p><ul><li><code>index</code> 插入位置的索引</li><li><code>align</code> 图片对齐方式, 常用有 <ul><li><code>tk.CENTER</code> 居中对齐</li><li><code>tk.BASELINE</code> 基线</li><li><code>tk.BOTTOM</code> 底部对齐</li><li><code>tk.TOP</code> 顶部对齐</li></ul></li><li><code>image</code> 可参考<a href="#%E5%9B%BE%E7%89%87%E5%86%85%E5%AE%B9%E8%AE%BE%E7%BD%AE">图片内容设置</a></li><li><code>padx, pady</code> 图片边距</li></ul><h4 id="插入标签" tabindex="-1"><a class="header-anchor" href="#插入标签" aria-hidden="true">#</a> 插入标签</h4><p>标签可用于修饰文本内容, 可定义特定的文本样式为标签, 并将需要修饰的文本使用标签修饰</p><p>除了 <a href="#%E6%96%87%E6%9C%AC%E5%86%85%E5%AE%B9%E8%AF%BB%E5%8F%96%E4%B8%8E%E7%BC%96%E8%BE%91">text.index</a> 可插入标签<br> 使用 <code>text.tag_add(tag, start1, end1[, start2, end2, ...])</code> 可将指定位置的文字内容使用标签修饰<br> * <code>tag</code> 修饰<a href="#%E6%8F%92%E5%85%A5%E6%A0%87%E7%AD%BE">标签</a>名, 不存在时将自动创建 * <code>start, end</code> 修饰的开始与结束位置, 可以一次设置多个</p><p>标签也可以像组件一样配置<a href="#%E7%BB%84%E4%BB%B6%E6%A0%B7%E5%BC%8F">样式</a>, <a href="#%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A">绑定事件</a>, 但需要使用如下文本组件的成员函数</p><ul><li><code>text.tag_config(tag, ...)</code> 设置标签 <code>tag</code> 的属性</li><li><code>text.tag_cget(tag, ...)</code> 获取标签 <code>tag</code> 的属性</li><li><code>text.tag_bind(tag, ...)</code> 为标签绑定事件</li></ul><p>如下例子定义了一个可以点击的标签</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>tx<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token string">&quot;end&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Click!&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hyper1&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 使用蓝色加下划线的字体以表示超链接</span>
tx<span class="token punctuation">.</span>tag_configure<span class="token punctuation">(</span><span class="token string">&quot;Hyper1&quot;</span><span class="token punctuation">,</span> foreground <span class="token operator">=</span> <span class="token string">&quot;blue&quot;</span><span class="token punctuation">,</span> font <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;underline&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
tx<span class="token punctuation">.</span>tag_bind<span class="token punctuation">(</span><span class="token string">&quot;Hyper1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&lt;Button-1&gt;&quot;</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> event<span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Click&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 通过设置光标进入标签时事件, 修改光标为点击状态</span>
tx<span class="token punctuation">.</span>tag_bind<span class="token punctuation">(</span><span class="token string">&quot;Hyper1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&lt;Enter&gt;&quot;</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> event<span class="token punctuation">:</span> tx<span class="token punctuation">.</span>configure<span class="token punctuation">(</span>cursor <span class="token operator">=</span> <span class="token string">&quot;hand2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
tx<span class="token punctuation">.</span>tag_bind<span class="token punctuation">(</span><span class="token string">&quot;Hyper1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&lt;Leave&gt;&quot;</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> event<span class="token punctuation">:</span> tx<span class="token punctuation">.</span>configure<span class="token punctuation">(</span>cursor <span class="token operator">=</span> <span class="token string">&quot;xterm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="子窗口" tabindex="-1"><a class="header-anchor" href="#子窗口" aria-hidden="true">#</a> 子窗口</h3><p>子窗口类 <code>tk.Toplevel</code> 类似<a href="#%E6%A0%B9%E7%AA%97%E5%8F%A3%E5%AF%B9%E8%B1%A1">根窗口</a>, 为一个独立的窗口</p><p>初始化与设置方式与根窗口相同, 但是还需要指定父容器, 一般即根窗口<br> 不同的是, 子窗口不需要调用 <code>mainloop()</code> 成员函数</p><h2 id="其他使用" tabindex="-1"><a class="header-anchor" href="#其他使用" aria-hidden="true">#</a> 其他使用</h2><h3 id="事件监听" tabindex="-1"><a class="header-anchor" href="#事件监听" aria-hidden="true">#</a> 事件监听</h3><h4 id="事件类型" tabindex="-1"><a class="header-anchor" href="#事件类型" aria-hidden="true">#</a> 事件类型</h4><p>在 tkinter 中, 使用字符串表示事件类型, 基本格式为 <code>&lt;[&lt;Modifier&gt;-]&lt;Type&gt;[-Detail]&gt;</code> (<mark>表示事件的字符串最外层有 <code>&lt;&gt;</code> 包裹</mark>)</p>`,148),f=e("<li><code>Type</code> 事件类型, 常用的有 <ul><li><code>Button</code> 用户点击任意鼠标, 可通过 <code>Detail</code> 属性进一步筛选</li><li><code>Key</code> 用户按下任意按键, 可通过 <code>Detail</code> 属性进一步筛选</li><li><code>Enter</code> 光标进入绑定组件范围</li><li><code>Leave</code> 光标离开绑定组件范围</li><li><code>Motion</code> 光标在组件内移动</li><li><code>FocusOut</code> 组件失去焦点</li><li><code>FocusIn</code> 组件获得焦点</li><li><code>Expose</code> 窗口出现</li><li><code>Configure</code> 窗口大小被改变</li></ul></li>",1),E=n("code",null,"Detail",-1),g=n("code",null,"Key",-1),B={href:"https://tcl.tk/man/tcl8.6/TkCmd/keysyms.htm",target:"_blank",rel:"noopener noreferrer"},x=n("li",null,[a("对于 "),n("code",null,"Button"),a(" 事件 "),n("ul",null,[n("li",null,[n("code",null,"1"),a(" 鼠标左键")]),n("li",null,[n("code",null,"2"),a(" 鼠标中键")]),n("li",null,[n("code",null,"3"),a(" 鼠标右键")])])],-1),A=e("<li><code>Modifier</code> 事件的附加条件, 常用有 <ul><li><code>Alt</code> 同时按着 <kbd>Alt</kbd></li><li><code>Control</code> 同时按着 <kbd>Control</kbd></li><li><code>Shift</code> 同时按着 <kbd>Shift</kbd></li><li><code>Double</code> 连续被触发两次 (用于检测双击鼠标等)</li></ul></li>",1),w=e('<h4 id="事件绑定" tabindex="-1"><a class="header-anchor" href="#事件绑定" aria-hidden="true">#</a> 事件绑定</h4><p>通过<a href="#%E6%A0%B9%E7%AA%97%E5%8F%A3%E5%AF%B9%E8%B1%A1">根窗口</a>或<a href="#%E7%BB%84%E4%BB%B6%E5%AF%B9%E8%B1%A1">组件</a>的方法 <code>widget.bind(sequence, callback)</code> 可用于绑定组件<br> 例如 <code>root.bind(&quot;&lt;Key-Escape&gt;&quot;, lambda event: root.destroy())</code> 可实现按下 <kbd>ESC</kbd> 时退出窗口</p><ul><li><code>sequence</code> 即<a href="#%E4%BA%8B%E4%BB%B6%E7%B1%BB%E5%9E%8B">事件类型</a>字符串</li><li><code>callback</code> 事件触发时的回调函数, 回调函数接收一个 <code>event</code> 对象, 常用的对象成员有 <ul><li><code>widget</code> 绑定事件的组件</li><li><code>x</code> 鼠标在窗口的 x 位置</li><li><code>y</code> 鼠标在窗口的 y 位置</li><li><code>x_root</code> 鼠标在屏幕的 x 位置, 用于 <code>Button</code> 事件</li><li><code>y_root</code> 鼠标在屏幕的 y 位置, 用于 <code>Button</code> 事件</li><li><code>keysym</code> 按键名称, 用于 <code>Key</code> 事件, 具体含义参考 <code>Detail</code></li><li><code>num</code> 鼠标按键类型, 用于 <code>Button</code> 事件, 具体含义参考 <code>Detail</code></li></ul></li><li>使用方法 <code>widget.bind_all</code> 则可以同时绑定根窗口或容器组件下所有的子组件</li><li>使用方法 <code>widget.unbind(sequence)</code> 可解除对应对象的绑定</li></ul><h4 id="虚拟事件" tabindex="-1"><a class="header-anchor" href="#虚拟事件" aria-hidden="true">#</a> 虚拟事件</h4><p>与一般事件不同, 虚拟事件为由用户定义与产生的事件</p><ul><li>虚拟事件使用以<mark>两层 <code>&lt;&gt;</code> 包裹</mark>, 其中的名称可以任意取</li><li>通过组件的 <code>widget.event_generate(sequence)</code> 可触发虚拟事件</li></ul><h3 id="变量对象" tabindex="-1"><a class="header-anchor" href="#变量对象" aria-hidden="true">#</a> 变量对象</h3><p>通过变量对象, 可与部分的组件属性绑定, 也可自定义用于组件间传递信息</p><h4 id="定义变量对象" tabindex="-1"><a class="header-anchor" href="#定义变量对象" aria-hidden="true">#</a> 定义变量对象</h4><p>变量对象为 tkinter 中的一类特殊对象</p><ul><li>这些对象的本质为变量, 也与组件的部分属性绑定</li><li>获取变量值需要使用成员函数 <code>var.get()</code></li><li>设置变量值需要使用成员函数 <code>var.set()</code></li><li>可用的变量对象类有 <ul><li>字符串 <code>tk.StringVar</code></li><li>整数 <code>tk.IntVar</code></li><li>浮点数 <code>tk.DoubleVar</code></li><li>布尔值 <code>tk.BooleanVar</code></li></ul></li><li>初始化方式为 <code>var = tk.XXXVar(value = ...)</code>, <code>value</code> 为变量初值</li></ul><h4 id="变量追踪" tabindex="-1"><a class="header-anchor" href="#变量追踪" aria-hidden="true">#</a> 变量追踪</h4><p>通过变量对象的成员函数 <code>cbn = variable.trace_add(mode, callback)</code> 追踪变量对象的修改, 并在发生对应修改时调用回调函数</p><ul><li><code>mode</code> 主要有模式 <ul><li><code>read</code> 变量被读取</li><li><code>write</code> 变量被写入 (组件写入也将触发)</li><li><code>unset</code> 变量被删除</li></ul></li><li><code>callback</code> 回调函数, 回调函数有三个参数, 分别是变量内部名, 变量内部索引, 变量追踪模式</li><li><code>cbn</code> 返回追踪对象, 用于删除追踪</li></ul><p>通过成员函数 <code>variable.trace_remove(cbn)</code> 解除追踪</p><h3 id="消息窗口" tabindex="-1"><a class="header-anchor" href="#消息窗口" aria-hidden="true">#</a> 消息窗口</h3><p>使用 <code>from tkinter import messagebox as tkm</code> 导入消息窗口子模块<br> 通过该子模块的方法可唤出消息窗口, 并返回用户选项<br> 对于单选项一般返回 <code>ok</code>, 双选项一般返回 <code>True</code> 与 <code>False</code></p><h4 id="消息窗口的常用属性" tabindex="-1"><a class="header-anchor" href="#消息窗口的常用属性" aria-hidden="true">#</a> 消息窗口的常用属性</h4><p>以子模块方法参数的方式设置消息窗口属性<br> 消息窗口有以下常用属性</p><ul><li><code>title</code> 窗口标题</li><li><code>message</code> 窗口信息</li><li><code>parent</code> 父窗口对象<br> 当消息窗口未关闭时, 将一直阻塞父窗口</li></ul><h4 id="常用消息窗口" tabindex="-1"><a class="header-anchor" href="#常用消息窗口" aria-hidden="true">#</a> 常用消息窗口</h4><ul><li><code>showinfo</code> 展示信息 (单选项)</li><li><code>showwarning</code> 展示警告 (单选项)</li><li><code>showerror</code> 展示错误 (单选项)</li><li><code>askquestion</code> 询问 (双选项)</li></ul><h3 id="文件查看器" tabindex="-1"><a class="header-anchor" href="#文件查看器" aria-hidden="true">#</a> 文件查看器</h3><p>使用 <code>from tkinter import filedialog as tkf</code> 导入文件查看器子模块<br> 通过该子模块的方法可唤出文件查看器, 并返回用户选择的文件<br> 对于单选项一般返回 <code>ok</code>, 双选项一般返回 <code>True</code> 与 <code>False</code></p><h4 id="文件查看器常用属性" tabindex="-1"><a class="header-anchor" href="#文件查看器常用属性" aria-hidden="true">#</a> 文件查看器常用属性</h4><p>使用该模块内的方法时, 有以下的常用属性</p><ul><li><code>defaultextension</code> 默认后缀名, 当用户未指定后缀时自动补充, 一般用于选择保存文件时使用</li><li><code>filetypes</code> 可选文件类型, 一个由元组 <code>(&quot;&lt;文件类型描述&gt;&quot;, &quot;&lt;文件后缀&gt;&quot;)</code> 组成的列表, 一般用于打开文件时使用</li><li><code>parent</code> 查看器的父窗口, 查看器未关闭时, 将阻塞父窗口</li><li><code>title</code> 查看器的标题</li><li><code>multiple</code> 是否允许多选, 默认为 <code>False</code></li><li><code>initialdir</code> 弹出查看器时, 位于哪个文件夹</li></ul><h4 id="文件查看器常用方法" tabindex="-1"><a class="header-anchor" href="#文件查看器常用方法" aria-hidden="true">#</a> 文件查看器常用方法</h4><ul><li><code>tkf.askopenfilename(**opts)</code> 获取用户需要打开的文件, 文件必须存在</li><li><code>tkf.asksaveasfilename(**opts)</code> 获取用户保存文件, 文件可以不存在</li><li><code>tkf.askdirectory(**opts)</code> 获取用户选择的文件夹, 不支持文件类型设置, 可设置属性 <code>mustexist</code> 要求文件夹必须存在</li></ul><h3 id="嵌入-matplotlib-图像" tabindex="-1"><a class="header-anchor" href="#嵌入-matplotlib-图像" aria-hidden="true">#</a> 嵌入 Matplotlib 图像</h3>',30),y={href:"https://matplotlib.org/stable/gallery/user_interfaces/embedding_in_tk_sgskip.html",target:"_blank",rel:"noopener noreferrer"},_=e(`<p>通过以下代码导入用于显示 Matplotlib 图像的组件</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 导入绘图组件</span>
<span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>backend_tkagg <span class="token keyword">import</span> FigureCanvasTkAgg
<span class="token comment"># 导入导航栏组件</span>
<span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>_backend_tk <span class="token keyword">import</span> NavigationToolbar2Tk
<span class="token comment"># 注意, 在 tk 中嵌入 Matplotlib 图像时, 不能使用 matplotlib.pyplot</span>
<span class="token comment"># 但可以导入 Figure 类代替, 相当于 plt.figure 方法</span>
<span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>figure <span class="token keyword">import</span> Figure
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义绘图组件方法为 <code>canvas = FigureCanvasTkAgg(figure, master)</code></p><ul><li><code>figure</code> 绑定来自 matplotlib 的 <code>Figure</code> 画布对象, 即需要显示的画布</li><li><code>master</code> 父容器组件</li></ul><p>使用绘图组件时, 常用的方法有</p><ul><li><code>canvas.get_tk_widget()</code> 获取实际的组件对象, 为绘图组件布局时, 需要先通过该函数获取实际组件对象, 再在该对象的基础上调用<a href="#%E7%BB%84%E4%BB%B6%E5%B8%83%E5%B1%80">组件布局相关方法</a><br> 空间被限定时画布大小将随可用空间变化, 因此一般不设置画布对象的 <code>figsize</code>, 并且在布局中使用参数 <code>fill=tk.BOTH</code></li><li><code>canvas.draw()</code> 当绑定的 <code>Figure</code> 对象改变时, 需要调用该函数重新绘制<br> 此外, 推荐使用 <code>Axes</code> 图像对象的成员函数 <code>axes.cla()</code> 清除旧的图像, 使用 <code>fig.clear()</code> 将导致图像信息被清除</li></ul><p>使用导航栏组件时, 可视为一般组件处理, 一般紧贴在绘图组件下方以保持与一般的绘图界面一致</p><h2 id="ttk-组件" tabindex="-1"><a class="header-anchor" href="#ttk-组件" aria-hidden="true">#</a> ttk 组件</h2><p>通过 <code>from tkinter import ttk</code> 导入 ttk 模块<br> ttk 模块提供了</p><ul><li>扁平化风格的组件以代替部分旧的组件</li><li>更多实用组件</li><li>将风格管理与组件行为代码分离</li></ul><h3 id="替换组件" tabindex="-1"><a class="header-anchor" href="#替换组件" aria-hidden="true">#</a> 替换组件</h3><p>对于以下组件, ttk 模块提供了扁平化风格的替代组件, 替代组件有着与原组件相同的组件类名, 但来自 ttk 模块</p><ul><li><a href="#%E6%A0%87%E7%AD%BE%E7%BB%84%E4%BB%B6">标签组件</a> <code>ttk.Label</code><ul><li>不再支持 <code>bitmap</code> 属性</li></ul></li><li><a href="#%E6%8C%89%E9%92%AE%E7%BB%84%E4%BB%B6">按钮组件</a> <code>ttk.Button</code></li><li><a href="#%E8%BE%93%E5%85%A5%E7%BB%84%E4%BB%B6">输入组件</a> <code>ttk.Entry</code>, <code>ttk.Spinbox</code></li><li><a href="#%E5%AE%B9%E5%99%A8%E7%BB%84%E4%BB%B6">容器组件</a> <code>ttk.Frame</code>, <code>ttk.LabelFrame</code>, <code>ttk.PanedWindow</code><ul><li>提供属性 <code>padding</code>, 可用于设置内容与容器边界的间隙, 值为一个数会一个四个数的元组</li></ul></li><li><a href="#%E9%80%89%E6%8B%A9%E7%BB%84%E4%BB%B6">选择组件</a> <code>ttk.Checkbutton</code>, <code>ttk.Radiobutton</code><ul><li>不再支持 <code>indication</code> 属性, 应改为 <code>style = &quot;&quot;Toolbutton</code> 以实现相同效果</li></ul></li><li><a href="#%E6%BB%91%E5%8A%A8%E6%9D%A1%E7%BB%84%E4%BB%B6">滑动条组件</a> <code>ttk.Scale</code><ul><li>不再支持 <code>label</code> 属性, 应改用组件 <code>ttk.LabeledScale</code></li></ul></li><li><a href="#%E7%BB%91%E5%AE%9A%E4%BE%A7%E8%BE%B9%E6%BB%9A%E5%8A%A8%E6%9D%A1">侧边滚动条</a> <code>ttkScrollbar</code></li></ul><p>此外还有一些共同的修改</p>`,14),q=e("<li>组件不通过 <code>state</code> 属性修改状态, 而是成员函数 <code>widget.state(newState)</code> <mark>添加</mark>与获取状态<br> 并且状态为一个由字符串组成的元组, 即一个组件可以有多个状态<br> 常用的状态有 <ul><li><code>disable</code> 禁用</li><li><code>readonly</code> 只读</li><li><code>focus</code> 称为焦点</li><li><code>active</code> 组件被按下 / 激活</li><li><code>!</code> + 状态名 关闭该状态</li></ul></li>",1),F=n("a",{href:"#%E5%9F%BA%E6%9C%AC%E5%B1%9E%E6%80%A7"},"基本属性",-1),N=n("li",null,[n("code",null,"master"),a(" 父容器")],-1),T=n("li",null,[n("code",null,"cursor"),a(" 光标样式, 含义与默认相同")],-1),C=n("li",null,[n("code",null,"takefocus"),a(" 组件是否可用键盘获得焦点")],-1),S=n("code",null,"style",-1),L={href:"https://docs.python.org/zh-cn/3/library/tkinter.ttk.html#tkinter.ttk.Style",target:"_blank",rel:"noopener noreferrer"},P=e('<h3 id="下拉栏组件" tabindex="-1"><a class="header-anchor" href="#下拉栏组件" aria-hidden="true">#</a> 下拉栏组件</h3><p>下拉栏组件类 <code>ttk.Combobox</code> 继承自<a href="#%E8%BE%93%E5%85%A5%E7%BB%84%E4%BB%B6">输入组件</a>, 具有与输入组件相同的基本功能, 也能输入文本<br> 除此之外, 还可从下拉栏中选择已有的值作为输入, 如果希望只能从已有值中选择, 则可以设置 <code>state</code> 为 <code>readonly</code></p><h4 id="下拉栏的常用属性与操作" tabindex="-1"><a class="header-anchor" href="#下拉栏的常用属性与操作" aria-hidden="true">#</a> 下拉栏的常用属性与操作</h4><p>除了来自输入组件的属性, 下拉栏还具有以下独有的属性</p><ul><li><code>justify</code> 文本在下拉栏内的对齐方式, 有 <ul><li><code>tk.CENTER</code> 居中对齐</li><li><code>tk.LEFT</code> 向左边对齐</li><li><code>tk.RIGHT</code> 向右边对齐</li></ul></li><li><code>values</code> 下拉栏中提供的值, 使用一个字符串元组或数组的形式表示多个值</li><li><code>postcommand</code> 用于绑定下拉栏被拉出时触发的回调函数</li></ul><p>通过成员函数 <code>combobox.current(index)</code> 可以获取与设置当前下拉栏选择的选项</p><ul><li>当参数为数字时, 将值设置为 <code>value</code> 中对应索引的字符串</li><li>当参数为 <code>None</code> 时, 将返回当前值在 <code>value</code> 中的索引, 如果不存在则返回 -1</li></ul><h4 id="下拉栏选择事件" tabindex="-1"><a class="header-anchor" href="#下拉栏选择事件" aria-hidden="true">#</a> 下拉栏选择事件</h4><p>当下拉栏的选项被选中时, 将触发虚拟事件 <code>&lt;&lt;ComboboxSelected&gt;&gt;</code><br> 可将下拉栏与该事件绑定以检测选项是否被选取</p><h3 id="进度条组件" tabindex="-1"><a class="header-anchor" href="#进度条组件" aria-hidden="true">#</a> 进度条组件</h3><p>进度条组件类 <code>ttk.Progressbar</code></p><h4 id="进度条样式与基本属性" tabindex="-1"><a class="header-anchor" href="#进度条样式与基本属性" aria-hidden="true">#</a> 进度条样式与基本属性</h4><p>通过以下参数可控制进度条的样式与基本属性</p><ul><li><code>orient</code> 控制进度条的方向, 可选参数有 <ul><li><code>tk.VERTICAL</code> 垂直</li><li><code>tk.HORIZONTAL</code> 水平</li></ul></li><li><code>length</code> 控制进度条的长度, 单位为像素</li><li><code>mode</code> 进度条的显示模式 <ul><li><code>determinate</code> 一般的进度条形式, 用于有明确进度的情况, 为默认模式</li><li><code>indeterminate</code> 进度条为一个在槽中移动的小方块, 用于无明确进度的情况</li></ul></li><li><code>maximum</code> 进度条的最大值</li><li><code>variable</code> 与进度条值绑定的<a href="#%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1">变量对象</a></li><li><code>value</code> 进度条当前值</li></ul><h4 id="进度条控制" tabindex="-1"><a class="header-anchor" href="#进度条控制" aria-hidden="true">#</a> 进度条控制</h4><p>对于有明确进度的情况</p><ul><li>可使用 <code>value</code> 属性或 <code>variable</code> 绑定的变量对象控制进度条</li><li>可使用成员函数 <code>progressbar.step(amount = 1)</code>, 使进度条的值增加指定的大小</li></ul><p>对于无明确进度或等待的情况</p><ul><li>可使用成员函数 <code>progressbar.start(interval = 50)</code>, 使进度条的值每隔指定间隔 <code>interval</code> 加 1, 单位为 ms, 当值满时将重新开始计</li><li>可使用成员函数 <code>progressbar.stop()</code> 停止自动增加</li></ul><h3 id="选项卡组件" tabindex="-1"><a class="header-anchor" href="#选项卡组件" aria-hidden="true">#</a> 选项卡组件</h3><p>选项卡组件类为 <code>ttk.Notebook</code><br> 通过选项卡可以管理一系列的<a href="#%E7%AE%80%E5%8D%95%E5%AE%B9%E5%99%A8">简单容器</a>, 并在这些容器中切换</p><h4 id="选项卡操作" tabindex="-1"><a class="header-anchor" href="#选项卡操作" aria-hidden="true">#</a> 选项卡操作</h4><p>通过选项卡的以下成员函数管理选项</p><ul><li><code>notebook.add(child[, state, sticky, text, underline])</code><ul><li><code>child</code> 选项对应的 <code>ttk.Frame</code> 简单容器</li><li><code>state</code> 选项状态, 有一般状态 <code>tk.NORMAL</code>, 禁用状态 (无法选中) <code>tk.DISABLE</code>, 隐藏状态 <code>tk.HIDDEN</code></li><li><code>sticky</code> 选项卡容器与边缘的相连状态, 参数与 <a href="#%E7%BB%84%E4%BB%B6%E5%B8%83%E5%B1%80">grid</a> 类似</li><li><code>text</code> 选项文字</li><li><code>underline</code> 含义与<a href="#%E8%8F%9C%E5%8D%95%E7%BB%84%E4%BB%B6">菜单组件</a>的 <code>underline</code> 属性类似</li></ul></li><li><code>notebook.select(index)</code> 选择指定索引的选项卡, 索引可以是以下形式 <ul><li>数字, 根据添加顺序决定</li><li>字符串 <code>end</code>, 表示最后一个选项</li><li>字符串 <code>current</code> 表示当前选项</li><li>传入 <code>None</code> 时将返回当前选中的选项卡信息, 配合 <code>notebook.index(notebook.select())</code> 可获取当前选中选项卡的索引</li></ul></li><li><code>notebook.tab(index, option)</code> 查询选项卡属性 <code>option</code> 的值 (选项卡的属性即函数 <code>add</code> 的参数)</li><li><code>notebook.tab(index, **kwargs)</code> 设置选项卡的属性</li></ul><h4 id="选项卡选择事件" tabindex="-1"><a class="header-anchor" href="#选项卡选择事件" aria-hidden="true">#</a> 选项卡选择事件</h4><p>当选项卡的选项变化时, 将产生虚拟事件 <code>&lt;&lt;NotebookTabChanged&gt;&gt;</code><br> 可通过绑定该事件检测选项卡中选项的切换</p><h3 id="树状表格组件" tabindex="-1"><a class="header-anchor" href="#树状表格组件" aria-hidden="true">#</a> 树状表格组件</h3><p>树状表格组件为类 <code>ttk.Treeview</code>, 一般可视为表格, 并且其中的表格项可折叠分层</p><ul><li>可以只显示第 0 列的行标题, 视为树状的下拉栏 (推荐)</li><li>可以忽略第 0 列视为一般表格</li></ul><h4 id="树状表格的基本属性" tabindex="-1"><a class="header-anchor" href="#树状表格的基本属性" aria-hidden="true">#</a> 树状表格的基本属性</h4><p>树状表格组件具有以下基本属性</p><ul><li><code>columns</code> 传入一个元组, 确定表格各列列名 (之后可使用此名称访问列), 通常该属性只用于初步设置, 还需要<a href="#%E6%A0%91%E7%8A%B6%E8%A1%A8%E6%A0%BC%E6%A0%87%E9%A2%98%E6%A0%8F">具体设置</a></li><li><code>selectmode</code> 表格各行的选择模式, 可用参数有 <ul><li><code>ttk.EXTENDED</code> 默认, 可多选</li><li><code>ttk.BROWSE</code> 单选</li><li><code>ttk.NONE</code> 无法选择</li></ul></li><li><code>show</code> 表格的显示方式, 可用参数有 <ul><li><code>tree</code> 在第 0 列显示行标题 (如果将该组件视为一般表格使用则不需要)</li><li><code>headings</code> 第一行为表格标题栏</li><li><code>tree headings</code> 同时显示 (默认)</li></ul></li><li>树状表格也可<a href="#%E7%BB%91%E5%AE%9A%E4%BE%A7%E8%BE%B9%E6%BB%9A%E5%8A%A8%E6%9D%A1">绑定侧边滚动条</a></li></ul><h4 id="树状表格标题栏" tabindex="-1"><a class="header-anchor" href="#树状表格标题栏" aria-hidden="true">#</a> 树状表格标题栏</h4><p>使用成员函数 <code>treeview.heading(cind, text[, anchor, command])</code> 设置各列的标题栏</p><ul><li><code>cind</code> 列名或列索引 (使用 <code>#</code> + 索引表示的字符串)<br> 当存在行序号列时 (属性 <code>show = &quot;tree&quot;</code>), 使用 <code>#0</code> 访问该列</li><li><code>text</code> 列标题</li><li><code>anchor</code> 列对齐方式, 取值类似 <a href="#%E7%BB%84%E4%BB%B6%E5%B8%83%E5%B1%80">pack</a> 的 <code>anchor</code> 参数</li><li><code>command</code> 当列标题被点击时, 触发的回调函数</li></ul><h4 id="树状表格内容设置" tabindex="-1"><a class="header-anchor" href="#树状表格内容设置" aria-hidden="true">#</a> 树状表格内容设置</h4><p>使用成员函数 <code>treeview.insert(parent, index, iid[, values, text, tags])</code> 插入表格行</p><ul><li><code>parent</code> 插入行所在的父行名, 如果为独立的一行, 传入空字符串</li><li><code>index</code> 插入索引, 可使用字符串 <code>end</code> 表示最后一行</li><li><code>iid</code> 行标记, 为了便于追踪建议设置, 不使用该属性可传入 <code>None</code></li><li><code>values</code> 行各列信息, 传入一个字符串元组表示各列的值, 元素个数与属性 <code>columns</code> 的相同</li><li><code>text</code> 行标题</li><li><code>tags</code> 行标签, 类似<a href="#%E6%8F%92%E5%85%A5%E6%A0%87%E7%AD%BE">文本组件的标签</a>, 可通过此设置行显示样式与绑定事件</li></ul><p>使用成员函数 <code>treeview.item(iid[, values, text, tags])</code> 修改行属性<br> 其中 <code>iid</code> 即行标记属性 <code>iid</code> 设置的值</p><p>使用成员函数 <code>treeview.item(iid, option)</code> 查询行属性 <code>option</code> 的值</p>',40),I=n("code",null,"treeview.delete(iid)",-1),D=n("br",null,null,-1),R=n("code",null,"treeview.delete(*treeview.get_children())",-1),O=n("code",null,"*",-1),M={href:"https://stackoverflow.com/questions/2322355/proper-name-for-python-operator",target:"_blank",rel:"noopener noreferrer"},V=e('<p>使用成员函数 <code>treeview.selection()</code> 可获取所有被选中的行, 返回由被选中行的行标记组成的元组</p><h4 id="树状表格有关事件" tabindex="-1"><a class="header-anchor" href="#树状表格有关事件" aria-hidden="true">#</a> 树状表格有关事件</h4><p>树状表格具有以下虚拟事件可以绑定</p><ul><li><code>&lt;&lt;TreeviewSelect&gt;&gt;</code> 选择的行改变</li><li><code>&lt;&lt;TreeviewOpen&gt;&gt;</code> 有行被展开</li><li><code>&lt;&lt;TreeviewClose&gt;&gt;</code> 有行被闭合</li></ul><h3 id="其他小组件" tabindex="-1"><a class="header-anchor" href="#其他小组件" aria-hidden="true">#</a> 其他小组件</h3><ul><li>分隔线组件类 <code>ttk.Separator(master, orient, style)</code><ul><li><code>orient</code> 分隔线方向, 可选参数有 <code>tk.VERTICAL</code> 垂直与 <code>tk.HORIZONTAL</code> 水平</li><li>一般用于 <a href="#%E7%BB%84%E4%BB%B6%E5%B8%83%E5%B1%80">pack</a>, 并在平行方向设置 <code>fill</code>, 在垂直方向设置 <code>pad</code></li></ul></li><li>拖动柄组件类 <code>ttk.Sizegrip(master, style)</code><ul><li>该组件没有其他属性, 可通过拖动该组件缩放窗口</li><li>一般用于 <a href="#%E7%BB%84%E4%BB%B6%E5%B8%83%E5%B1%80">pack</a>, 并使用布局 <code>sizegrip.pack(side = tk.BOTTOM, anchor = tk.E, padx = 5, pady = 5)</code></li></ul></li></ul><h3 id="ttk-主题" tabindex="-1"><a class="header-anchor" href="#ttk-主题" aria-hidden="true">#</a> ttk 主题</h3><ul><li>使用 <code>ttk.Style().theme_names()</code> 可列出当前支持的所有主题</li><li>使用 <code>ttk.Style().theme_use(themename)</code> 可以设置主题或获取当前主题 (传入 <code>None</code>)<br> 对于不同系统, 支持的主题不同, 为了跨平台性, 推荐使用以下主题</li><li><code>calm</code> 扁平化主题</li><li><code>alt</code> 类 xp 主题</li><li><code>vista</code> windows 下的默认主题, 仅用于 Windows 系统</li></ul><h2 id="ttkbootstrap-扁平化组件与风格" tabindex="-1"><a class="header-anchor" href="#ttkbootstrap-扁平化组件与风格" aria-hidden="true">#</a> ttkbootstrap 扁平化组件与风格</h2><p>推荐使用模块 ttkbootstrap 提供更加接近 bootsrap 风格的主题与更简单的风格设置<br> 该模块需要通过 pip 安装, 通常使用 <code>import ttkbootstrap as ttk</code> 导入, 该模块可完全替代 ttk 与 tk 模块<br> 并且如 <code>tk.CNETER</code> 等常数也可使用 <code>ttk.CENTER</code> 代替</p><p>注意, ttkbootstrap 仍与 <a href="#ttk-%E7%BB%84%E4%BB%B6">ttk</a> 存在区别</p><ul><li>ttkbootstrap 依然使用 <code>state</code> 属性管理状态</li><li>ttkbootstrap 的风格已统一管理, 组件样式依然由属性 <a href="#%E7%BB%84%E4%BB%B6%E6%A0%B7%E5%BC%8F">style</a> 设置</li></ul><h3 id="基本使用-1" tabindex="-1"><a class="header-anchor" href="#基本使用-1" aria-hidden="true">#</a> 基本使用</h3><h4 id="根窗口与整体主题" tabindex="-1"><a class="header-anchor" href="#根窗口与整体主题" aria-hidden="true">#</a> 根窗口与整体主题</h4>',14),z=n("code",null,"ttk.Window(themename = ...)",-1),W=n("br",null,null,-1),X=n("code",null,"themename",-1),H={href:"https://ttkbootstrap.readthedocs.io/en/latest/zh/themes",target:"_blank",rel:"noopener noreferrer"},G=n("br",null,null,-1),U=e('<ul><li><code>litera</code> 默认浅色主题</li><li><code>lumen</code> 柔和浅色主题</li><li><code>superhero</code> 浅深色主题</li><li><code>darkly</code> 深色主题</li></ul><h4 id="组件样式-1" tabindex="-1"><a class="header-anchor" href="#组件样式-1" aria-hidden="true">#</a> 组件样式</h4><p>使用组件的属性 <code>style</code> (一般情况) 或 <code>bootstyle</code> (出错时使用) 可通过使用场合定义组件样式, 常用有</p><ul><li><code>ttk.DEFAULT</code> 默认风格 (默认)</li><li><code>ttk.PRIMARY</code> 主要组件</li><li><code>ttk.SECONDARY</code> 此要组件</li><li><code>ttk.SUCCESS</code> 成功</li><li><code>ttk.INFO</code> 信息</li><li><code>ttk.WARNING</code> 警告</li><li><code>ttk.DANGER</code> 危险</li><li>当组件处于 <code>readonly</code> 与 <code>disabled</code> 状态时, 也将有特殊样式</li></ul><p>以下为常用的组件特有样式</p><ul><li>对于<a href="#%E6%A0%87%E7%AD%BE%E7%BB%84%E4%BB%B6">标签</a>有 <code>inverse-xxx</code>, 即背景色采用样式颜色, 字体颜色为黑色</li><li>对于<a href="#%E6%8C%89%E9%92%AE%E7%BB%84%E4%BB%B6">按钮</a>与<a href="#%E4%B8%8B%E6%8B%89%E8%8F%9C%E5%8D%95">下拉菜单</a>有 <code>xxx-outline</code>, 即边框采用样式颜色</li><li>对于<a href="#%E8%BF%9B%E5%BA%A6%E6%9D%A1%E7%BB%84%E4%BB%B6">进度条组件</a>有 <code>xxx-striped</code>, 即在进度条内使用修饰斜线</li><li>对于<a href="#%E9%80%89%E6%8B%A9%E7%BB%84%E4%BB%B6">选择组件</a>有 <code>xxx[-outline]-toolbutton</code>, 即启用 <code>indication</code> 属性</li></ul><p>注意样式不适用于 <code>Menu</code>, <code>Text</code> 等组件</p><h3 id="消息提醒" tabindex="-1"><a class="header-anchor" href="#消息提醒" aria-hidden="true">#</a> 消息提醒</h3>',8),Z={href:"https://ttkbootstrap.readthedocs.io/en/latest/zh/api/toast/#toastnotification",target:"_blank",rel:"noopener noreferrer"},K=e('<p>通过 <code>from ttkbootstrap.toast import ToastNotification</code> 导入消息提醒组件<br> 当现实消息提醒时, 该组件可在屏幕右下角现实消息提醒框, 并在持续一段时间后消失<br> 本质为一个没有标题栏的<a href="#%E5%AD%90%E7%AA%97%E5%8F%A3">子窗口</a></p><p>使用前需要定义消息提醒组件对象 <code>toast = ToastNotification(title, message[, duration, bootstyle, alert, icon])</code></p><ul><li><code>title</code> 消息提醒框的标题</li><li><code>message</code> 消息提醒框的正文</li><li><code>duration</code> 持续事件, 单位为 ms, 默认持续 3000ms</li><li><code>bootstyle</code> 显示风格, 参考<a href="#%E7%BB%84%E4%BB%B6%E6%A0%B7%E5%BC%8F">组件样式</a></li><li><code>alert</code> 显示时是否伴有警告提示音, 默认为 <code>False</code></li><li><code>icon</code> 提醒框图标字符的 unicode 值, 可使用如 ⚠ 等 emoji</li></ul><p>当需要显示时, 调用成员函数 <code>toast.show_toast()</code> 即可</p><h3 id="浮动信息" tabindex="-1"><a class="header-anchor" href="#浮动信息" aria-hidden="true">#</a> 浮动信息</h3>',5),Y={href:"https://ttkbootstrap.readthedocs.io/en/latest/zh/api/tooltip/",target:"_blank",rel:"noopener noreferrer"},j=e('<p>通过 <code>from ttkbootstrap.toast import ToolTip</code> 导入浮动信息组件<br> 浮动信息组件能绑定在任意组件上, 当鼠标进入组件上时显示</p><p>浮动信息组件对象的初始化为 <code>tip = ToolTip(widget, text[, bootstyle])</code></p><ul><li><code>widget</code> 被绑定的组件</li><li><code>text</code> 浮动信息内容</li><li><code>bootstyle</code> 显示风格, 参考<a href="#%E7%BB%84%E4%BB%B6%E6%A0%B7%E5%BC%8F">组件样式</a>, 可使用标签的特有样式</li></ul><h3 id="ttkbootstrap-消息窗口" tabindex="-1"><a class="header-anchor" href="#ttkbootstrap-消息窗口" aria-hidden="true">#</a> ttkbootstrap 消息窗口</h3>',4),Q={href:"https://ttkbootstrap.readthedocs.io/en/latest/zh/api/dialogs/messagebox/#ttkbootstrap.dialogs.dialogs.Messagebox",target:"_blank",rel:"noopener noreferrer"},J=e('<p>通过 <code>from ttkbootstrap.dialogs import Messagebox</code> 导入浮动信息组件<br> 该模块与<a href="#%E6%B6%88%E6%81%AF%E7%AA%97%E5%8F%A3">消息窗口</a>类似, 但该模块的消息窗口能与整体风格保持一致</p><p>相比默认的消息窗口, 该模块与之存在以下不同</p><ul><li>单选项的消息返回 <code>None</code>, 多选项的返回选项值 (可能因本地化的原因导致选项值不同)</li><li>多一个 <code>alert</code> 属性可用于产生警告音</li></ul><p>常用的消息窗口有</p><ul><li><code>Messagebox.show_error()</code> 显示错误</li><li><code>Messagebox.show_info()</code> 显示信息</li><li><code>Messagebox.show_warning()</code> 显示警告</li><li><code>Messagebox.show_question()</code> 询问 (双选项)</li></ul><h3 id="本地化" tabindex="-1"><a class="header-anchor" href="#本地化" aria-hidden="true">#</a> 本地化</h3>',6),$={href:"https://ttkbootstrap.readthedocs.io/en/latest/zh/api/localization/",target:"_blank",rel:"noopener noreferrer"},nn=n("br",null,null,-1),an=e(`<h2 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码" aria-hidden="true">#</a> 示例代码</h2><h3 id="基于网格的交互界面" tabindex="-1"><a class="header-anchor" href="#基于网格的交互界面" aria-hidden="true">#</a> 基于网格的交互界面</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk

commonPad <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;padx&quot;</span> <span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
    <span class="token string">&quot;pady&quot;</span> <span class="token punctuation">:</span> <span class="token number">5</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">LayOut</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> master<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>master <span class="token operator">=</span> master

        self<span class="token punctuation">.</span>master<span class="token punctuation">.</span>grid_columnconfigure<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> weight <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>master<span class="token punctuation">.</span>grid_columnconfigure<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> weight <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>master<span class="token punctuation">.</span>grid_rowconfigure<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> weight <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>master<span class="token punctuation">.</span>grid_rowconfigure<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> weight <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>

        <span class="token comment">####</span>

        self<span class="token punctuation">.</span>fInfoBody <span class="token operator">=</span> tk<span class="token punctuation">.</span>LabelFrame<span class="token punctuation">(</span>self<span class="token punctuation">.</span>master<span class="token punctuation">,</span> text <span class="token operator">=</span> <span class="token string">&quot;Info&quot;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>fInfoBody<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>commonPad<span class="token punctuation">,</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rowspan <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> sticky <span class="token operator">=</span> tk<span class="token punctuation">.</span>NSEW<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>fInfoBody<span class="token punctuation">.</span>grid_rowconfigure<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> weight <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token comment"># 让列撑满可用空间</span>
        self<span class="token punctuation">.</span>fInfoBody<span class="token punctuation">.</span>grid_columnconfigure<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> weight <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>fQueueBody <span class="token operator">=</span> tk<span class="token punctuation">.</span>LabelFrame<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fInfoBody<span class="token punctuation">,</span> text <span class="token operator">=</span> <span class="token string">&quot;Queue&quot;</span><span class="token punctuation">)</span>
        <span class="token comment"># 让容器撑满网格</span>
        self<span class="token punctuation">.</span>fQueueBody<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>commonPad<span class="token punctuation">,</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sticky <span class="token operator">=</span> tk<span class="token punctuation">.</span>NSEW<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>fValueBody <span class="token operator">=</span> tk<span class="token punctuation">.</span>LabelFrame<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fInfoBody<span class="token punctuation">,</span> text <span class="token operator">=</span> <span class="token string">&quot;Value&quot;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>fValueBody<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>commonPad<span class="token punctuation">,</span> row <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sticky <span class="token operator">=</span> tk<span class="token punctuation">.</span>NSEW<span class="token punctuation">)</span>

        <span class="token comment">####</span>

        self<span class="token punctuation">.</span>fCmdBody <span class="token operator">=</span> tk<span class="token punctuation">.</span>LabelFrame<span class="token punctuation">(</span>self<span class="token punctuation">.</span>master<span class="token punctuation">,</span> text <span class="token operator">=</span> <span class="token string">&quot;Command Frame&quot;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>fCmdBody<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>commonPad<span class="token punctuation">,</span> row <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> sticky <span class="token operator">=</span> tk<span class="token punctuation">.</span>NSEW<span class="token punctuation">)</span>

        <span class="token comment">####</span>

        self<span class="token punctuation">.</span>fMainBody <span class="token operator">=</span> tk<span class="token punctuation">.</span>LabelFrame<span class="token punctuation">(</span>self<span class="token punctuation">.</span>master<span class="token punctuation">,</span> text <span class="token operator">=</span> <span class="token string">&quot;Main Frame&quot;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>fMainBody<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>commonPad<span class="token punctuation">,</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> sticky <span class="token operator">=</span> tk<span class="token punctuation">.</span>NSEW<span class="token punctuation">)</span>

        <span class="token keyword">pass</span>

root <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 使用容器组件设计布局时, 由于容器默认大小为 0, 应当给出窗口的大小</span>
root<span class="token punctuation">.</span>geometry<span class="token punctuation">(</span><span class="token string">&quot;640x480&quot;</span><span class="token punctuation">)</span>
LayOut<span class="token punctuation">(</span>root<span class="token punctuation">)</span>

root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="简单用户验证界面" tabindex="-1"><a class="header-anchor" href="#简单用户验证界面" aria-hidden="true">#</a> 简单用户验证界面</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk
<span class="token keyword">import</span> re

<span class="token comment"># 通用边距</span>
commonPad <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;padx&quot;</span> <span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
    <span class="token string">&quot;pady&quot;</span> <span class="token punctuation">:</span> <span class="token number">5</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">LoginPlane</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> master<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token comment"># 使用 pack 布局的上方容器, 采用固定大小</span>
        self<span class="token punctuation">.</span>lfInput <span class="token operator">=</span> tk<span class="token punctuation">.</span>LabelFrame<span class="token punctuation">(</span>master<span class="token punctuation">,</span> 
                                     text <span class="token operator">=</span> <span class="token string">&quot;Input&quot;</span><span class="token punctuation">,</span>
                                     width <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">,</span>
                                     height <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>lfInput<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>commonPad<span class="token punctuation">,</span> side <span class="token operator">=</span> tk<span class="token punctuation">.</span>TOP<span class="token punctuation">,</span> anchor <span class="token operator">=</span> tk<span class="token punctuation">.</span>CENTER<span class="token punctuation">,</span> fill <span class="token operator">=</span> tk<span class="token punctuation">.</span>X<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>lfInput<span class="token punctuation">.</span>propagate<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>

        <span class="token comment"># 用于匹配密码与用户名的正则表达式</span>
        self<span class="token punctuation">.</span>validPattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">&quot;[_a-zA-Z0-9]{0,16}&quot;</span><span class="token punctuation">)</span>

        <span class="token comment"># 使用 LabelFrame 的文字作为输入框的标签, 而非直接使用标签</span>
        self<span class="token punctuation">.</span>lfName <span class="token operator">=</span> tk<span class="token punctuation">.</span>LabelFrame<span class="token punctuation">(</span>self<span class="token punctuation">.</span>lfInput<span class="token punctuation">,</span> 
                                    text <span class="token operator">=</span> <span class="token string">&quot;Name:&quot;</span><span class="token punctuation">,</span>
                                    relief <span class="token operator">=</span> <span class="token string">&quot;flat&quot;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>lfName<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>commonPad<span class="token punctuation">,</span> anchor <span class="token operator">=</span> tk<span class="token punctuation">.</span>NW<span class="token punctuation">,</span> fill <span class="token operator">=</span> tk<span class="token punctuation">.</span>X<span class="token punctuation">)</span>
        <span class="token comment"># 使用变量对象追踪输入值</span>
        self<span class="token punctuation">.</span>valName <span class="token operator">=</span> tk<span class="token punctuation">.</span>StringVar<span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>etName <span class="token operator">=</span> tk<span class="token punctuation">.</span>Entry<span class="token punctuation">(</span>self<span class="token punctuation">.</span>lfName<span class="token punctuation">,</span> 
                               textvariable <span class="token operator">=</span> self<span class="token punctuation">.</span>valName<span class="token punctuation">,</span>
                               validate <span class="token operator">=</span> <span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span>
                               validatecommand <span class="token operator">=</span> <span class="token punctuation">(</span>master<span class="token punctuation">.</span>register<span class="token punctuation">(</span>self<span class="token punctuation">.</span>Valid<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;%P&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                               invalidcommand <span class="token operator">=</span> self<span class="token punctuation">.</span>CmdInvalid<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>etName<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>commonPad<span class="token punctuation">,</span> anchor <span class="token operator">=</span> tk<span class="token punctuation">.</span>CENTER<span class="token punctuation">,</span> fill <span class="token operator">=</span> tk<span class="token punctuation">.</span>X<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>lfPasswd <span class="token operator">=</span> tk<span class="token punctuation">.</span>LabelFrame<span class="token punctuation">(</span>self<span class="token punctuation">.</span>lfInput<span class="token punctuation">,</span> 
                                      text <span class="token operator">=</span> <span class="token string">&quot;Password:&quot;</span><span class="token punctuation">,</span>
                                      relief <span class="token operator">=</span> <span class="token string">&quot;flat&quot;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>lfPasswd<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>commonPad<span class="token punctuation">,</span> anchor <span class="token operator">=</span> tk<span class="token punctuation">.</span>NW<span class="token punctuation">,</span> fill <span class="token operator">=</span> tk<span class="token punctuation">.</span>X<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>valPasswd <span class="token operator">=</span> tk<span class="token punctuation">.</span>StringVar<span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>etPasswd <span class="token operator">=</span> tk<span class="token punctuation">.</span>Entry<span class="token punctuation">(</span>self<span class="token punctuation">.</span>lfPasswd<span class="token punctuation">,</span> 
                                 show <span class="token operator">=</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span> 
                                 textvariable <span class="token operator">=</span> self<span class="token punctuation">.</span>valPasswd<span class="token punctuation">,</span>
                                 validate <span class="token operator">=</span> <span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span>
                                 validatecommand <span class="token operator">=</span> <span class="token punctuation">(</span>master<span class="token punctuation">.</span>register<span class="token punctuation">(</span>self<span class="token punctuation">.</span>Valid<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;%P&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                 invalidcommand <span class="token operator">=</span> self<span class="token punctuation">.</span>CmdInvalid<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>etPasswd<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>commonPad<span class="token punctuation">,</span> anchor <span class="token operator">=</span> tk<span class="token punctuation">.</span>CENTER<span class="token punctuation">,</span> fill <span class="token operator">=</span> tk<span class="token punctuation">.</span>X<span class="token punctuation">)</span>

        <span class="token comment">#####</span>

        self<span class="token punctuation">.</span>lfAction <span class="token operator">=</span> tk<span class="token punctuation">.</span>LabelFrame<span class="token punctuation">(</span>master<span class="token punctuation">,</span> 
                                      text <span class="token operator">=</span> <span class="token string">&quot;Action&quot;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>lfAction<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>commonPad<span class="token punctuation">,</span> side <span class="token operator">=</span> tk<span class="token punctuation">.</span>TOP<span class="token punctuation">,</span> anchor <span class="token operator">=</span> tk<span class="token punctuation">.</span>CENTER<span class="token punctuation">,</span> fill <span class="token operator">=</span> tk<span class="token punctuation">.</span>X<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>fActButton <span class="token operator">=</span> tk<span class="token punctuation">.</span>Frame<span class="token punctuation">(</span>self<span class="token punctuation">.</span>lfAction<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>fActButton<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side <span class="token operator">=</span> tk<span class="token punctuation">.</span>TOP<span class="token punctuation">,</span> anchor <span class="token operator">=</span> tk<span class="token punctuation">.</span>CENTER<span class="token punctuation">,</span> fill <span class="token operator">=</span> tk<span class="token punctuation">.</span>X<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>fActButton<span class="token punctuation">.</span>grid_columnconfigure<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> weight <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>fActButton<span class="token punctuation">.</span>grid_rowconfigure<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> weight <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>btLogin <span class="token operator">=</span> tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fActButton<span class="token punctuation">,</span>
                                 text <span class="token operator">=</span> <span class="token string">&quot;Login&quot;</span><span class="token punctuation">,</span>
                                 command <span class="token operator">=</span> self<span class="token punctuation">.</span>CmdLogin<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>btLogin<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>commonPad<span class="token punctuation">,</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sticky <span class="token operator">=</span> tk<span class="token punctuation">.</span>EW<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>btRegist <span class="token operator">=</span> tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fActButton<span class="token punctuation">,</span>
                                  text <span class="token operator">=</span> <span class="token string">&quot;Regist&quot;</span><span class="token punctuation">,</span>
                                  command <span class="token operator">=</span> self<span class="token punctuation">.</span>CmdRegist<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>btRegist<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>commonPad<span class="token punctuation">,</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> sticky <span class="token operator">=</span> tk<span class="token punctuation">.</span>EW<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>lbActState <span class="token operator">=</span> tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>self<span class="token punctuation">.</span>lfAction<span class="token punctuation">)</span>

        <span class="token comment">#####</span>

        <span class="token comment"># 记录账号与密码信息</span>
        self<span class="token punctuation">.</span>userData <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        
        <span class="token keyword">return</span>

    <span class="token keyword">def</span> <span class="token function">SetActState</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> is_error<span class="token punctuation">,</span> state_info<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> is_error<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>lbActState<span class="token punctuation">.</span>configure<span class="token punctuation">(</span>fg <span class="token operator">=</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>lbActState<span class="token punctuation">.</span>configure<span class="token punctuation">(</span>fg <span class="token operator">=</span> <span class="token string">&quot;green&quot;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>lbActState<span class="token punctuation">.</span>configure<span class="token punctuation">(</span>text <span class="token operator">=</span> state_info<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>lbActState<span class="token punctuation">.</span>winfo_viewable<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>lbActState<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>commonPad<span class="token punctuation">,</span> side <span class="token operator">=</span> tk<span class="token punctuation">.</span>TOP<span class="token punctuation">,</span> anchor <span class="token operator">=</span> tk<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span>

        <span class="token keyword">return</span>

    <span class="token keyword">def</span> <span class="token function">CmdLogin</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        valName <span class="token operator">=</span> self<span class="token punctuation">.</span>valName<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>
        valPasswd <span class="token operator">=</span> self<span class="token punctuation">.</span>valPasswd<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> valName <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token keyword">or</span> valPasswd <span class="token operator">==</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>SetActState<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">&quot;Input Error: Empty input&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">elif</span> valName <span class="token keyword">in</span> self<span class="token punctuation">.</span>userData <span class="token punctuation">:</span>
            <span class="token keyword">if</span> self<span class="token punctuation">.</span>userData<span class="token punctuation">[</span>valName<span class="token punctuation">]</span> <span class="token operator">==</span> valPasswd<span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>SetActState<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">&quot;Login successfully&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>SetActState<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">&quot;Login Error: Wrong passwd&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>SetActState<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">&quot;Login Error: Name does not exist&quot;</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>valName<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>valPasswd<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>

    <span class="token keyword">def</span> <span class="token function">CmdRegist</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        valName <span class="token operator">=</span> self<span class="token punctuation">.</span>valName<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>
        valPasswd <span class="token operator">=</span> self<span class="token punctuation">.</span>valPasswd<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> valName <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token keyword">or</span> valPasswd <span class="token operator">==</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>SetActState<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">&quot;Input Error: Empty input&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">elif</span> valName <span class="token keyword">in</span> self<span class="token punctuation">.</span>userData <span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>SetActState<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">&quot;Reigst Error: Name already used&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>userData<span class="token punctuation">[</span>valName<span class="token punctuation">]</span> <span class="token operator">=</span> valPasswd
            self<span class="token punctuation">.</span>SetActState<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">&quot;Regist successfully&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>

    <span class="token keyword">def</span> <span class="token function">Valid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        res <span class="token operator">=</span> self<span class="token punctuation">.</span>validPattern<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> res <span class="token keyword">and</span> res<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">True</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
    
    <span class="token keyword">def</span> <span class="token function">CmdInvalid</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>SetActState<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">&quot;Input Error: Invalid Input&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>

root <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>

lfLoginPlane <span class="token operator">=</span> tk<span class="token punctuation">.</span>LabelFrame<span class="token punctuation">(</span>root<span class="token punctuation">,</span>
                             text <span class="token operator">=</span> <span class="token string">&quot;Login Plane&quot;</span><span class="token punctuation">)</span>
lfLoginPlane<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>commonPad<span class="token punctuation">,</span> side <span class="token operator">=</span> tk<span class="token punctuation">.</span>TOP<span class="token punctuation">,</span> anchor <span class="token operator">=</span> tk<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span>
LoginPlane<span class="token punctuation">(</span>lfLoginPlane<span class="token punctuation">)</span>

root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function en(sn,on){const s=c("ExternalLinkIcon");return l(),i("div",null,[d,n("blockquote",null,[n("p",null,[a("主要参考教程 "),n("a",u,[a("https://blog.csdn.net/qq_48979387/article/details/125706562"),o(s)])])]),r,n("p",null,[a("使用组件属性 "),k,a(" 设置文字颜色"),h,a(" 属性值为字符串, 可以是 "),b,a(", 或常用的颜色单词, 可参考 "),n("a",m,[a("https://blog.csdn.net/qq_48979387/article/details/126447139"),o(s)])]),v,n("ul",null,[f,n("li",null,[E,a(" 组件详情 "),n("ul",null,[n("li",null,[a("对于 "),g,a(" 事件, 参考 "),n("a",B,[a("https://tcl.tk/man/tcl8.6/TkCmd/keysyms.htm"),o(s)])]),x])]),A]),w,n("p",null,[a("参考 "),n("a",y,[a("https://matplotlib.org/stable/gallery/user_interfaces/embedding_in_tk_sgskip.html"),o(s)])]),_,n("ul",null,[q,n("li",null,[a("组件的"),F,a("变为 "),n("ul",null,[N,T,C,n("li",null,[S,a(" 组件样式 (最大变化, 组件的样式通过这一选项确定, 具体见"),n("a",L,[a("官方文档"),o(s)]),a(")")])])])]),P,n("p",null,[a("使用成员函数 "),I,a(" 可删除指定行"),D,a(" 特别的, "),R,a(" 可删除所有行 (其中 "),O,a(" 为 "),n("a",M,[a("splat 运算符"),o(s)]),a(")")]),V,n("p",null,[a("对于 ttkbootstrap 的根窗口需要使用 "),z,a(" 创建"),W,a(" 其中参数 "),X,a(" 决定了整体主题, 可参考 "),n("a",H,[a("https://ttkbootstrap.readthedocs.io/en/latest/zh/themes"),o(s)]),G,a(" 常用的有")]),U,n("p",null,[a("参考 "),n("a",Z,[a("https://ttkbootstrap.readthedocs.io/en/latest/zh/api/toast/#toastnotification"),o(s)])]),K,n("p",null,[a("参考 "),n("a",Y,[a("https://ttkbootstrap.readthedocs.io/en/latest/zh/api/tooltip/"),o(s)])]),j,n("p",null,[a("参考 "),n("a",Q,[a("https://ttkbootstrap.readthedocs.io/en/latest/zh/api/dialogs/messagebox/#ttkbootstrap.dialogs.dialogs.Messagebox"),o(s)])]),J,n("p",null,[a("参考 "),n("a",$,[a("https://ttkbootstrap.readthedocs.io/en/latest/zh/api/localization/"),o(s)]),nn,a(" 暂不介绍")]),an])}const ln=t(p,[["render",en],["__file","tk.html.vue"]]);export{ln as default};
