import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-8c5ce49e.js";const p={},t=e(`<h1 id="effective-c-笔记" tabindex="-1"><a class="header-anchor" href="#effective-c-笔记" aria-hidden="true">#</a> Effective C++ 笔记</h1><blockquote><p>主要参考书籍 Effective C++</p></blockquote><h2 id="个人笔记" tabindex="-1"><a class="header-anchor" href="#个人笔记" aria-hidden="true">#</a> 个人笔记</h2><h3 id="定义头文件避免多次包含" tabindex="-1"><a class="header-anchor" href="#定义头文件避免多次包含" aria-hidden="true">#</a> 定义头文件避免多次包含</h3><p>在头文件中使用如下宏, 避免多次包含</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">LIBRARY</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LIBRARY</span></span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//头文件</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-std-set-时注意" tabindex="-1"><a class="header-anchor" href="#使用-std-set-时注意" aria-hidden="true">#</a> 使用 std::set 时注意</h3><p>使用 <code>set</code> 时, 由于 <code>set</code> 通过黑红树的比较实现 内部元素的大小关系不能改变 因此不能使用 <code>iterator</code> 修改 <code>set</code> 内的元素 如果要修改 <code>set</code> 内的元素, 可以使用以下方案</p><ol><li>改用 <code>std::map</code></li><li>将被修改的成员设为 <code>mutable</code>, 通过 <code>const</code> 成员函数修改</li></ol><h2 id="第-1-章" tabindex="-1"><a class="header-anchor" href="#第-1-章" aria-hidden="true">#</a> 第 1 章</h2><h3 id="使用-const-enum-inline-替换-define" tabindex="-1"><a class="header-anchor" href="#使用-const-enum-inline-替换-define" aria-hidden="true">#</a> 使用 const, enum, inline 替换 #define</h3><h4 id="常量字符串" tabindex="-1"><a class="header-anchor" href="#常量字符串" aria-hidden="true">#</a> 常量字符串</h4><p>定义一个常量字符串 <code>str</code><br><code>const char* str = &quot;something&quot;;</code><br><code>const char*</code> 仅保证 <code>str</code> 所指向的内容不能被修改, 但 <code>str</code> 仍可能被修改<br> 需要使用 <code>const char *const str = &quot;something&quot;;</code><br> 保证 <code>str</code> 储存的地址也不会被修改<br> 更好的方法:<br> 使用 <code>const std::string str(&quot;something&quot;);</code></p><h4 id="类专属常量" tabindex="-1"><a class="header-anchor" href="#类专属常量" aria-hidden="true">#</a> 类专属常量</h4><ul><li><code>static const</code></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">exam</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//类内定义(可能不支持)</span>
    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> num2<span class="token punctuation">;</span><span class="token comment">//类外定义</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> exam<span class="token double-colon punctuation">::</span>num2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>enum</code></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">exam</span>
<span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">enum</span><span class="token punctuation">{</span>num3 <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>enum</code> 只能用于 整形常量, 但无法获取地址, 更类似 #define</p><h4 id="使用内联函数代替宏" tabindex="-1"><a class="header-anchor" href="#使用内联函数代替宏" aria-hidden="true">#</a> 使用内联函数代替宏</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MAX_DEF</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> a <span class="token operator">&gt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b</span></span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">inline</span> T<span class="token operator">&amp;</span> <span class="token function">MAX_INLINE</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> T <span class="token operator">&amp;</span>b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">&gt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-const" tabindex="-1"><a class="header-anchor" href="#使用-const" aria-hidden="true">#</a> 使用 const</h3><h4 id="限定内容辨析" tabindex="-1"><a class="header-anchor" href="#限定内容辨析" aria-hidden="true">#</a> 限定内容辨析</h4><ul><li><code>const char* str</code> 由于 <code>*</code> 前表明了类型为 <code>const char</code>, 以此表明限定指针指向的内容为常量</li><li><code>char* const str</code> 由于 <code>*</code> 前表明了类型为 <code>char</code>, 变量名使用了 <code>const</code> 修饰, 以此表明限定指针指向的内容为变量, 但指针本身为常量</li><li><code>const char* const str</code> 组合两者, 既表明指向 <code>const char</code>, 也表明指针为常量</li></ul><h4 id="stl-迭代器-与-const" tabindex="-1"><a class="header-anchor" href="#stl-迭代器-与-const" aria-hidden="true">#</a> STL 迭代器 与 const</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//表示 it 不能被改变</span>
<span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//表示 it 可以被改变, 但it指向的内容不可以被改变</span>
std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="返回-const" tabindex="-1"><a class="header-anchor" href="#返回-const" aria-hidden="true">#</a> 返回 const</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> exam <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">const</span> exam<span class="token operator">&amp;</span> l<span class="token punctuation">,</span> <span class="token keyword">const</span> exam<span class="token operator">&amp;</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过返回 <code>const</code> 值, 可以避免 <code>fun(a, b) = c;</code> 通过编译</p><h4 id="const-成员函数" tabindex="-1"><a class="header-anchor" href="#const-成员函数" aria-hidden="true">#</a> const 成员函数</h4><ul><li>编写 <code>const</code> 成员函数 可以重载 <code>non-const</code> 成员函数 <code>const</code> 类型的变量常用于 <code>const &amp;</code> 传参, 因此编写 <code>const</code> 成员函数十分重要</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">char</span><span class="token operator">&amp;</span> operatror<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//const成员必须返回const char&amp;, 避免潜在的修改const变量的风险</span>
<span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">&amp;</span> operatror<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t pos<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于中间变量可以使用 <code>mutable</code> 修饰</p><ul><li>重载 <code>const</code> 与 <code>non-const</code> 版本的函数<br> 在编写这两个函数时, 不应该完全重新写一遍, 而要注意代码重用</li></ul><h3 id="初始化对象-变量" tabindex="-1"><a class="header-anchor" href="#初始化对象-变量" aria-hidden="true">#</a> 初始化对象/变量</h3><ul><li>在定义了一个变量后必须立即初始化</li><li>在构造函数中使用初始化列表 <ul><li>当成员为类时, 如果不使用初始化列表, 将会先调用其默认构造函数数, 导致效率低下</li><li>如果必须在函数体中为成员赋值, 也应该在初始化列表中使用默认的初始化数 eg. <code>exam::exam():menber(){}</code></li><li>由于初始化一定是按成员定义的顺序进行, 因此初始化列表有必要按成员定义的顺序排列</li></ul></li><li>由于类内的 <code>static</code> 初始化与使用发生在不同源文件中, 被调用时可能仍未初始化, 因此应使用成员函数内的 <code>static</code> 变量模拟, 保证其初始化 eg.</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">example</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> <span class="token function">static_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">static</span> string str<span class="token punctuation">;</span>
        <span class="token keyword">return</span> str<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第-2-章" tabindex="-1"><a class="header-anchor" href="#第-2-章" aria-hidden="true">#</a> 第 2 章</h2><h3 id="注意c-默认编写并调用的函数" tabindex="-1"><a class="header-anchor" href="#注意c-默认编写并调用的函数" aria-hidden="true">#</a> 注意C++默认编写并调用的函数</h3><p>定义一个类后, 如果没有声明以下函数, 编译器将会自动生成</p><ol><li>默认构造函数</li><li>拷贝构造函数</li><li>构析函数</li><li><code>operator=</code></li></ol><ul><li>当类中有这些函数的声明时, 将不会自动生成</li><li>如果类中有引用成员或常量成员, 2, 4将不会自动生成(引用与常量无法修改)</li><li>当类使用动态内存时, 务必主动定义这四个被默认创建的函数</li></ul><h3 id="拒绝使用编译器自动生成的函数" tabindex="-1"><a class="header-anchor" href="#拒绝使用编译器自动生成的函数" aria-hidden="true">#</a> 拒绝使用编译器自动生成的函数</h3><h4 id="声明为-private-但不实现" tabindex="-1"><a class="header-anchor" href="#声明为-private-但不实现" aria-hidden="true">#</a> 声明为 private 但不实现</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">example</span>
<span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    example<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> example<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">example</span><span class="token punctuation">(</span><span class="token keyword">const</span> example<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过声明, 从而阻止自动生成; 通过将其作为 <code>private</code> 成员, 从而阻止外部调用<br> 只声明不定义, 仍可能在友元中调用并导致链接错误, 但影响不大</p><h4 id="定义基类-uncopyable" tabindex="-1"><a class="header-anchor" href="#定义基类-uncopyable" aria-hidden="true">#</a> 定义基类 Uncopyable</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Uncopyable</span>
<span class="token punctuation">{</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
    <span class="token function">Uncopyable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">Uncopyable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token function">Uncopyable</span><span class="token punctuation">(</span><span class="token keyword">const</span> Uncopyable<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Uncopyable<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Uncopyable<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过继承 <code>Uncopyable</code>, 可以保证类的拷贝构造函数与 <code>=</code> 运算符不被使用</p><h3 id="为基类声明虚析构函数" tabindex="-1"><a class="header-anchor" href="#为基类声明虚析构函数" aria-hidden="true">#</a> 为基类声明虚析构函数</h3><ol><li>抽象基类指针通常用于指向派生类, 如果析构函数不是虚函数, 将导致派生类无法被正确析构, 导致内存泄露</li><li>派生时, 必须保证所有基类都有一个虚析构函数, 如 stl 中大部分容器都没有虚析构函数, 因此不能将其作为基类</li><li>如果类中没有虚函数(无多态), 则不应该有虚基类, 否则将导致无效的内存消耗(额外的空间存储虚函数列表)</li></ol><h3 id="不在析构函数中抛出异常" tabindex="-1"><a class="header-anchor" href="#不在析构函数中抛出异常" aria-hidden="true">#</a> 不在析构函数中抛出异常</h3><p>构析函数常用于释放内存, 一旦在析构函数中抛出异常, 将导致内存无法被完全释放, 从而导致内存泄漏<br> 因此需要提前捕获所有异常, 注意所有可能抛出异常的函数都要捕获<br> eg.</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token class-name">example</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//可能发生异常的部分1</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token comment">//方法1: 捕获所有异常</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//捕获异常后, 提前结束程序</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//可能发生异常的部分2</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token comment">//捕获所有异常</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//方法2: 解决异常并释放内存</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="不在析构-构造函数中调用-virtual-函数" tabindex="-1"><a class="header-anchor" href="#不在析构-构造函数中调用-virtual-函数" aria-hidden="true">#</a> 不在析构/构造函数中调用 virtual 函数</h3><p>派生类的构造函数中会首先调用基类的构造函数; 析构函数中会最后调用基类的析构函数<br> 派生类调用基类的函数时, 认为是派生类在调用, 因此如果基类的构造/析构函数中有虚函数, 将会调用派生类的版本<br> 如果派生类的版本中使用了非派生的成员, 必定未初始化, 这将导致结果不可预知<br> 注意, 不仅是不能调用虚函数, 还包括调用使用了虚函数的成员函数<br> eg.</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">example</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//将隐式调用虚函数fun, 仍将导致危险</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="部分情况的替代方案" tabindex="-1"><a class="header-anchor" href="#部分情况的替代方案" aria-hidden="true">#</a> 部分情况的替代方案</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">example</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">CreateLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;base create&quot;</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">CreateLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">child</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">example</span></span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">CreateLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;child create&quot;</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token function">child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">CreateLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>改为</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">example</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Log</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> log<span class="token punctuation">)</span><span class="token punctuation">{</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> log<span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">&quot;base create&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">child</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">example</span></span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">example</span><span class="token punctuation">(</span><span class="token string">&quot;child create&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="operator-返回-this" tabindex="-1"><a class="header-anchor" href="#operator-返回-this" aria-hidden="true">#</a> operator= 返回 *this</h3><p>为了实现连续赋值, <code>=</code> 运算符应返回一个 <code>=</code> 左侧的引用<br> 对于 <code>+=</code>, <code>*=</code> 等也应该有同样的操作</p><h3 id="安全的-operator" tabindex="-1"><a class="header-anchor" href="#安全的-operator" aria-hidden="true">#</a> 安全的 operator=</h3><p>不安全示例</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">example</span>
<span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> str<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    example<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> example<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//不安全</span>
example<span class="token operator">&amp;</span> example<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> example<span class="token operator">&amp;</span> obj<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">delete</span> str<span class="token punctuation">;</span>
    str <span class="token operator">=</span> <span class="token keyword">new</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token operator">*</span>obj<span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自我赋值安全性" tabindex="-1"><a class="header-anchor" href="#自我赋值安全性" aria-hidden="true">#</a> 自我赋值安全性</h4><p>如果使用不安全的例子 当自我赋值时, <code>str</code> 与 <code>obj.str</code> 指向同一块内存<br> 如果 <code>delete str</code>, <code>obj.str</code> 将指向一个已删除的对象<br> 导致 <code>new std::string(*obj.str);</code> 出错</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>example<span class="token operator">&amp;</span> example<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> example<span class="token operator">&amp;</span> obj<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 先逐个判断是否使用同一个内存</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">!=</span> obj<span class="token punctuation">.</span>str<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">delete</span> str<span class="token punctuation">;</span>
        str <span class="token operator">=</span> <span class="token keyword">new</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token operator">*</span>obj<span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>   
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="异常安全性" tabindex="-1"><a class="header-anchor" href="#异常安全性" aria-hidden="true">#</a> 异常安全性</h4><p>如果使用不安全的例子<br> 当 <code>new std::string(*obj.str);</code> 发生异常, 构析函数将提前结束<br> 对于 <code>str = new std::string(*obj.str); </code> 先执行 <code>new std::string(*obj.str);</code> 再将地址赋给 <code>str</code><br> 当 <code>new std::string(*obj.str);</code> 发生异常<br> 不会执行赋值<br> 此时 <code>str</code> 储存的地址不会变, 将指向一个已删除的对象</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>example<span class="token operator">&amp;</span> example<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> example<span class="token operator">&amp;</span> obj<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 使用一个临时的变量保存旧的地址</span>
    std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> tmpPtr <span class="token operator">=</span> str<span class="token punctuation">;</span>
    <span class="token comment">// 即使发生异常, str 仍将指向旧的对象</span>
    str <span class="token operator">=</span> <span class="token keyword">new</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token operator">*</span>obj<span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">delete</span> tmpPtr<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当使用上述方案时, 自我赋值安全性也将得到保障, 但当自我赋值时仍将导致额外的消耗</p><h4 id="结合方案" tabindex="-1"><a class="header-anchor" href="#结合方案" aria-hidden="true">#</a> 结合方案</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>example<span class="token operator">&amp;</span> example<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> example<span class="token operator">&amp;</span> obj<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 此处直接比较两个对象是否是同一个对象</span>
    <span class="token comment">// 无法避免指向同一对象的成员的自我赋值</span>
    <span class="token comment">// 但避免逐个比较, 效率更高</span>
    <span class="token comment">// 且通过解决异常安全性避免指向同一对象的成员的自我赋值</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!=</span> <span class="token operator">&amp;</span>obj<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> tmpPtr <span class="token operator">=</span> str<span class="token punctuation">;</span>
        str <span class="token operator">=</span> <span class="token keyword">new</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token operator">*</span>obj<span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">delete</span> tmpPtr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意, 对于每一个指针成员, 都应该使用此方法</p><h4 id="特殊方案" tabindex="-1"><a class="header-anchor" href="#特殊方案" aria-hidden="true">#</a> 特殊方案</h4><p>假设 <code>example</code> 有成员 <code>swap(const example&amp; obj)</code> 可以交换 <code>obj</code> 与 <code>this</code></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>example<span class="token operator">&amp;</span> example<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> example<span class="token operator">&amp;</span> obj<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!=</span> <span class="token operator">&amp;</span>obj<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        example <span class="token function">tmp</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//此时 tmp 保存了旧的 this, 并在最后被析构 </span>
        <span class="token function">swap</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="复制每一个成员" tabindex="-1"><a class="header-anchor" href="#复制每一个成员" aria-hidden="true">#</a> 复制每一个成员</h3><p>对于两类复制函数 <code>operator=()</code> 与 复制构造函数需要特别注意</p><h4 id="类中的所有成员" tabindex="-1"><a class="header-anchor" href="#类中的所有成员" aria-hidden="true">#</a> 类中的所有成员</h4><p>逐一检查类中的所有成员是否被复制</p><h4 id="基类中的成员" tabindex="-1"><a class="header-anchor" href="#基类中的成员" aria-hidden="true">#</a> 基类中的成员</h4><ul><li>复制构造函数<br> 注意调用基类的复制构造函数, 否则将调用基类的默认构造函数</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>example<span class="token double-colon punctuation">::</span><span class="token function">example</span><span class="token punctuation">(</span><span class="token keyword">const</span> example<span class="token operator">&amp;</span> obj<span class="token punctuation">)</span><span class="token operator">:</span>
<span class="token function">member</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>member<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token function">base</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token comment">//将复制来源作为参数初始化基类</span>
<span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>operator=()</code></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>example<span class="token operator">&amp;</span> example<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> example<span class="token operator">&amp;</span> obj<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//注意调用基类的 = 以对基类成员赋值</span>
    base<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    member <span class="token operator">=</span> obj<span class="token punctuation">.</span>member<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第-3-章" tabindex="-1"><a class="header-anchor" href="#第-3-章" aria-hidden="true">#</a> 第 3 章</h2><h3 id="使用对象-智能指针管理动态内存" tabindex="-1"><a class="header-anchor" href="#使用对象-智能指针管理动态内存" aria-hidden="true">#</a> 使用对象/智能指针管理动态内存</h3><p>对于函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">bool</span> flag1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> flag2 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    example<span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">//以下两种情况将导致ptr指向的资源不能正常释放</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>flag1<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>flag2<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">delete</span> ptr<span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>利用构析函数必定会在 <code>throw</code> / <code>return</code> 后执行的特性 通过类管理动态内存, 从而保证动态内存的正确释放 即在构造函数中申请内存, 在析构函数中释放内存</p><h3 id="注意动态内存管理类的复制行为" tabindex="-1"><a class="header-anchor" href="#注意动态内存管理类的复制行为" aria-hidden="true">#</a> 注意动态内存管理类的复制行为</h3><p>在编写动态内存管理类时</p><ol><li>禁止复制 将 <code>Uncopyable</code> 作为基类</li><li>采用引用计数<br> 如 <code>std::shared_ptr</code></li><li>复制底部资源</li><li>转移指向对象的所有权<br> 如 <code>std::unique_ptr</code></li></ol><h3 id="动态内存管理类中提供对原始资源的访问" tabindex="-1"><a class="header-anchor" href="#动态内存管理类中提供对原始资源的访问" aria-hidden="true">#</a> 动态内存管理类中提供对原始资源的访问</h3><p>由于可能有大量 api 使用原始资源的指针为参数<br> 因此需要提供对原始资源的访问<br> 通常为成员函数 <code>get()</code><br> 不应该编写隐式转换函数, 这将导致风险</p><h3 id="使用相同形式的-new-与-delete" tabindex="-1"><a class="header-anchor" href="#使用相同形式的-new-与-delete" aria-hidden="true">#</a> 使用相同形式的 new 与 delete</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>string strarr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//对数组使用typedef, 应在别名处规定长度</span>

std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> ptr1 <span class="token operator">=</span> <span class="token keyword">new</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> ptr2 <span class="token operator">=</span> <span class="token keyword">new</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> ptr3 <span class="token operator">=</span> <span class="token keyword">new</span> strarr<span class="token punctuation">;</span><span class="token comment">//即std::string[4]</span>

<span class="token comment">//不能使用delete[], 否则将导致错误</span>
<span class="token keyword">delete</span> ptr1<span class="token punctuation">;</span>
<span class="token comment">//不能使用delete, 否则只有第一个元素被释放</span>
<span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ptr2<span class="token punctuation">;</span>
<span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ptr3<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于std中的智能指针, 默认使用 <code>delete</code>, 而不是 <code>delete[]</code><br> 因此智能指针不能直接用于数组<br> 应采用 <code>std::vector</code> 或 <code>std::string</code></p>`,101),o=[t];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","effective cpp.html.vue"]]);export{r as default};
