import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as o,b as n,d as s,a as e,e as i}from"./app-8c5ce49e.js";const l={},u=n("h1",{id:"stm32-cmake-项目配置",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#stm32-cmake-项目配置","aria-hidden":"true"},"#"),s(" STM32 CMake 项目配置")],-1),d=n("br",null,null,-1),r={href:"https://zhuanlan.zhihu.com/p/642899924",target:"_blank",rel:"noopener noreferrer"},k=n("br",null,null,-1),m={href:"https://zhuanlan.zhihu.com/p/661281743",target:"_blank",rel:"noopener noreferrer"},v=i(`<h2 id="必要工具链" tabindex="-1"><a class="header-anchor" href="#必要工具链" aria-hidden="true">#</a> 必要工具链</h2><ol><li>gcc-arm-none-eabi</li><li>OpenOCD</li><li>VScode 插件 Cmake Tools</li><li>Vscode 插件 Cortex-Debug</li></ol><h2 id="初始操作" tabindex="-1"><a class="header-anchor" href="#初始操作" aria-hidden="true">#</a> 初始操作</h2><p>通过 CubeMX 生成一个新的 STM32 项目</p><h2 id="cmakelists-配置" tabindex="-1"><a class="header-anchor" href="#cmakelists-配置" aria-hidden="true">#</a> CMakeLists 配置</h2><h3 id="基本路径配置" tabindex="-1"><a class="header-anchor" href="#基本路径配置" aria-hidden="true">#</a> 基本路径配置</h3><p>将这些基本配置置于文件 <code>config.cmake</code> 中</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token comment"># 设置 arm-none-eabi 工具链地址</span>
<span class="token keyword">set</span><span class="token punctuation">(</span>TOOLCHAIN_PATH D:/code_env/gcc-arm-none-eabi-<span class="token number">10.3</span>-<span class="token number">2021.10</span>/bin<span class="token punctuation">)</span>

<span class="token comment"># OpenOCD 路径</span>
<span class="token keyword">set</span><span class="token punctuation">(</span>OpenOCDPath <span class="token string">&quot;D:\\\\code\\\\star\\\\res\\\\openocd 0.12.0-rc2\\\\bin\\\\openocd.exe&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 烧录器配置路径</span>
<span class="token keyword">set</span><span class="token punctuation">(</span>OpenOCPInterface <span class="token string">&quot;D:\\\\code\\\\star\\\\res\\\\openocd 0.12.0-rc2\\\\share\\\\openocd\\\\scripts\\\\interface\\\\cmsis-dap.cfg&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 目标芯片路径</span>
<span class="token keyword">set</span><span class="token punctuation">(</span>OpenOCPTarget <span class="token string">&quot;D:\\\\code\\\\star\\\\res\\\\openocd 0.12.0-rc2\\\\share\\\\openocd\\\\scripts\\\\target\\\\stm32f1x.cfg&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># cube 自动生成的 .ld 链接脚本 </span>
<span class="token keyword">set</span><span class="token punctuation">(</span>LINK_SCRIPT <span class="token punctuation">\${</span><span class="token variable">CMAKE_SOURCE_DIR</span><span class="token punctuation">}</span>/STM32F103C8Tx_FLASH.ld<span class="token punctuation">)</span> 

<span class="token comment"># -mcpu= 根据芯片特点设置 (可参考自动生成的 Makefile 中的 CPU 与 MCU 配置)</span>
<span class="token comment"># -mfloat-abi=hard -mfpu=fpv4-sp-d16 用于开启浮点计算单元 FPU 的芯片 (通常为 stm32f4xx, 可参考自动生成的 Makefile 中的 FPU 配置)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span>MPU_FLAG <span class="token string">&quot;-mcpu=cortex-m3 -mthumb&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 预定义宏 (可参考自动生成的 Makefile 中的 C_DEFS 配置)</span>
<span class="token keyword">add_definitions</span><span class="token punctuation">(</span>
    -DUSE_HAL_DRIVER
    -DSTM32F103xB
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="工具链基本配置" tabindex="-1"><a class="header-anchor" href="#工具链基本配置" aria-hidden="true">#</a> 工具链基本配置</h3><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token comment"># 引入基本配置</span>
<span class="token keyword">include</span><span class="token punctuation">(</span>config.cmake<span class="token punctuation">)</span>

<span class="token comment"># 指定编译平台/架构与语言标准, 推荐指定 Ninja 为构建工具,可以加快编译速度(相比make)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_SYSTEM_NAME</span> Generic<span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_SYSTEM_PROCESSOR</span> arm<span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_TRY_COMPILE_TARGET_TYPE</span> STATIC_LIBRARY<span class="token punctuation">)</span>

<span class="token comment"># 指定工具链</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_C_COMPILER_FORCED</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span> <span class="token comment"># skip compiler test</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_COMPILER_FORCED</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span>

<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_C_COMPILER</span> <span class="token punctuation">\${</span>TOOLCHAIN_PATH<span class="token punctuation">}</span>/arm-none-eabi-gcc.exe<span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_COMPILER</span> <span class="token punctuation">\${</span>TOOLCHAIN_PATH<span class="token punctuation">}</span>/arm-none-eabi-g++.exe<span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_ASM_COMPILER</span> <span class="token punctuation">\${</span>TOOLCHAIN_PATH<span class="token punctuation">}</span>/arm-none-eabi-gcc.exe<span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_LINKER</span> <span class="token punctuation">\${</span>TOOLCHAIN_PATH<span class="token punctuation">}</span>/arm-none-eabi-ld.exe<span class="token punctuation">)</span> <span class="token comment"># 根据知乎介绍补充</span>

<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_OBJCOPY</span> <span class="token punctuation">\${</span>TOOLCHAIN_PATH<span class="token punctuation">}</span>/arm-none-eabi-objcopy.exe<span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_OBJDUMP</span> <span class="token punctuation">\${</span>TOOLCHAIN_PATH<span class="token punctuation">}</span>/arm-none-eabi-objdump.exe<span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span>SIZE <span class="token punctuation">\${</span>TOOLCHAIN_PATH<span class="token punctuation">}</span>/arm-none-eabi-size.exe<span class="token punctuation">)</span> 
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_AR</span> <span class="token punctuation">\${</span>TOOLCHAIN_PATH<span class="token punctuation">}</span>/arm-none-eabi-ar.exe<span class="token punctuation">)</span>

<span class="token comment"># 设置特定的编译和链接标志</span>

<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_C_FLAGS</span> <span class="token punctuation">\${</span>MPU_FLAG<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_FLAGS</span> <span class="token punctuation">\${</span>MPU_FLAG<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_EXE_LINKER_FLAGS</span> -T<span class="token punctuation">\${</span>LINK_SCRIPT<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="项目配置" tabindex="-1"><a class="header-anchor" href="#项目配置" aria-hidden="true">#</a> 项目配置</h3><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token comment"># 项目配置</span>
<span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.22</span><span class="token punctuation">)</span>

<span class="token comment"># 填入项目名称</span>
<span class="token keyword">project</span><span class="token punctuation">(</span>... C CXX ASM<span class="token punctuation">)</span> 

<span class="token comment"># 标准设置</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_STANDARD</span> <span class="token number">11</span><span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_C_STANDARD</span> <span class="token number">11</span><span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_EXPORT_COMPILE_COMMANDS</span> <span class="token boolean">ON</span><span class="token punctuation">)</span> 

<span class="token comment"># 编译选项, 参考可 arm-none-eabi-gcc 的参数文档</span>
<span class="token keyword">add_compile_options</span><span class="token punctuation">(</span>-pipe -Wall -Werror -fmessage-length=<span class="token number">0</span> <span class="token comment"># basic options</span>
                    -ffunction-sections -fdata-sections -fno-common <span class="token comment"># optimize options </span>
                    <span class="token punctuation">)</span>

<span class="token keyword">add_link_options</span><span class="token punctuation">(</span>-pipe <span class="token comment"># 加速编译执行</span>
                -lc -lstdc++ -lm -lnosys <span class="token comment"># lib options</span>
                -flto -specs=nosys.specs <span class="token comment"># optimize options</span>
                -specs=nano.specs -Wl,-Map=<span class="token punctuation">\${</span><span class="token variable">PROJECT_BINARY_DIR</span><span class="token punctuation">}</span>/<span class="token punctuation">\${</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">}</span>.map -Wl,--cref -Wl,--gc-sections <span class="token comment"># 来自自动生成的 MakeFile</span>
                -Wl,--print-memory-usage <span class="token comment"># 打印内存使用</span>
                <span class="token punctuation">)</span> <span class="token comment"># if your executable is too large , try option &#39;-s&#39; to strip symbols</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="生成与链接配置" tabindex="-1"><a class="header-anchor" href="#生成与链接配置" aria-hidden="true">#</a> 生成与链接配置</h3><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token comment"># 配置汇编文件</span>
<span class="token keyword">set</span><span class="token punctuation">(</span>ASM_SOURCES startup_stm32f103xb.s<span class="token punctuation">)</span>
<span class="token keyword">set_source_files_properties</span><span class="token punctuation">(</span><span class="token punctuation">\${</span>ASM_SOURCES<span class="token punctuation">}</span> <span class="token namespace">PROPERTIES</span> <span class="token property">COMPILE_FLAGS</span> <span class="token string">&quot;-x assembler-with-cpp&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 匹配所有 c 源文件</span>
<span class="token keyword">file</span><span class="token punctuation">(</span>GLOB_RECURSE <span class="token property">SOURCES</span>
    <span class="token string">&quot;Drivers/*.c&quot;</span>
    <span class="token string">&quot;Core/*.c&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 包含目录</span>
<span class="token keyword">include_directories</span><span class="token punctuation">(</span>Core/inc<span class="token punctuation">)</span>
<span class="token keyword">include_directories</span><span class="token punctuation">(</span>Drivers/CMSIS/Include<span class="token punctuation">)</span>
<span class="token keyword">include_directories</span><span class="token punctuation">(</span>Drivers/CMSIS/Device/ST/STM32F1xx/Include<span class="token punctuation">)</span>
<span class="token keyword">include_directories</span><span class="token punctuation">(</span>Drivers/STM32F1xx_HAL_Driver/Inc/Legacy<span class="token punctuation">)</span>
<span class="token keyword">include_directories</span><span class="token punctuation">(</span>Drivers/STM32F1xx_HAL_Driver/Inc<span class="token punctuation">)</span>

<span class="token comment"># 生成 elf 文件</span>
<span class="token keyword">add_executable</span><span class="token punctuation">(</span><span class="token punctuation">\${</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">}</span>.elf  <span class="token punctuation">\${</span><span class="token property">SOURCES</span><span class="token punctuation">}</span> <span class="token punctuation">\${</span>ASM_SOURCES<span class="token punctuation">}</span> <span class="token punctuation">\${</span>LINK_SCRIPT<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="生成后操作" tabindex="-1"><a class="header-anchor" href="#生成后操作" aria-hidden="true">#</a> 生成后操作</h3><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">add_custom_command</span><span class="token punctuation">(</span>
    <span class="token comment"># 在目标建立完成后操作</span>
    TARGET <span class="token punctuation">\${</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">}</span>.elf POST_BUILD
    COMMENT <span class="token string">&quot;EXCUTABLE SIZE:&quot;</span>
    COMMAND <span class="token punctuation">\${</span>SIZE<span class="token punctuation">}</span> <span class="token punctuation">\${</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">}</span>.elf
    <span class="token comment"># 编译后自动通过 OpenOCD 下载</span>
    COMMENT <span class="token string">&quot;Auto Download by OpenOCD:&quot;</span>
    COMMAND <span class="token punctuation">\${</span>OpenOCDPath<span class="token punctuation">}</span> -f<span class="token string">&quot;<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">OpenOCPInterface</span><span class="token punctuation">}</span></span>&quot;</span> -f<span class="token string">&quot;<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">OpenOCPTarget</span><span class="token punctuation">}</span></span>&quot;</span> -c<span class="token string">&quot;program <span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">}</span></span>.elf verify reset exit&quot;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vscode-插件配置" tabindex="-1"><a class="header-anchor" href="#vscode-插件配置" aria-hidden="true">#</a> vscode 插件配置</h2><h3 id="cortex-debug" tabindex="-1"><a class="header-anchor" href="#cortex-debug" aria-hidden="true">#</a> Cortex-Debug</h3><ol><li>在插件配置中确定 gcc-arm-none-eabi 与 OpenOCD 的路径</li><li>通过运行和调试选项, 新建 <code>launch.json</code> 文件</li><li>选择添加配置 <code>Cortex Debug</code></li><li>在 <code>configFiles</code> 属性中输入 OpenOCD 所需的 interface 与 target 配置文件路径</li><li>在 <code>excutable</code> 属性中输入 <code>\${command:cmake.launchTargetPath}</code> 将调试文件与 Cmake Tools 插件的目标关联</li><li>完成配置后, 可通过运行和调试选项对程序进行调试</li></ol><h2 id="vcpkg" tabindex="-1"><a class="header-anchor" href="#vcpkg" aria-hidden="true">#</a> vcpkg</h2><p>当需要使用 vcpkg 时配置<br> 要求安装 vcpkg</p><h3 id="清单模式配置" tabindex="-1"><a class="header-anchor" href="#清单模式配置" aria-hidden="true">#</a> 清单模式配置</h3><p>清单模式下, 在 <code>vcpkg-configuration.json</code> 中添加配置, 设置自定义 triplet 的目录<br><code>&quot;overlay-triplets&quot;: [&quot;./toolchain&quot;]</code></p><p>然后在 <code>toolchain</code> 文件夹中新建自定义 triplet 文件 <code>arm-stm32.cmake</code><br> 同时在 <code>CMakeLists.txt</code> 中使用命令采用该 triplet<br><code>set(VCPKG_TARGET_TRIPLET arm-stm32)</code></p><h3 id="triplet-配置" tabindex="-1"><a class="header-anchor" href="#triplet-配置" aria-hidden="true">#</a> triplet 配置</h3><p>在 <code>arm-stm32.cmake</code> 中配置</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">set</span><span class="token punctuation">(</span>VCPKG_TARGET_ARCHITECTURE arm<span class="token punctuation">)</span>
<span class="token comment"># 单片机程序的链接性必定为 static</span>
<span class="token keyword">set</span><span class="token punctuation">(</span>VCPKG_CRT_LINKAGE static<span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span>VCPKG_LIBRARY_LINKAGE static<span class="token punctuation">)</span>

<span class="token comment"># 工具链文件, 注意要使用绝对路径</span>
<span class="token keyword">set</span><span class="token punctuation">(</span>VCPKG_CHAINLOAD_TOOLCHAIN_FILE <span class="token string">&quot;...\\\\toolchain\\\\toolchain.cmake&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="toolchain-配置" tabindex="-1"><a class="header-anchor" href="#toolchain-配置" aria-hidden="true">#</a> toolchain 配置</h3><p>在 <code>toolchain.cmake</code> 中配置 arm-none-eabi 工具链</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token comment"># 设置 arm-none-eabi 工具链地址, 使用绝对路径</span>
<span class="token keyword">set</span><span class="token punctuation">(</span>TOOLCHAIN_PATH .../gcc-arm-none-eabi-<span class="token number">10.3</span>-<span class="token number">2021.10</span>/bin<span class="token punctuation">)</span>

<span class="token comment"># 指定编译平台/架构与语言标准</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_SYSTEM_NAME</span> Generic<span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_SYSTEM_PROCESSOR</span> arm<span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_TRY_COMPILE_TARGET_TYPE</span> STATIC_LIBRARY<span class="token punctuation">)</span>

<span class="token comment"># 指定工具链</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_C_COMPILER_FORCED</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span> <span class="token comment"># skip compiler test</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_COMPILER_FORCED</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span>

<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_C_COMPILER</span> <span class="token punctuation">\${</span>TOOLCHAIN_PATH<span class="token punctuation">}</span>/arm-none-eabi-gcc.exe<span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_COMPILER</span> <span class="token punctuation">\${</span>TOOLCHAIN_PATH<span class="token punctuation">}</span>/arm-none-eabi-g++.exe<span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_ASM_COMPILER</span> <span class="token punctuation">\${</span>TOOLCHAIN_PATH<span class="token punctuation">}</span>/arm-none-eabi-gcc.exe<span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_LINKER</span> <span class="token punctuation">\${</span>TOOLCHAIN_PATH<span class="token punctuation">}</span>/arm-none-eabi-ld.exe<span class="token punctuation">)</span>

<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_OBJCOPY</span> <span class="token punctuation">\${</span>TOOLCHAIN_PATH<span class="token punctuation">}</span>/arm-none-eabi-objcopy.exe<span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_OBJDUMP</span> <span class="token punctuation">\${</span>TOOLCHAIN_PATH<span class="token punctuation">}</span>/arm-none-eabi-objdump.exe<span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span>SIZE <span class="token punctuation">\${</span>TOOLCHAIN_PATH<span class="token punctuation">}</span>/arm-none-eabi-size.exe<span class="token punctuation">)</span> 
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_AR</span> <span class="token punctuation">\${</span>TOOLCHAIN_PATH<span class="token punctuation">}</span>/arm-none-eabi-ar.exe<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30);function b(_,C){const a=p("ExternalLinkIcon");return c(),o("div",null,[u,n("blockquote",null,[n("p",null,[s("参考文档"),d,n("a",r,[s("https://zhuanlan.zhihu.com/p/642899924"),e(a)]),k,n("a",m,[s("https://zhuanlan.zhihu.com/p/661281743"),e(a)])])]),v])}const E=t(l,[["render",b],["__file","cmake.html.vue"]]);export{E as default};
